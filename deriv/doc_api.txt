Account List (request)

Returns all accounts belonging to the authorized user.
Auth Required: read
{}
{}
account_list

constant
integer
1
Must be 1
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Account List (response)

Returns all accounts belonging to the authorized user.
{}
{}
account_list

array
object
List of accounts for current user. This is also available from the authroize call.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
account_list
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Account List (request)",
  "description": "Returns all accounts belonging to the authorized user.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "account_list"
  ],
  "properties": {
    "account_list": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}



Active Symbols (request)

Retrieve a list of all currently active symbols (underlying markets upon which contracts are available for trading).
{}
{}
active_symbols

enum
string
brief
full
If you use brief, only a subset of fields will be returned.
{}
barrier_category

array
string
[Optional] Category of barrier.
{}
contract_type

array
string
[Optional] The proposed contract type
{}
landing_company

enum
string
iom
malta
maltainvest
svg
virtual
vanuatu
Deprecated - replaced by landing_company_short.
{}
landing_company_short

enum
string
iom
malta
maltainvest
svg
virtual
vanuatu
[Optional] If you specify this field, only symbols available for trading by that landing company will be returned. If you are logged in, only symbols available for trading by your landing company will be returned regardless of what you specify in this field.
{}
product_type

constant
string
basic
[Optional] If you specify this field, only symbols that can be traded through that product type will be returned.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Active Symbols (response)

A message containing the list of active symbols.
{}
{}
active_symbols

array
active_symbols
List of active symbols.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
active_symbols
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Active Symbols (request)",
  "description": "Retrieve a list of all currently active symbols (underlying markets upon which contracts are available for trading).",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "active_symbols"
  ],
  "properties": {
    "active_symbols": {
      "description": "If you use `brief`, only a subset of fields will be returned.",
      "type": "string",
      "enum": [
        "brief",
        "full"
      ]
    },
    "barrier_category": {
      "description": "[Optional] Category of barrier.",
      "type": "array",
      "items": {
        "description": "",
        "type": "string",
        "enum": [
          "american",
          "asian",
          "euro_atm",
          "euro_non_atm",
          "non_financial",
          "lookback",
          "reset"
        ]
      }
    },
    "contract_type": {
      "description": "[Optional] The proposed contract type",
      "type": "array",
      "items": {
        "description": "",
        "type": "string",
        "enum": [
          "MULTUP",
          "MULTDOWN",
          "UPORDOWN",
          "EXPIRYRANGE",
          "ONETOUCH",
          "CALLE",
          "LBHIGHLOW",
          "ASIAND",
          "EXPIRYRANGEE",
          "DIGITDIFF",
          "DIGITMATCH",
          "DIGITOVER",
          "PUTE",
          "DIGITUNDER",
          "NOTOUCH",
          "CALL",
          "RANGE",
          "LBFLOATPUT",
          "DIGITODD",
          "PUT",
          "ASIANU",
          "LBFLOATCALL",
          "EXPIRYMISSE",
          "EXPIRYMISS",
          "DIGITEVEN",
          "TICKHIGH",
          "TICKLOW",
          "RESETCALL",
          "RESETPUT",
          "CALLSPREAD",
          "PUTSPREAD",
          "RUNHIGH",
          "RUNLOW",
          "ACCU",
          "VANILLALONGCALL",
          "VANILLALONGPUT",
          "TURBOSLONG",
          "TURBOSSHORT"
        ]
      }
    },
    "landing_company": {
      "description": "Deprecated - replaced by landing_company_short.",
      "type": "string",
      "enum": [
        "iom",
        "malta",
        "maltainvest",
        "svg",
        "virtual",
        "vanuatu"
      ]
    },
    "landing_company_short": {
      "description": "[Optional] If you specify this field, only symbols available for trading by that landing company will be returned. If you are logged in, only symbols available for trading by your landing company will be returned regardless of what you specify in this field.",
      "type": "string",
      "enum": [
        "iom",
        "malta",
        "maltainvest",
        "svg",
        "virtual",
        "vanuatu"
      ]
    },
    "product_type": {
      "description": "[Optional] If you specify this field, only symbols that can be traded through that product type will be returned.",
      "type": "string",
      "enum": [
        "basic"
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

API Token (request)

This call manages API tokens
Auth Required: admin
{}
{}
api_token

constant
integer
1
Must be 1
{}
delete_token

string
^[A-Za-z0-9\s_*]+$
[Optional] The token to remove.
{}
new_token

string
^[A-Za-z0-9\s_]+$
[Optional] The name of the created token.
{}
new_token_scopes

array
string
[Optional] List of permission scopes to provide with the token.
{}
valid_for_current_ip_only

enum
integer
0
1
[Optional] If you set this parameter during token creation, then the token created will only work for the IP address that was used to create the token
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
API Token (response)

The result of the API token request made.
{}
{}
api_token

api_token
Contains the result of API token according to the type of request.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
api_token
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "API Token (request)",
  "description": "This call manages API tokens",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "admin"
  ],
  "additionalProperties": false,
  "required": [
    "api_token"
  ],
  "properties": {
    "api_token": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "delete_token": {
      "description": "[Optional] The token to remove.",
      "type": "string",
      "pattern": "^[A-Za-z0-9\\s_*]+$"
    },
    "new_token": {
      "description": "[Optional] The name of the created token.",
      "type": "string",
      "pattern": "^[A-Za-z0-9\\s_]+$"
    },
    "new_token_scopes": {
      "description": "[Optional] List of permission scopes to provide with the token.",
      "type": "array",
      "items": {
        "description": "Required when create new token",
        "type": "string",
        "enum": [
          "read",
          "trade",
          "trading_information",
          "payments",
          "admin"
        ]
      },
      "uniqueItems": true
    },
    "valid_for_current_ip_only": {
      "description": "[Optional] If you set this parameter during token creation, then the token created will only work for the IP address that was used to create the token",
      "type": "integer",
      "enum": [
        0,
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


Application: Delete (request)

The request for deleting an application.
Auth Required: admin
{}
{}
app_delete

integer
Application app_id
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Application: Delete (response)

The result of delete application request made.
{}
{}
app_delete

integer
1 on success
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
app_delete
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Delete (request)",
  "description": "The request for deleting an application.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "admin"
  ],
  "additionalProperties": false,
  "required": [
    "app_delete"
  ],
  "properties": {
    "app_delete": {
      "description": "Application app_id",
      "type": "integer"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


Application: Delete (response)

The result of delete application request made.
{}
{}
app_delete

integer
1 on success
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
app_delete
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Delete (response)",
  "description": "The result of delete application request made.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "app_delete": {
      "title": "app_delete",
      "description": "1 on success",
      "type": "integer"
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "app_delete"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Application: Get Details (request)

To get the information of the OAuth application specified by 'app_id'
Auth Required: read
{}
{}
app_get

integer
Application app_id
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Application: Get Details (response)

A message with requested application details
{}
{}
app_get

app_get
The information of the requested application.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
app_get
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Get Details (request)",
  "description": "To get the information of the OAuth application specified by 'app_id'",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "app_get"
  ],
  "properties": {
    "app_get": {
      "description": "Application app_id",
      "type": "integer"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Get Details (response)",
  "description": "A message with requested application details",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "app_get": {
      "title": "app_get",
      "description": "The information of the requested application.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "app_id",
        "app_markup_percentage",
        "appstore",
        "github",
        "googleplay",
        "homepage",
        "name",
        "redirect_uri",
        "verification_uri"
      ],
      "properties": {
        "active": {
          "description": "Active.",
          "type": "integer"
        },
        "app_id": {
          "description": "Application ID.",
          "type": "integer"
        },
        "app_markup_percentage": {
          "description": "Markup added to contract prices (as a percentage of contract payout).",
          "type": "number"
        },
        "appstore": {
          "description": "Application's App Store URL.",
          "type": "string"
        },
        "github": {
          "description": "Application's GitHub page (for open-source projects).",
          "type": "string"
        },
        "googleplay": {
          "description": "Application's Google Play URL.",
          "type": "string"
        },
        "homepage": {
          "description": "Application's homepage URL.",
          "type": "string"
        },
        "name": {
          "description": "Application name.",
          "type": "string"
        },
        "redirect_uri": {
          "description": "The URL to redirect to after a successful login.",
          "type": "string"
        },
        "scopes": {
          "description": "Scope Details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verification_uri": {
          "description": "Used when `verify_email` called. If available, a URL containing the verification token will send to the client's email, otherwise only the token will be sent.",
          "type": "string"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "app_get"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}




Application: List (request)

List all of the account's OAuth applications
Auth Required: read
{}
{}
app_list

constant
integer
1
Must be 1
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Application: List (response)

A message with created applications
{}
{}
app_list

array
app_list
List of created applications for the authorized account.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
app_list
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: List (request)",
  "description": "List all of the account's OAuth applications",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "app_list"
  ],
  "properties": {
    "app_list": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: List (response)",
  "description": "A message with created applications",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "app_list": {
      "title": "app_list",
      "description": "List of created applications for the authorized account.",
      "type": "array",
      "items": {
        "title": "Application object",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "app_id",
          "app_markup_percentage",
          "appstore",
          "github",
          "googleplay",
          "homepage",
          "name",
          "redirect_uri",
          "verification_uri"
        ],
        "properties": {
          "active": {
            "description": "Active.",
            "type": "integer"
          },
          "app_id": {
            "description": "Application ID.",
            "type": "integer"
          },
          "app_markup_percentage": {
            "description": "Markup added to contract prices (as a percentage of contract payout).",
            "type": "number"
          },
          "appstore": {
            "description": "Application's App Store URL.",
            "type": [
              "null",
              "string"
            ]
          },
          "github": {
            "description": "Application's GitHub page. (for open-source projects)",
            "type": [
              "null",
              "string"
            ]
          },
          "googleplay": {
            "description": "Application's Google Play URL.",
            "type": [
              "null",
              "string"
            ]
          },
          "homepage": {
            "description": "Application's homepage URL.",
            "type": [
              "null",
              "string"
            ]
          },
          "name": {
            "description": "Application name.",
            "type": "string"
          },
          "redirect_uri": {
            "description": "The URL to redirect to after a successful login.",
            "type": "string"
          },
          "scopes": {
            "description": "Scope Details.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "verification_uri": {
            "description": "Used when `verify_email` called. If available, a URL containing the verification token will send to the client's email, otherwise only the token will be sent.",
            "type": [
              "null",
              "string"
            ]
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "app_list"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Application: Markup Details (request)

Retrieve details of `app_markup` according to criteria specified.
Auth Required: read
{}
{}
app_markup_details

constant
integer
1
Must be 1
{}
app_id

integer
[Optional] Specific application app_id to report on.
{}
client_loginid

string
^[A-Za-z]{2,5}[0-9]{2,20}$
[Optional] Specific client loginid to report on, like CR12345
{}
date_from

string
^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9])|[0-9]{1,10})$
Start date (epoch or YYYY-MM-DD HH:MM:SS). Results are inclusive of this time.
{}
date_to

string
^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9])|[0-9]{1,10})$
End date (epoch or YYYY-MM-DD HH::MM::SS). Results are inclusive of this time.
{}
description

enum
integer
0
1
[Optional] If set to 1, will return app_markup transaction details.
{}
limit

number
default:
1000
[Optional] Apply upper limit to count of transactions received.
{}
offset

integer
[Optional] Number of transactions to skip.
{}
sort

enum
string
ASC
DESC
default:
DESC
[Optional] Sort direction on transaction_time. Other fields sort order is ASC.
{}
sort_fields

array
string
[Optional] One or more of the specified fields to sort on. Default sort field is by transaction_time.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Application: Markup Details (response)

Per transaction reporting of app_markup
{}
{}
app_markup_details

app_markup_details
App Markup transaction details
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
app_markup_details
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Markup Details (request)",
  "description": "Retrieve details of `app_markup` according to criteria specified.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "app_markup_details",
    "date_from",
    "date_to"
  ],
  "properties": {
    "app_markup_details": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "app_id": {
      "description": "[Optional] Specific application `app_id` to report on.",
      "type": "integer"
    },
    "client_loginid": {
      "description": "[Optional] Specific client loginid to report on, like CR12345",
      "type": "string",
      "pattern": "^[A-Za-z]{2,5}[0-9]{2,20}$"
    },
    "date_from": {
      "description": "Start date (epoch or YYYY-MM-DD HH:MM:SS). Results are inclusive of this time.",
      "type": "string",
      "pattern": "^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9])|[0-9]{1,10})$"
    },
    "date_to": {
      "description": "End date (epoch or YYYY-MM-DD HH::MM::SS). Results are inclusive of this time.",
      "type": "string",
      "pattern": "^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9])|[0-9]{1,10})$"
    },
    "description": {
      "description": "[Optional] If set to 1, will return `app_markup` transaction details.",
      "type": "integer",
      "enum": [
        0,
        1
      ]
    },
    "limit": {
      "description": "[Optional] Apply upper limit to count of transactions received.",
      "type": "number",
      "default": 1000,
      "maximum": 1000,
      "minimum": 0
    },
    "offset": {
      "description": "[Optional] Number of transactions to skip.",
      "type": "integer",
      "minimum": 0
    },
    "sort": {
      "description": "[Optional] Sort direction on `transaction_time`. Other fields sort order is ASC.",
      "type": "string",
      "default": "DESC",
      "enum": [
        "ASC",
        "DESC"
      ]
    },
    "sort_fields": {
      "description": "[Optional] One or more of the specified fields to sort on. Default sort field is by `transaction_time`.",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "app_id",
          "client_loginid",
          "transaction_time"
        ]
      },
      "maxItems": 3,
      "minItems": 0,
      "uniqueItems": true
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Markup Details (response)",
  "description": "Per transaction reporting of app_markup",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "app_markup_details": {
      "title": "app_markup_details",
      "description": "App Markup transaction details",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "transactions": {
          "description": "Array of returned transactions",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "app_id": {
                "description": "ID of the application where this contract was purchased.",
                "type": "integer"
              },
              "app_markup": {
                "description": "The markup the client paid in their currency",
                "type": "number"
              },
              "app_markup_usd": {
                "description": "The markup the client paid in USD",
                "type": "number"
              },
              "app_markup_value": {
                "description": "The markup the client paid in the app developer's currency",
                "type": "number"
              },
              "client_currcode": {
                "description": "Currency code of the client",
                "type": "string"
              },
              "client_loginid": {
                "description": "Login ID of the client",
                "type": "string"
              },
              "dev_currcode": {
                "description": "Currency code of the app developer",
                "type": "string"
              },
              "dev_loginid": {
                "description": "Login ID of the app developer",
                "type": "string"
              },
              "transaction_id": {
                "description": "The transaction ID. Every contract (buy or sell) and every payment has a unique ID.",
                "type": "integer",
                "examples": [
                  10867502908
                ]
              },
              "transaction_time": {
                "description": "The epoch value of purchase time of transaction",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "app_markup_details"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Application: Markup Statistics (request)

Retrieve statistics of `app_markup`.
Auth Required: read
{}
{}
app_markup_statistics

constant
integer
1
Must be 1
{}
date_from

string
^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9])|[0-9]{1,10})$
Start date (epoch or YYYY-MM-DD HH:MM:SS). Results are inclusive of this time.
{}
date_to

string
^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9])|[0-9]{1,10})$
End date (epoch or YYYY-MM-DD HH::MM::SS). Results are inclusive of this time.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Application: Markup Statistics (response)

Per application reporting of app_markup
{}
{}
app_markup_statistics

app_markup_statistics
App Markup transaction statistics
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
app_markup_statistics
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Markup Statistics (request)",
  "description": "Retrieve statistics of `app_markup`.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "app_markup_statistics",
    "date_from",
    "date_to"
  ],
  "properties": {
    "app_markup_statistics": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "date_from": {
      "description": "Start date (epoch or YYYY-MM-DD HH:MM:SS). Results are inclusive of this time.",
      "type": "string",
      "pattern": "^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9])|[0-9]{1,10})$"
    },
    "date_to": {
      "description": "End date (epoch or YYYY-MM-DD HH::MM::SS). Results are inclusive of this time.",
      "type": "string",
      "pattern": "^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):([0-5]?[0-9]):([0-5]?[0-9])|[0-9]{1,10})$"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Markup Statistics (response)",
  "description": "Per application reporting of app_markup",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "app_markup_statistics": {
      "title": "app_markup_statistics",
      "description": "App Markup transaction statistics",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "breakdown": {
          "description": "Array of summed app markups grouped by app_id",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "app_id": {
                "description": "ID of the application where this contract was purchased.",
                "type": "integer"
              },
              "app_markup_usd": {
                "description": "The sum of markup the client paid in USD",
                "type": "number"
              },
              "app_markup_value": {
                "description": "The sum of markup the client paid in developer's currency",
                "type": "number"
              },
              "dev_currcode": {
                "description": "Currency code of the app developer",
                "type": "string"
              },
              "transactions_count": {
                "description": "The count of app transactions",
                "type": "number"
              }
            }
          }
        },
        "total_app_markup_usd": {
          "description": "The sum of markup the client paid in USD",
          "type": "number"
        },
        "total_transactions_count": {
          "description": "The total count of transactions",
          "type": "number"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "app_markup_statistics"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Application: Register (request)

Register a new OAuth application
Auth Required: admin
{}
{}
app_register

constant
integer
1
Must be 1
{}
app_markup_percentage

number
[Optional] Markup to be added to contract prices (as a percentage of contract payout). Max markup: 3%.
{}
appstore

string
^https?://itunes\.apple\.com/\S+$
[Optional] Application's App Store URL (if applicable).
{}
github

string
^https?://(www\.)?github\.com/\S+$
[Optional] Application's GitHub page (for open-source projects).
{}
googleplay

string
^https?://play\.google\.com/store/apps/details\?id=[\w \.]+$
[Optional] Application's Google Play URL (if applicable).
{}
homepage

string
^https?://[0-9a-zA-Z\.-]+[\%\/\w \.-]*$
[Optional] Application's homepage URL.
{}
name

string
^[\w\s-]{1,48}$
Application name.
{}
redirect_uri

string
^[a-z][a-z0-9.+\-]*://[0-9a-zA-Z\.-]+[\%\/\w \.-]*$
[Optional] The URL to redirect to after a successful login. Required if charging markup percentage
{}
scopes

array
string
List of permission scopes to grant the application.
{}
verification_uri

string
^[a-z][a-z0-9.+\-]*://[0-9a-zA-Z\.-]+[\%\/\w \.-]*$
[Optional] Used when verify_email called. If available, a URL containing the verification token will be sent to the client's email, otherwise only the token will be sent.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Application: Register (response)

A message with created application details
{}
{}
app_register

app_register
The information of the created application.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
app_register
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Register (request)",
  "description": "Register a new OAuth application",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "admin"
  ],
  "additionalProperties": false,
  "required": [
    "app_register",
    "name",
    "scopes"
  ],
  "properties": {
    "app_register": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "app_markup_percentage": {
      "description": "[Optional] Markup to be added to contract prices (as a percentage of contract payout). Max markup: 3%.",
      "type": "number",
      "maximum": 3,
      "minimum": 0
    },
    "appstore": {
      "description": "[Optional] Application's App Store URL (if applicable).",
      "type": "string",
      "pattern": "^https?://itunes\\.apple\\.com/\\S+$"
    },
    "github": {
      "description": "[Optional] Application's GitHub page (for open-source projects).",
      "type": "string",
      "pattern": "^https?://(www\\.)?github\\.com/\\S+$"
    },
    "googleplay": {
      "description": "[Optional] Application's Google Play URL (if applicable).",
      "type": "string",
      "pattern": "^https?://play\\.google\\.com/store/apps/details\\?id=[\\w \\.]+$"
    },
    "homepage": {
      "description": "[Optional] Application's homepage URL.",
      "type": "string",
      "pattern": "^https?://[0-9a-zA-Z\\.-]+[\\%\\/\\w \\.-]*$"
    },
    "name": {
      "description": "Application name.",
      "type": "string",
      "pattern": "^[\\w\\s-]{1,48}$"
    },
    "redirect_uri": {
      "description": "[Optional] The URL to redirect to after a successful login. Required if charging markup percentage",
      "type": "string",
      "pattern": "^[a-z][a-z0-9.+\\-]*://[0-9a-zA-Z\\.-]+[\\%\\/\\w \\.-]*$"
    },
    "scopes": {
      "description": "List of permission scopes to grant the application.",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "read",
          "trade",
          "trading_information",
          "payments",
          "admin"
        ]
      },
      "uniqueItems": true
    },
    "verification_uri": {
      "description": "[Optional] Used when `verify_email` called. If available, a URL containing the verification token will be sent to the client's email, otherwise only the token will be sent.",
      "type": "string",
      "pattern": "^[a-z][a-z0-9.+\\-]*://[0-9a-zA-Z\\.-]+[\\%\\/\\w \\.-]*$"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Register (response)",
  "description": "A message with created application details",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "app_register": {
      "title": "app_register",
      "description": "The information of the created application.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "app_id",
        "app_markup_percentage",
        "appstore",
        "github",
        "googleplay",
        "homepage",
        "name",
        "redirect_uri",
        "verification_uri"
      ],
      "properties": {
        "active": {
          "description": "Active.",
          "type": "integer"
        },
        "app_id": {
          "description": "Application ID.",
          "type": "integer"
        },
        "app_markup_percentage": {
          "description": "Markup added to contract prices (as a percentage of contract payout).",
          "type": "number"
        },
        "appstore": {
          "description": "Application's App Store URL.",
          "type": "string"
        },
        "github": {
          "description": "Application's GitHub page (for open-source projects).",
          "type": "string"
        },
        "googleplay": {
          "description": "Application's Google Play URL.",
          "type": "string"
        },
        "homepage": {
          "description": "Application's homepage URL.",
          "type": "string"
        },
        "name": {
          "description": "Application name.",
          "type": "string"
        },
        "redirect_uri": {
          "description": "The URL to redirect to after a successful login.",
          "type": "string"
        },
        "scopes": {
          "description": "Scope Details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verification_uri": {
          "description": "Used when `verify_email` called. If available, a URL containing the verification token will send to the client's email, otherwise only the token will be sent.",
          "type": "string"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "app_register"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Application: Update (request)

Update a new OAuth application
Auth Required: admin
{}
{}
app_update

integer
Application app_id.
{}
app_markup_percentage

number
[Optional] Markup to be added to contract prices (as a percentage of contract payout). Max markup: 3%.
{}
appstore

string
^https?://itunes\.apple\.com/\S+$
[Optional] Application's App Store URL (if applicable).
{}
github

string
^https?://(www\.)?github\.com/\S+$
[Optional] Application's GitHub page (for open-source projects).
{}
googleplay

string
^https?://play\.google\.com/store/apps/details\?id=[\w \.]+$
[Optional] Application's Google Play URL (if applicable).
{}
homepage

string
^https?://[0-9a-zA-Z\.-]+[\%\/\w \.-]*$
[Optional] Application's homepage URL.
{}
name

string
^[\w\s-]{1,48}$
Application name.
{}
redirect_uri

string
^[a-z][a-z0-9.+\-]*://[0-9a-zA-Z\.-]+[\%\/\w \.-]*$
[Optional] The URL to redirect to after a successful login. Required if charging markup percentage.
{}
scopes

array
string
Change scopes will revoke all user's grants and log them out.
{}
verification_uri

string
^[a-z][a-z0-9.+\-]*://[0-9a-zA-Z\.-]+[\%\/\w \.-]*$
[Optional] Used when verify_email called. If available, a URL containing the verification token will send to the client's email, otherwise only the token will be sent.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Application: Update (response)

A message with created application
{}
{}
app_update

app_update
Information of the updated application.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
app_update
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Update (request)",
  "description": "Update a new OAuth application",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "admin"
  ],
  "additionalProperties": false,
  "required": [
    "app_update",
    "name",
    "scopes"
  ],
  "properties": {
    "app_update": {
      "description": "Application app_id.",
      "type": "integer"
    },
    "app_markup_percentage": {
      "description": "[Optional] Markup to be added to contract prices (as a percentage of contract payout). Max markup: 3%.",
      "type": "number",
      "maximum": 3,
      "minimum": 0
    },
    "appstore": {
      "description": "[Optional] Application's App Store URL (if applicable).",
      "type": "string",
      "pattern": "^https?://itunes\\.apple\\.com/\\S+$"
    },
    "github": {
      "description": "[Optional] Application's GitHub page (for open-source projects).",
      "type": "string",
      "pattern": "^https?://(www\\.)?github\\.com/\\S+$"
    },
    "googleplay": {
      "description": "[Optional] Application's Google Play URL (if applicable).",
      "type": "string",
      "pattern": "^https?://play\\.google\\.com/store/apps/details\\?id=[\\w \\.]+$"
    },
    "homepage": {
      "description": "[Optional] Application's homepage URL.",
      "type": "string",
      "pattern": "^https?://[0-9a-zA-Z\\.-]+[\\%\\/\\w \\.-]*$"
    },
    "name": {
      "description": "Application name.",
      "type": "string",
      "pattern": "^[\\w\\s-]{1,48}$"
    },
    "redirect_uri": {
      "description": "[Optional] The URL to redirect to after a successful login. Required if charging markup percentage.",
      "type": "string",
      "pattern": "^[a-z][a-z0-9.+\\-]*://[0-9a-zA-Z\\.-]+[\\%\\/\\w \\.-]*$"
    },
    "scopes": {
      "description": "Change scopes will revoke all user's grants and log them out.",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "read",
          "trade",
          "trading_information",
          "payments",
          "admin"
        ]
      },
      "uniqueItems": true
    },
    "verification_uri": {
      "description": "[Optional] Used when `verify_email` called. If available, a URL containing the verification token will send to the client's email, otherwise only the token will be sent.",
      "type": "string",
      "pattern": "^[a-z][a-z0-9.+\\-]*://[0-9a-zA-Z\\.-]+[\\%\\/\\w \\.-]*$"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Application: Update (response)",
  "description": "A message with created application",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "app_update": {
      "title": "app_update",
      "description": "Information of the updated application.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "active": {
          "description": "Active.",
          "type": "integer"
        },
        "app_id": {
          "description": "Application ID.",
          "type": "integer"
        },
        "app_markup_percentage": {
          "description": "Markup added to contract prices (as a percentage of contract payout).",
          "type": "number"
        },
        "appstore": {
          "description": "Application's App Store URL.",
          "type": "string"
        },
        "github": {
          "description": "Application's GitHub page (for open-source projects).",
          "type": "string"
        },
        "googleplay": {
          "description": "Application's Google Play URL.",
          "type": "string"
        },
        "homepage": {
          "description": "Application's homepage URL.",
          "type": "string"
        },
        "name": {
          "description": "Application name.",
          "type": "string"
        },
        "redirect_uri": {
          "description": "The URL to redirect to after a successful login.",
          "type": "string"
        },
        "scopes": {
          "description": "Scope Details.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verification_uri": {
          "description": "Used when `verify_email` called. If available, a URL containing the verification token will be sent to the client's email, otherwise only the token will be sent.",
          "type": "string"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "app_update"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Asset Index (request)

Retrieve a list of all available underlyings and the corresponding contract types and duration boundaries. If the user is logged in, only the assets available for that user's landing company will be returned.
{}
{}
asset_index

constant
integer
1
Must be 1
{}
landing_company

enum
string
iom
malta
maltainvest
svg
virtual
vanuatu
Deprecated - replaced by landing_company_short.
{}
landing_company_short

enum
string
iom
malta
maltainvest
svg
virtual
vanuatu
[Optional] If specified, will return only the underlyings for the specified landing company.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Asset Index (response)

A message with Asset Index
{}
{}
asset_index

array
asset_index
List of underlyings by their display name and symbol followed by their available contract types and duration boundaries.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
asset_index
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Asset Index (request)",
  "description": "Retrieve a list of all available underlyings and the corresponding contract types and duration boundaries. If the user is logged in, only the assets available for that user's landing company will be returned.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "asset_index"
  ],
  "properties": {
    "asset_index": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "landing_company": {
      "description": "Deprecated - replaced by landing_company_short.",
      "type": "string",
      "enum": [
        "iom",
        "malta",
        "maltainvest",
        "svg",
        "virtual",
        "vanuatu"
      ]
    },
    "landing_company_short": {
      "description": "[Optional] If specified, will return only the underlyings for the specified landing company.",
      "type": "string",
      "enum": [
        "iom",
        "malta",
        "maltainvest",
        "svg",
        "virtual",
        "vanuatu"
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Asset Index (response)",
  "description": "A message with Asset Index",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "asset_index": {
      "title": "asset_index",
      "description": "List of underlyings by their display name and symbol followed by their available contract types and duration boundaries.",
      "type": "array"
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "asset_index"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Authorize (request)

Authorize current WebSocket session to act on behalf of the owner of a given token. Must precede requests that need to access client account, for example purchasing and selling contracts or viewing portfolio.
{}
{}
authorize

string
^[\w\-]{1,128}$
Authentication token. May be retrieved from https://www.binary.com/en/user/security/api_tokenws.html. Set to MULTI when using multiple tokens.
{}
add_to_login_history

enum
integer
1
0
default:
0
[Optional] Send this when you use api tokens for authorization and want to track activity using login_history call.
{}
tokens

array
string
Additional Authentication tokens of authorized user that may be used in this session. Upto 25 tokens.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Authorize (response)

A message containing account information for the holder of that token.
{}
{}
authorize

authorize
Account information for the holder of the token.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
authorize
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Authorize (request)",
  "description": "Authorize current WebSocket session to act on behalf of the owner of a given token. Must precede requests that need to access client account, for example purchasing and selling contracts or viewing portfolio.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "authorize"
  ],
  "properties": {
    "authorize": {
      "description": "Authentication token. May be retrieved from https://www.binary.com/en/user/security/api_tokenws.html. Set to MULTI when using multiple tokens.",
      "type": "string",
      "pattern": "^[\\w\\-]{1,128}$",
      "sensitive": 1
    },
    "add_to_login_history": {
      "description": "[Optional] Send this when you use api tokens for authorization and want to track activity using `login_history` call.",
      "type": "integer",
      "default": 0,
      "enum": [
        1,
        0
      ]
    },
    "tokens": {
      "description": "Additional Authentication tokens of authorized user that may be used in this session. Upto 25 tokens.",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[\\w\\-]{1,128}$"
      },
      "maxItems": 25,
      "sensitive": 1
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Authorize (response)",
  "description": "A message containing account information for the holder of that token.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "authorize": {
      "title": "authorize",
      "description": "Account information for the holder of the token.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "account_list": {
          "description": "List of accounts for current user. This is also available from the `account_list` call.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "account_category": {
                "description": "Account category.",
                "type": "string",
                "enum": [
                  "trading",
                  "wallet"
                ]
              },
              "account_type": {
                "description": "Account type.",
                "type": "string"
              },
              "broker": {
                "description": "2 letter broker code.",
                "type": "string"
              },
              "created_at": {
                "description": "Creation time of the account as epoch.",
                "type": "integer"
              },
              "currency": {
                "description": "Currency of specified account.",
                "type": "string"
              },
              "currency_type": {
                "description": "Currency type for the corresponding currency.",
                "type": "string"
              },
              "excluded_until": {
                "description": "Epoch of date till client has excluded him/herself from the website, only present if client is self excluded.",
                "type": "integer"
              },
              "is_disabled": {
                "description": "Boolean value: 1 or 0, indicating whether the account is marked as disabled or not.",
                "type": "integer",
                "enum": [
                  1,
                  0
                ]
              },
              "is_virtual": {
                "description": "Boolean value: 1 or 0, indicating whether the account is a virtual-money account.",
                "type": "integer",
                "enum": [
                  1,
                  0
                ]
              },
              "landing_company_name": {
                "description": "Landing company shortcode the account belongs to.",
                "type": "string"
              },
              "linked_to": {
                "description": "Details of the list of Trading accounts linked to the Wallet account.",
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "loginid": {
                      "description": "Account ID.",
                      "type": "string"
                    },
                    "platform": {
                      "description": "Account platform name.",
                      "type": "string",
                      "enum": [
                        "ctrader",
                        "dtrade",
                        "dwallet",
                        "dxtrade",
                        "mt5"
                      ]
                    }
                  }
                }
              },
              "loginid": {
                "description": "The account ID of specified account.",
                "type": "string"
              }
            }
          }
        },
        "balance": {
          "description": "Cash balance of the account.",
          "type": "number"
        },
        "country": {
          "description": "2-letter country code (ISO standard).",
          "type": "string",
          "pattern": "^[a-z]{0,2}$"
        },
        "currency": {
          "description": "Currency of the account.",
          "type": "string"
        },
        "email": {
          "description": "User email.",
          "type": "string"
        },
        "fullname": {
          "description": "User's full name. Will be empty for virtual accounts.",
          "type": "string"
        },
        "is_virtual": {
          "description": "Boolean value: 1 or 0, indicating whether the account is a virtual-money account.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "landing_company_fullname": {
          "description": "Landing company name the account belongs to.",
          "type": "string"
        },
        "landing_company_name": {
          "description": "Landing company shortcode the account belongs to.",
          "type": "string"
        },
        "linked_to": {
          "description": "Details of the list of Trading accounts linked to the Wallet account.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "loginid": {
                "description": "Account ID.",
                "type": "string"
              },
              "platform": {
                "description": "Account platform name.",
                "type": "string",
                "enum": [
                  "ctrader",
                  "dtrade",
                  "dwallet",
                  "dxtrade",
                  "mt5"
                ]
              }
            }
          }
        },
        "local_currencies": {
          "description": "Currencies in client's residence country",
          "type": "object",
          "minProperties": 0,
          "patternProperties": {
            "^[a-zA-Z0-9]{2,20}$": {
              "description": "Currency code",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "fractional_digits"
              ],
              "properties": {
                "fractional_digits": {
                  "description": "Number of fractional digits.",
                  "type": "integer"
                }
              }
            }
          }
        },
        "loginid": {
          "description": "The account ID that the token was issued for.",
          "type": "string"
        },
        "preferred_language": {
          "description": "User's preferred language, ISO standard code of language",
          "type": [
            "null",
            "string"
          ],
          "pattern": "^[A-Z]{0,2}$|^[A-Z]{2}_[A-Z]{2}$"
        },
        "scopes": {
          "description": "Scopes available to the token.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "upgradeable_landing_companies": {
          "description": "List of landing company shortcodes the account can upgrade to.",
          "type": "array"
        },
        "user_id": {
          "description": "The internal user ID for this account.",
          "type": "integer"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "authorize"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Balance (request)

Get user account balance
Auth Required: readtrading_information
{}
{}
balance

constant
integer
1
Must be 1
{}
account

string
^(current|all|[A-Z]{2,4}[0-9]{1,10})$
default:
current
[Optional] If set to all, return the balances of all accounts one by one; if set to current, return the balance of current account; if set as an account id, return the balance of that account.
{}
subscribe

enum
integer
0
1
[Optional] If set to 1, will send updates whenever the balance changes.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Balance (response)

Return details of user account balance
{}
{}
balance

balance
Current balance of one or more accounts.
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
balance
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Balance (request)",
  "description": "Get user account balance",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read",
    "trading_information"
  ],
  "additionalProperties": false,
  "required": [
    "balance"
  ],
  "properties": {
    "balance": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "account": {
      "description": "[Optional] If set to `all`, return the balances of all accounts one by one; if set to `current`, return the balance of current account; if set as an account id, return the balance of that account.",
      "type": "string",
      "pattern": "^(current|all|[A-Z]{2,4}[0-9]{1,10})$",
      "default": "current"
    },
    "subscribe": {
      "description": "[Optional] If set to 1, will send updates whenever the balance changes.",
      "type": "integer",
      "enum": [
        0,
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Balance (response)",
  "description": "Return details of user account balance",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "balance": {
      "title": "balance",
      "description": "Current balance of one or more accounts.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "balance",
        "currency",
        "loginid"
      ],
      "properties": {
        "balance": {
          "description": "Balance of current account.",
          "type": "number",
          "minimum": 0
        },
        "accounts": {
          "description": "List of active accounts.",
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^.+[0-9]{3,}$": {
              "description": "Individual accounts details.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "balance",
                "converted_amount",
                "currency",
                "demo_account",
                "status",
                "type"
              ],
              "properties": {
                "balance": {
                  "description": "Account balance",
                  "type": "number"
                },
                "converted_amount": {
                  "description": "Account balance converted the total currency.",
                  "type": "number"
                },
                "currency": {
                  "description": "Account currency.",
                  "type": "string",
                  "pattern": "^(|[a-zA-Z0-9]{2,20})$",
                  "examples": [
                    "USD"
                  ]
                },
                "demo_account": {
                  "description": "If set to 1, this is a demo account.",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "status": {
                  "description": "Boolean value of 1 or 0. Indicates the status of account. 1 indicates account is good and accessible.",
                  "type": "integer",
                  "enum": [
                    1,
                    0
                  ]
                },
                "type": {
                  "description": "Type of account.",
                  "type": "string",
                  "enum": [
                    "mt5",
                    "deriv"
                  ]
                }
              }
            }
          }
        },
        "currency": {
          "description": "Currency of current account.",
          "type": "string",
          "pattern": "^(|[a-zA-Z0-9]{2,20})$",
          "examples": [
            "USD"
          ]
        },
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        },
        "loginid": {
          "description": "Client loginid.",
          "type": "string",
          "pattern": "^[A-Z]{2,4}[0-9]{1,10}$",
          "examples": [
            "CR000000"
          ]
        },
        "total": {
          "description": "Summary totals of accounts by type.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "deriv": {
              "description": "Total balance of all real money Deriv accounts.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "amount",
                "currency"
              ],
              "properties": {
                "amount": {
                  "description": "Total of balances.",
                  "type": "number",
                  "minimum": 0
                },
                "currency": {
                  "description": "Currency of total.",
                  "type": "string",
                  "pattern": "^(|[a-zA-Z0-9]{2,20})$",
                  "examples": [
                    "USD"
                  ]
                }
              }
            },
            "deriv_demo": {
              "description": "Total balance of all demo Deriv accounts.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "amount",
                "currency"
              ],
              "properties": {
                "amount": {
                  "description": "Total of balances.",
                  "type": "number",
                  "minimum": 0
                },
                "currency": {
                  "description": "Currency of total.",
                  "type": "string",
                  "pattern": "^(|[a-zA-Z0-9]{2,20})$",
                  "examples": [
                    "USD"
                  ]
                }
              }
            },
            "mt5": {
              "description": "Total balance of all MT5 real money accounts.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "amount",
                "currency"
              ],
              "properties": {
                "amount": {
                  "description": "Total balance of all MT5 accounts",
                  "type": "number"
                },
                "currency": {
                  "description": "Currency of total.",
                  "type": "string",
                  "pattern": "^(|[a-zA-Z0-9]{2,20})$",
                  "examples": [
                    "USD"
                  ]
                }
              }
            },
            "mt5_demo": {
              "description": "Total balance of all MT5 demo accounts.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "amount",
                "currency"
              ],
              "properties": {
                "amount": {
                  "description": "Total of balances.",
                  "type": "number"
                },
                "currency": {
                  "description": "Currency of total.",
                  "type": "string",
                  "pattern": "^(|[a-zA-Z0-9]{2,20})$",
                  "examples": [
                    "USD"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "subscription": {
      "title": "Subscription information",
      "description": "For subscription requests only.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "balance"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Buy Contract (request)

Buy a Contract
Auth Required: trade
{}
{}
buy

string
^(?:[\w-]{32,128}|1)$
Either the ID received from a Price Proposal (proposal call), or 1 if contract buy parameters are passed in the parameters field.
{}
parameters

object
[Optional] Used to pass the parameters for contract buy.
{}
price

number
Maximum price at which to purchase the contract.
{}
subscribe

constant
integer
1
[Optional] 1 to stream.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Buy Contract (response)

A message with transaction results is received
{}
{}
buy

buy
Receipt confirmation for the purchase
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
buy
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Buy Contract (request)",
  "description": "Buy a Contract",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "trade"
  ],
  "additionalProperties": false,
  "required": [
    "buy",
    "price"
  ],
  "properties": {
    "buy": {
      "description": "Either the ID received from a Price Proposal (`proposal` call), or `1` if contract buy parameters are passed in the `parameters` field.",
      "type": "string",
      "pattern": "^(?:[\\w-]{32,128}|1)$"
    },
    "parameters": {
      "description": "[Optional] Used to pass the parameters for contract buy.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "contract_type",
        "currency",
        "symbol"
      ],
      "properties": {
        "amount": {
          "description": "[Optional] Proposed payout or stake value",
          "type": "number",
          "minimum": 0
        },
        "app_markup_percentage": {
          "description": "[Optional] Markup added to contract prices (as a percentage of contract payout)",
          "type": "number"
        },
        "barrier": {
          "description": "[Optional] Barrier for the contract (or last digit prediction for digit contracts). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers.",
          "type": "string",
          "pattern": "^(?=.{1,20}$)[+-]?[0-9]+\\.?[0-9]*$"
        },
        "barrier2": {
          "description": "[Optional] Low barrier for the contract (for contracts with two barriers). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers.",
          "type": "string",
          "pattern": "^(?=.{1,20}$)[+-]?[0-9]+\\.?[0-9]*$"
        },
        "barrier_range": {
          "description": "[Optional] Barrier range for callputspread.",
          "type": "string",
          "enum": [
            "tight",
            "middle",
            "wide"
          ]
        },
        "basis": {
          "description": "[Optional] Indicates whether amount is 'payout' or 'stake' for binary options.",
          "type": "string",
          "enum": [
            "payout",
            "stake"
          ]
        },
        "cancellation": {
          "description": "Cancellation duration option (only for `MULTUP` and `MULTDOWN` contracts).",
          "type": "string",
          "pattern": "^\\w+$"
        },
        "contract_type": {
          "description": "A valid contract-type",
          "type": "string",
          "enum": [
            "ACCU",
            "ASIAND",
            "ASIANU",
            "CALL",
            "CALLE",
            "CALLSPREAD",
            "DIGITDIFF",
            "DIGITEVEN",
            "DIGITMATCH",
            "DIGITODD",
            "DIGITOVER",
            "DIGITUNDER",
            "EXPIRYMISS",
            "EXPIRYMISSE",
            "EXPIRYRANGE",
            "EXPIRYRANGEE",
            "LBFLOATCALL",
            "LBFLOATPUT",
            "LBHIGHLOW",
            "MULTDOWN",
            "MULTUP",
            "NOTOUCH",
            "ONETOUCH",
            "PUT",
            "PUTE",
            "PUTSPREAD",
            "RANGE",
            "RESETCALL",
            "RESETPUT",
            "RUNHIGH",
            "RUNLOW",
            "SNOWDOWN",
            "SNOWUP",
            "TICKHIGH",
            "TICKLOW",
            "TURBOSLONG",
            "TURBOSSHORT",
            "UPORDOWN",
            "VANILLALONGCALL",
            "VANILLALONGPUT"
          ]
        },
        "currency": {
          "description": "This can only be the account-holder's currency",
          "type": "string",
          "pattern": "^[a-zA-Z0-9]{2,20}$"
        },
        "date_expiry": {
          "description": "[Optional] Epoch value of the expiry time of the contract. You must either specify date_expiry or duration.",
          "type": "integer",
          "maximum": 9999999999,
          "minimum": 1
        },
        "date_start": {
          "description": "[Optional] For forward-starting contracts, epoch value of the starting time of the contract.",
          "type": "integer",
          "maximum": 9999999999,
          "minimum": 0
        },
        "duration": {
          "description": "[Optional] Duration quantity",
          "type": "integer",
          "maximum": 99999999,
          "minimum": 0
        },
        "duration_unit": {
          "description": "[Optional] Duration unit is `s`: seconds, `m`: minutes, `h`: hours, `d`: days, `t`: ticks",
          "type": "string",
          "enum": [
            "d",
            "m",
            "s",
            "h",
            "t"
          ]
        },
        "growth_rate": {
          "description": "[Optional] Growth rate of an accumulator contract.",
          "type": "number"
        },
        "limit_order": {
          "description": "Add an order to close the contract once the order condition is met (only for `MULTUP` and `MULTDOWN` and `ACCU` contracts).",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "stop_loss": {
              "description": "Contract will be automatically closed when the value of the contract reaches a specific loss.",
              "type": "number"
            },
            "take_profit": {
              "description": "Contract will be automatically closed when the value of the contract reaches a specific profit.",
              "type": "number"
            }
          }
        },
        "multiplier": {
          "description": "[Optional] The multiplier for non-binary options. E.g. lookbacks.",
          "type": "number",
          "minimum": 0
        },
        "payout_per_point": {
          "description": "[Optional] Clients can provide payout_per_point directly, and the barrier will be calculated based on this payout_per_point value.",
          "type": "number"
        },
        "product_type": {
          "description": "[Optional] The product type.",
          "type": "string",
          "default": "basic",
          "enum": [
            "basic"
          ]
        },
        "selected_tick": {
          "description": "[Optional] The tick that is predicted to have the highest/lowest value - for tickhigh and ticklow contracts.",
          "type": "integer"
        },
        "symbol": {
          "description": "Symbol code",
          "type": "string",
          "pattern": "^\\w{2,30}$"
        },
        "trade_risk_profile": {
          "description": "[For Snowball only] The trade risk profile for Snowball trade types.",
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "trading_period_start": {
          "description": "[Optional] An epoch value of a predefined trading period start time",
          "type": "integer",
          "maximum": 9999999999,
          "minimum": 1
        }
      }
    },
    "price": {
      "description": "Maximum price at which to purchase the contract.",
      "type": "number",
      "minimum": 0
    },
    "subscribe": {
      "description": "[Optional] `1` to stream.",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Buy Contract (response)",
  "description": "A message with transaction results is received",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "buy": {
      "title": "buy",
      "description": "Receipt confirmation for the purchase",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "balance_after",
        "buy_price",
        "contract_id",
        "longcode",
        "payout",
        "purchase_time",
        "shortcode",
        "start_time",
        "transaction_id"
      ],
      "properties": {
        "balance_after": {
          "description": "The new account balance after completion of the purchase",
          "type": "number"
        },
        "buy_price": {
          "description": "Actual effected purchase price",
          "type": "number"
        },
        "contract_id": {
          "description": "Internal contract identifier",
          "type": "integer"
        },
        "longcode": {
          "description": "The description of contract purchased",
          "type": "string"
        },
        "payout": {
          "description": "Proposed payout value",
          "type": "number"
        },
        "purchase_time": {
          "description": "Epoch value of the transaction purchase time",
          "type": "integer"
        },
        "shortcode": {
          "description": "Compact description of the contract purchased",
          "type": "string"
        },
        "start_time": {
          "description": "Epoch value showing the expected start time of the contract",
          "type": "integer"
        },
        "transaction_id": {
          "description": "Internal transaction identifier",
          "type": "integer"
        }
      }
    },
    "subscription": {
      "title": "Subscription information",
      "description": "For subscription requests only.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "buy"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Buy Contract for Multiple Accounts (request)

Buy a Contract for multiple Accounts specified by the `tokens` parameter. Note, although this is an authorized call, the contract is not bought for the authorized account.
Auth Required: trade
{}
{}
buy_contract_for_multiple_accounts

string
^(?:[\w-]{32,128}|1)$
Either the ID received from a Price Proposal (proposal call), or 1 if contract buy parameters are passed in the parameters field.
{}
parameters

object
[Optional] Used to pass the parameters for contract buy.
{}
price

number
Maximum price at which to purchase the contract.
{}
tokens

array
string
List of API tokens identifying the accounts for which the contract is bought. Note: If the same token appears multiple times or if multiple tokens designate the same account, the contract is bought multiple times for this account.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Buy Contract for Multiple Accounts (response)

A message with transaction results is received
{}
{}
buy_contract_for_multiple_accounts

buy_contract_for_multiple_accounts
Receipt confirmation for the purchase
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
buy_contract_for_multiple_accounts
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Buy Contract for Multiple Accounts (request)",
  "description": "Buy a Contract for multiple Accounts specified by the `tokens` parameter. Note, although this is an authorized call, the contract is not bought for the authorized account.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "trade"
  ],
  "additionalProperties": false,
  "required": [
    "buy_contract_for_multiple_accounts",
    "price",
    "tokens"
  ],
  "properties": {
    "buy_contract_for_multiple_accounts": {
      "description": "Either the ID received from a Price Proposal (`proposal` call), or `1` if contract buy parameters are passed in the `parameters` field.",
      "type": "string",
      "pattern": "^(?:[\\w-]{32,128}|1)$"
    },
    "parameters": {
      "description": "[Optional] Used to pass the parameters for contract buy.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "contract_type",
        "currency",
        "symbol"
      ],
      "properties": {
        "amount": {
          "description": "[Optional] Proposed `payout` or `stake` value",
          "type": "number",
          "minimum": 0
        },
        "app_markup_percentage": {
          "description": "[Optional] Markup added to contract prices (as a percentage of contract payout)",
          "type": "number"
        },
        "barrier": {
          "description": "[Optional] Barrier for the contract (or last digit prediction for digit contracts). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers.",
          "type": "string",
          "pattern": "^(?=.{1,20}$)[+-]?\\d+\\.?\\d*$"
        },
        "barrier2": {
          "description": "[Optional] Low barrier for the contract (for contracts with two barriers). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers.",
          "type": "string",
          "pattern": "^(?=.{1,20}$)[+-]?\\d+\\.?\\d*$"
        },
        "basis": {
          "description": "[Optional] Indicate whether amount is 'payout' or 'stake'.",
          "type": "string",
          "enum": [
            "payout",
            "stake"
          ]
        },
        "contract_type": {
          "description": "A valid contract-type",
          "type": "string",
          "enum": [
            "MULTUP",
            "MULTDOWN",
            "UPORDOWN",
            "EXPIRYRANGE",
            "ONETOUCH",
            "CALLE",
            "LBHIGHLOW",
            "ASIAND",
            "EXPIRYRANGEE",
            "DIGITDIFF",
            "DIGITMATCH",
            "DIGITOVER",
            "PUTE",
            "DIGITUNDER",
            "NOTOUCH",
            "CALL",
            "RANGE",
            "LBFLOATPUT",
            "DIGITODD",
            "PUT",
            "ASIANU",
            "LBFLOATCALL",
            "EXPIRYMISSE",
            "EXPIRYMISS",
            "DIGITEVEN",
            "TICKHIGH",
            "TICKLOW",
            "RESETCALL",
            "RESETPUT",
            "CALLSPREAD",
            "PUTSPREAD",
            "RUNHIGH",
            "RUNLOW",
            "VANILLALONGCALL",
            "VANILLALONGPUT",
            "TURBOSLONG",
            "TURBOSSHORT"
          ]
        },
        "currency": {
          "description": "This can only be the account-holder's currency",
          "type": "string",
          "pattern": "^[a-zA-Z0-9]{2,20}$"
        },
        "date_expiry": {
          "description": "[Optional] Epoch value of the expiry time of the contract. You must either specify `date_expiry` or `duration`.",
          "type": "integer",
          "maximum": 9999999999,
          "minimum": 0
        },
        "date_start": {
          "description": "[Optional] For forward-starting contracts, epoch value of the starting time of the contract.",
          "type": "integer",
          "maximum": 9999999999,
          "minimum": 0
        },
        "duration": {
          "description": "[Optional] Duration quantity",
          "type": "integer",
          "maximum": 3600,
          "minimum": 0
        },
        "duration_unit": {
          "description": "[Optional] Duration unit is `s`: seconds, `m`: minutes, `h`: hours, `d`: days, `t`: ticks",
          "type": "string",
          "enum": [
            "d",
            "m",
            "s",
            "h",
            "t"
          ]
        },
        "multiplier": {
          "description": "[Optional] The multiplier for non-binary options. E.g. lookbacks.",
          "type": "number",
          "minimum": 0
        },
        "selected_tick": {
          "description": "[Optional] The tick that is predicted to have the highest/lowest value - for tickhigh and ticklow contracts.",
          "type": "integer"
        },
        "symbol": {
          "description": "Symbol code",
          "type": "string",
          "pattern": "^\\w{2,30}$"
        }
      }
    },
    "price": {
      "description": "Maximum price at which to purchase the contract.",
      "type": "number",
      "minimum": 0
    },
    "tokens": {
      "description": "List of API tokens identifying the accounts for which the contract is bought. Note: If the same token appears multiple times or if multiple tokens designate the same account, the contract is bought multiple times for this account.",
      "type": "array",
      "items": {
        "description": "API token identifying the accounts for which the contract is bought.",
        "type": "string",
        "pattern": "^[\\w\\s-]+$"
      },
      "sensitive": 1
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Buy Contract for Multiple Accounts (response)",
  "description": "A message with transaction results is received",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "buy_contract_for_multiple_accounts": {
      "title": "buy_contract_for_multiple_accounts",
      "description": "Receipt confirmation for the purchase",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "description": "List of results containing transactions and/or errors for the bought contracts.",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "description": "Receipt for one contract",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "buy_price",
                  "contract_id",
                  "longcode",
                  "payout",
                  "purchase_time",
                  "shortcode",
                  "start_time",
                  "token",
                  "transaction_id"
                ],
                "properties": {
                  "buy_price": {
                    "description": "Actual effected purchase price",
                    "type": "number"
                  },
                  "contract_id": {
                    "description": "Internal contract identifier",
                    "type": "integer"
                  },
                  "longcode": {
                    "description": "The description of contract purchased",
                    "type": "string"
                  },
                  "payout": {
                    "description": "Proposed payout value",
                    "type": "number"
                  },
                  "purchase_time": {
                    "description": "Epoch value of the transaction purchase time",
                    "type": "integer"
                  },
                  "shortcode": {
                    "description": "Compact description of the contract purchased",
                    "type": "string"
                  },
                  "start_time": {
                    "description": "Epoch value showing the expected start time of the contract",
                    "type": "integer"
                  },
                  "token": {
                    "description": "The token designating the account",
                    "type": "string",
                    "sensitive": 1
                  },
                  "transaction_id": {
                    "description": "Internal transaction identifier",
                    "type": "integer"
                  }
                }
              },
              {
                "description": "Error message",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "code",
                  "message_to_client",
                  "token"
                ],
                "properties": {
                  "code": {
                    "description": "An error code",
                    "type": "string"
                  },
                  "message_to_client": {
                    "description": "An error message localized according to the websocket",
                    "type": "string"
                  },
                  "token": {
                    "description": "The token designating the account",
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "buy_contract_for_multiple_accounts"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Cancel a Contract (request)

Cancel contract with contract id
Auth Required: trade
{}
{}
cancel

integer
Value should be the contract_id which received from the portfolio call.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Cancel a Contract (response)

A message with transaction results is received
{}
{}
cancel

cancel
Receipt for the transaction
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
cancel
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Cancel a Contract (request)",
  "description": "Cancel contract with contract id",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "trade"
  ],
  "additionalProperties": false,
  "required": [
    "cancel"
  ],
  "properties": {
    "cancel": {
      "description": "Value should be the `contract_id` which received from the `portfolio` call.",
      "type": "integer"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Cancel a Contract (response)",
  "description": "A message with transaction results is received",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "cancel": {
      "title": "cancel",
      "description": "Receipt for the transaction",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "balance_after": {
          "description": "New account balance after completion of the sale",
          "type": "number"
        },
        "contract_id": {
          "description": "Internal contract identifier for the sold contract",
          "type": "integer"
        },
        "reference_id": {
          "description": "Internal transaction identifier for the corresponding buy transaction",
          "type": "integer"
        },
        "sold_for": {
          "description": "Actual effected sale price",
          "type": "number"
        },
        "transaction_id": {
          "description": "Internal transaction identifier for the sale transaction",
          "type": "integer"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "cancel"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Cashier Information (request)

Request the cashier info for the specified type.
Auth Required: payments
{}
{}
cashier

enum
string
deposit
withdraw
default:
deposit
Operation which needs to be requested from cashier
{}
address

string
[Optional] Address for crypto withdrawal. Only applicable for api type.
{}
amount

number
[Optional] Amount for crypto withdrawal. Only applicable for api type.
{}
dry_run

enum
integer
0
1
default:
0
[Optional] If set to 1, only validation is performed. Only applicable for withdraw using crypto provider and api type.
{}
estimated_fee_unique_id

string
example:
ltc-c84a793b-8a87-7999-ce10-9b22f7ceead3
[Optional] The unique_id of the estimated fee received from crypto_estimations call in case the client is willing to pay the returned fee in order to prioritise their withdrawal request.
{}
provider

enum
string
doughflow
crypto
default:
doughflow
[Optional] Cashier provider.
{}
type

enum
string
url
api
default:
url
[Optional] Data is returned from the cashier. The crypto provider only supports api (not url) for crypto accounts.
{}
verification_code

string
^\w{8,128}$
[Optional] Email verification code (received from a verify_email call, which must be done first)
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Cashier Information (response)

Cashier information for the specified type.
{}
{}
cashier

one of
string
object
Possible error codes are:
- ASK_TNC_APPROVAL: API call tnc_approval
- ASK_AUTHENTICATE
- ASK_UK_FUNDS_PROTECTION: API call tnc_approval
- ASK_CURRENCY: API call set_account_currency
- ASK_EMAIL_VERIFY: API call verify_email
- ASK_FIX_DETAILS: API call set_settings
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
cashier
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Cashier Information (request)",
  "description": "Request the cashier info for the specified type.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "payments"
  ],
  "additionalProperties": false,
  "required": [
    "cashier"
  ],
  "properties": {
    "cashier": {
      "description": "Operation which needs to be requested from cashier",
      "type": "string",
      "default": "deposit",
      "enum": [
        "deposit",
        "withdraw"
      ]
    },
    "address": {
      "description": "[Optional] Address for crypto withdrawal. Only applicable for `api` type.",
      "type": "string"
    },
    "amount": {
      "description": "[Optional] Amount for crypto withdrawal. Only applicable for `api` type.",
      "type": "number",
      "minimum": 0
    },
    "dry_run": {
      "description": "[Optional] If set to `1`, only validation is performed. Only applicable for `withdraw` using `crypto` provider and `api` type.",
      "type": "integer",
      "default": 0,
      "enum": [
        0,
        1
      ]
    },
    "estimated_fee_unique_id": {
      "description": "[Optional] The `unique_id` of the estimated fee received from `crypto_estimations` call in case the client is willing to pay the returned fee in order to prioritise their withdrawal request.",
      "type": "string",
      "examples": [
        "ltc-c84a793b-8a87-7999-ce10-9b22f7ceead3"
      ]
    },
    "provider": {
      "description": "[Optional] Cashier provider.",
      "type": "string",
      "default": "doughflow",
      "enum": [
        "doughflow",
        "crypto"
      ]
    },
    "type": {
      "description": "[Optional] Data is returned from the cashier. The `crypto` provider only supports `api` (not `url`) for crypto accounts.",
      "type": "string",
      "default": "url",
      "enum": [
        "url",
        "api"
      ]
    },
    "verification_code": {
      "description": "[Optional] Email verification code (received from a `verify_email` call, which must be done first)",
      "type": "string",
      "pattern": "^\\w{8,128}$"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Cashier Information (response)",
  "description": "Cashier information for the specified type.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "cashier": {
      "title": "cashier",
      "description": "Possible error codes are:\n- `ASK_TNC_APPROVAL`: API call `tnc_approval`\n- `ASK_AUTHENTICATE`\n- `ASK_UK_FUNDS_PROTECTION`: API call `tnc_approval`\n- `ASK_CURRENCY`: API call `set_account_currency`\n- `ASK_EMAIL_VERIFY`: API call `verify_email`\n- `ASK_FIX_DETAILS`: API call `set_settings`",
      "oneOf": [
        {
          "description": "Response for type `url`, It will return url to cashier service.",
          "type": "string"
        },
        {
          "description": "Response for type `api'.",
          "type": "object",
          "required": [
            "action"
          ],
          "properties": {
            "action": {
              "description": "Type of operation, which is requested.",
              "type": "string",
              "enum": [
                "deposit",
                "withdraw"
              ]
            },
            "deposit": {
              "description": "[Optional] Result for `deposit` action.",
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "description": "Address for crypto deposit.",
                  "type": "string"
                }
              }
            },
            "withdraw": {
              "description": "[Optional] Result for `withdraw` action.",
              "oneOf": [
                {
                  "title": "Withdraw operation",
                  "description": "Result for withdraw operation.",
                  "type": "object",
                  "required": [
                    "id",
                    "status_code",
                    "status_message"
                  ],
                  "properties": {
                    "id": {
                      "description": "The unique identifier for the transaction.",
                      "type": "string"
                    },
                    "status_code": {
                      "description": "The status code of the withdrawal.",
                      "type": "string",
                      "enum": [
                        "LOCKED"
                      ]
                    },
                    "status_message": {
                      "description": "The status message of the withdrawal.",
                      "type": "string"
                    }
                  }
                },
                {
                  "title": "Dry-run validation",
                  "description": "Result for `dry_run` validation.",
                  "type": "object",
                  "required": [
                    "dry_run"
                  ],
                  "properties": {
                    "dry_run": {
                      "description": "The `dry_run` was successful.",
                      "type": "integer",
                      "enum": [
                        1
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "cashier"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Confirm Email Through Verification Code (request)

Verifies the email for the user using verification code passed in the request object
{}
{}
confirm_email

constant
integer
1
Must be 1
{}
email_consent

enum
integer
1
0
Boolean value: 1 or 0, indicating whether the client has given consent for marketing emails.
{}
verification_code

string
^\w{8,128}$
Email verification code (received from a verify_email call, which must be done first).
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Confirm Email Through Verification Code (response)

Confirm Email Response
{}
{}
confirm_email

enum
integer
0
1
1 for success (The verification code has been successfully verified)
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
confirm_email
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.





{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Confirm Email Through Verification Code (request)",
  "description": "Verifies the email for the user using verification code passed in the request object",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "confirm_email",
    "email_consent",
    "verification_code"
  ],
  "properties": {
    "confirm_email": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "email_consent": {
      "description": "Boolean value: 1 or 0, indicating whether the client has given consent for marketing emails.",
      "type": "integer",
      "enum": [
        1,
        0
      ]
    },
    "verification_code": {
      "description": "Email verification code (received from a `verify_email` call, which must be done first).",
      "type": "string",
      "pattern": "^\\w{8,128}$",
      "sensitive": 1
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Confirm Email Through Verification Code (response)",
  "description": "Confirm Email Response",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "confirm_email": {
      "title": "confirm_email",
      "description": "1 for success (The verification code has been successfully verified)",
      "type": "integer",
      "enum": [
        0,
        1
      ]
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "confirm_email"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Update Contract (request)

Update a contract condition.
Auth Required: trade
{}
{}
contract_update

constant
integer
1
Must be 1
{}
contract_id

integer
Internal unique contract identifier.
{}
limit_order

object
Specify limit order to update.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Update Contract (response)

Contract update status
{}
{}
contract_update

contract_update
Contains the update status of the request
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
contract_update
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Update Contract (request)",
  "description": "Update a contract condition.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "trade"
  ],
  "additionalProperties": false,
  "required": [
    "contract_update",
    "contract_id",
    "limit_order"
  ],
  "properties": {
    "contract_update": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "contract_id": {
      "description": "Internal unique contract identifier.",
      "type": "integer"
    },
    "limit_order": {
      "description": "Specify limit order to update.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "stop_loss": {
          "description": "New stop loss value for a contract. To cancel, pass `null`.",
          "type": [
            "null",
            "number"
          ]
        },
        "take_profit": {
          "description": "New take profit value for a contract. To cancel, pass `null`.",
          "type": [
            "null",
            "number"
          ]
        }
      }
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Update Contract (response)",
  "description": "Contract update status",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "contract_update": {
      "title": "contract_update",
      "description": "Contains the update status of the request",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "stop_loss": {
          "description": "The target spot price where the contract will be closed automatically at the loss specified by the user.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "display_name": {
              "description": "Localized display name",
              "type": "string"
            },
            "order_amount": {
              "description": "Stop loss amount",
              "type": [
                "null",
                "number"
              ]
            },
            "order_date": {
              "description": "Stop loss order epoch",
              "type": "integer"
            },
            "value": {
              "description": "Stop loss pip-sized barrier value",
              "type": [
                "null",
                "string"
              ]
            }
          }
        },
        "take_profit": {
          "description": "The target spot price where the contract will be closed automatically at the profit specified by the user.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "display_name": {
              "description": "Localized display name",
              "type": "string"
            },
            "order_amount": {
              "description": "Take profit amount",
              "type": [
                "null",
                "number"
              ]
            },
            "order_date": {
              "description": "Take profit order epoch",
              "type": "integer"
            },
            "value": {
              "description": "Take profit pip-sized barrier value",
              "type": [
                "null",
                "string"
              ]
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "contract_update"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Update Contract History (request)

Request for contract update history.
Auth Required: read
{}
{}
contract_update_history

constant
integer
1
Must be 1
{}
contract_id

integer
Internal unique contract identifier.
{}
limit

number
default:
500
[Optional] Maximum number of historical updates to receive.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Update Contract History (response)

Contract update history status
{}
{}
contract_update_history

array
contract_update_history
Contains the historical and the most recent update status of the contract
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
contract_update_history
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Update Contract History (request)",
  "description": "Request for contract update history.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "contract_update_history",
    "contract_id"
  ],
  "properties": {
    "contract_update_history": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "contract_id": {
      "description": "Internal unique contract identifier.",
      "type": "integer"
    },
    "limit": {
      "description": "[Optional] Maximum number of historical updates to receive.",
      "type": "number",
      "default": 500,
      "maximum": 999,
      "minimum": 1
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Update Contract History (response)",
  "description": "Contract update history status",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "contract_update_history": {
      "title": "contract_update_history",
      "description": "Contains the historical and the most recent update status of the contract",
      "type": "array",
      "items": {
        "description": "Contains the changed parameter.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "display_name": {
            "description": "Display name of the changed parameter.",
            "type": "string"
          },
          "order_amount": {
            "description": "The amount.",
            "type": "string"
          },
          "order_date": {
            "description": "The epoch when the changed was done.",
            "type": "integer"
          },
          "order_type": {
            "description": "The contract parameter updated.",
            "type": "string"
          },
          "value": {
            "description": "The pip-sized barrier value.",
            "type": [
              "null",
              "string"
            ]
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "contract_update_history"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Contracts For Symbol (request)

For a given symbol, get the list of currently available contracts, and the latest barrier and duration limits for each contract.
{}
{}
contracts_for

string
^\w{2,30}$
The short symbol name (obtained from active_symbols call).
{}
currency

string
^[a-zA-Z0-9]{2,20}$
default:
USD
[Optional] Currency of the contract's stake and payout (obtained from payout_currencies call).
{}
landing_company

enum
string
iom
malta
maltainvest
svg
virtual
vanuatu
default:
virtual
Deprecated - Replaced by landing_company_short.
{}
landing_company_short

enum
string
iom
malta
maltainvest
svg
virtual
vanuatu
default:
virtual
[Optional] Indicates which landing company to get a list of contracts for. If you are logged in, your account's landing company will override this field. Note that when landing_company_short is set to 'virtual', landing_company will take precendce until the deprecated field is removed from the api.
{}
product_type

constant
string
basic
[Optional] If you specify this field, only contracts tradable through that contract type will be returned.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Contracts For Symbol (response)

Get the list of currently available contracts
{}
{}
contracts_for

contracts_for
List of available contracts. Note: if the user is authenticated, then only contracts allowed under his account will be returned.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
contracts_for
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Contracts For Symbol (request)",
  "description": "For a given symbol, get the list of currently available contracts, and the latest barrier and duration limits for each contract.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "contracts_for"
  ],
  "properties": {
    "contracts_for": {
      "description": "The short symbol name (obtained from `active_symbols` call).",
      "type": "string",
      "pattern": "^\\w{2,30}$"
    },
    "currency": {
      "description": "[Optional] Currency of the contract's stake and payout (obtained from `payout_currencies` call).",
      "type": "string",
      "pattern": "^[a-zA-Z0-9]{2,20}$",
      "default": "USD"
    },
    "landing_company": {
      "description": "Deprecated - Replaced by landing_company_short.",
      "type": "string",
      "default": "virtual",
      "enum": [
        "iom",
        "malta",
        "maltainvest",
        "svg",
        "virtual",
        "vanuatu"
      ]
    },
    "landing_company_short": {
      "description": "[Optional] Indicates which landing company to get a list of contracts for. If you are logged in, your account's landing company will override this field. Note that when landing_company_short is set to 'virtual', landing_company will take precendce until the deprecated field is removed from the api.",
      "type": "string",
      "default": "virtual",
      "enum": [
        "iom",
        "malta",
        "maltainvest",
        "svg",
        "virtual",
        "vanuatu"
      ]
    },
    "product_type": {
      "description": "[Optional] If you specify this field, only contracts tradable through that contract type will be returned.",
      "type": "string",
      "enum": [
        "basic"
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Contracts For Symbol (response)",
  "description": "Get the list of currently available contracts",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "contracts_for": {
      "title": "contracts_for",
      "description": "List of available contracts. Note: if the user is authenticated, then only contracts allowed under his account will be returned.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "available"
      ],
      "properties": {
        "available": {
          "description": "Array of available contracts details",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "barrier_category",
              "barriers",
              "contract_category",
              "contract_category_display",
              "contract_type",
              "exchange_name",
              "expiry_type",
              "market",
              "max_contract_duration",
              "min_contract_duration",
              "sentiment",
              "start_type",
              "submarket",
              "underlying_symbol"
            ],
            "properties": {
              "available_barriers": {
                "description": "Array of available barriers for a predefined trading period",
                "type": "array",
                "minItems": 1
              },
              "barrier": {
                "description": "Barrier Details.",
                "type": [
                  "null",
                  "string"
                ]
              },
              "barrier_category": {
                "description": "Category of barrier.",
                "type": "string",
                "examples": [
                  "american",
                  "asian",
                  "euro_atm",
                  "euro_non_atm"
                ]
              },
              "barrier_choices": {
                "description": "[Only for Vanilla] Barrier Choices",
                "type": "array"
              },
              "barriers": {
                "description": "Number of barriers.",
                "type": "number",
                "examples": [
                  0,
                  1,
                  2
                ]
              },
              "cancellation_range": {
                "description": "Cancellation range",
                "type": "array"
              },
              "contract_category": {
                "description": "Category of contract.",
                "type": "string",
                "examples": [
                  "asian",
                  "callput"
                ]
              },
              "contract_category_display": {
                "description": "Category of the contract.",
                "type": "string",
                "examples": [
                  "Asians",
                  "Up/Down"
                ]
              },
              "contract_display": {
                "description": "Display name for the type of contract.",
                "type": "string",
                "examples": [
                  "Asian Up",
                  "Higher"
                ]
              },
              "contract_type": {
                "description": "Type of contract.",
                "type": "string",
                "examples": [
                  "ASIANU",
                  "CALL"
                ]
              },
              "default_stake": {
                "description": "Default stake for the contract",
                "type": "number"
              },
              "display_number_of_contracts": {
                "description": "[Only for Turbos] Its selected payout per point",
                "type": "number",
                "examples": [
                  0,
                  1,
                  2
                ]
              },
              "duration_choices": {
                "description": "[Only for Snowball] Available contract durations in seconds.",
                "type": "array",
                "items": {
                  "type": "integer",
                  "examples": [
                    300,
                    600,
                    1200
                  ]
                },
                "minItems": 1
              },
              "exchange_name": {
                "description": "Name of exchange",
                "type": "string",
                "examples": [
                  "RANDOM"
                ]
              },
              "expired_barriers": {
                "description": "Array of barriers already expired",
                "type": "array"
              },
              "expiry_type": {
                "description": "Expiry Type.",
                "type": "string",
                "examples": [
                  "daily",
                  "intraday",
                  "tick"
                ]
              },
              "forward_starting_options": {
                "description": "Array of returned forward starting options",
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "blackouts": {
                      "description": "The epoch value for the blackouts of forward starting session.",
                      "type": "array"
                    },
                    "close": {
                      "description": "The epoch value for the closing date of forward starting session.",
                      "type": "string"
                    },
                    "date": {
                      "description": "The epoch value for the date of forward starting session.",
                      "type": "string"
                    },
                    "open": {
                      "description": "The epoch value for the opening date of forward starting session.",
                      "type": "string"
                    }
                  }
                },
                "minItems": 1
              },
              "growth_rate_range": {
                "description": "Growth rate range.",
                "type": "array"
              },
              "high_barrier": {
                "description": "High barrier Details.",
                "type": [
                  "null",
                  "string"
                ]
              },
              "last_digit_range": {
                "description": "Last digit range",
                "type": "array"
              },
              "low_barrier": {
                "description": "Low barrier Details.",
                "type": [
                  "null",
                  "string"
                ]
              },
              "market": {
                "description": "Type of market.",
                "type": "string",
                "examples": [
                  "forex",
                  "indices",
                  "synthetic_index"
                ]
              },
              "max_contract_duration": {
                "description": "Maximum contract duration",
                "type": "string",
                "examples": [
                  "10"
                ]
              },
              "max_stake": {
                "description": "[Only for turbos options] Maximum contract stake",
                "type": [
                  "null",
                  "number"
                ]
              },
              "min_contract_duration": {
                "description": "Minimum contract duration.",
                "type": "string",
                "examples": [
                  "5"
                ]
              },
              "min_stake": {
                "description": "[Only for turbos options] Minimum contract stake",
                "type": [
                  "null",
                  "number"
                ]
              },
              "multiplier_range": {
                "description": "Multiplier range.",
                "type": "array"
              },
              "payout_choices": {
                "description": "[Only for Turbos] Payout Choices",
                "type": "array"
              },
              "payout_limit": {
                "description": "Maximum payout.",
                "type": "number",
                "examples": [
                  10000
                ]
              },
              "sentiment": {
                "description": "Type of sentiment.",
                "type": "string",
                "examples": [
                  "differ",
                  "down",
                  "match",
                  "up"
                ]
              },
              "start_type": {
                "description": "Start Type.",
                "type": "string",
                "examples": [
                  "forward",
                  "spot"
                ]
              },
              "submarket": {
                "description": "Type of submarket.",
                "type": "string",
                "examples": [
                  "major_pairs",
                  "random_index"
                ]
              },
              "trade_risk_profile_choices": {
                "description": "[Only for Snowball] Available risk profile options.",
                "type": "array",
                "items": {
                  "type": "string",
                  "examples": [
                    "low",
                    "medium",
                    "high"
                  ]
                },
                "minItems": 1
              },
              "trading_period": {
                "description": "A hash of predefined trading period",
                "type": "object"
              },
              "underlying_symbol": {
                "description": "Symbol code",
                "type": "string",
                "examples": [
                  "R_50",
                  "frxEURUSD"
                ]
              }
            }
          },
          "minItems": 1
        },
        "close": {
          "description": "Symbol's next market-close time as an epoch value",
          "type": [
            "integer",
            "null"
          ]
        },
        "feed_license": {
          "description": "Indicates the feed license for symbol, for example whether its realtime or delayed",
          "type": "string"
        },
        "hit_count": {
          "description": "Count of contracts available",
          "type": "number"
        },
        "non_available": {
          "description": "Array of non_available contracts details",
          "type": "array"
        },
        "open": {
          "description": "Symbol's next market-open time as an epoch value",
          "type": [
            "integer",
            "null"
          ]
        },
        "spot": {
          "description": "Current spot price for this underlying",
          "type": [
            "null",
            "number"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "contracts_for"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Contracts For Company (request)

Get the list of currently available contracts for a given landing company.
{}
{}
contracts_for_company

constant
integer
1
Must be 1
{}
landing_company

enum
string
iom
malta
maltainvest
svg
virtual
vanuatu
default:
virtual
[Optional] Indicates which landing company to get a list of contracts for. If you are logged in, your account's landing company will override this field.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Contracts For Company (response)

Get the list of currently available contracts for a given landing company.
{}
{}
contracts_for_company

contracts_for_company
List of available contracts for a given landing company.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
contracts_for_company
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Contracts For Company (request)",
  "description": "Get the list of currently available contracts for a given landing company.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "contracts_for_company"
  ],
  "properties": {
    "contracts_for_company": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "landing_company": {
      "description": "[Optional] Indicates which landing company to get a list of contracts for. If you are logged in, your account's landing company will override this field.",
      "type": "string",
      "default": "virtual",
      "enum": [
        "iom",
        "malta",
        "maltainvest",
        "svg",
        "virtual",
        "vanuatu"
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Contracts For Company (response)",
  "description": "Get the list of currently available contracts for a given landing company.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "contracts_for_company": {
      "title": "contracts_for_company",
      "description": "List of available contracts for a given landing company.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "available",
        "hit_count"
      ],
      "properties": {
        "available": {
          "description": "List of available contracts.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "barrier_category",
              "contract_category",
              "contract_category_display",
              "contract_display",
              "contract_type",
              "sentiment"
            ],
            "properties": {
              "barrier_category": {
                "description": "Category of contract barrier.",
                "type": "string",
                "examples": [
                  "american",
                  "asian",
                  "euro_atm",
                  "euro_non_atm"
                ]
              },
              "contract_category": {
                "description": "Category of contract.",
                "type": "string",
                "examples": [
                  "asian",
                  "callput"
                ]
              },
              "contract_category_display": {
                "description": "Display name for the contract category, localized to selected language.",
                "type": "string",
                "examples": [
                  "Asians",
                  "Up/Down"
                ]
              },
              "contract_display": {
                "description": "Display name for the contract, localized to selected language.",
                "type": "string",
                "examples": [
                  "Asian Up",
                  "Higher"
                ]
              },
              "contract_type": {
                "description": "Type of contract.",
                "type": "string",
                "examples": [
                  "ASIANU",
                  "CALL"
                ]
              },
              "default_stake": {
                "description": "Default stake for the contract",
                "type": "number"
              },
              "sentiment": {
                "description": "Type of sentiment.",
                "type": "string",
                "examples": [
                  "differ",
                  "down",
                  "match",
                  "up"
                ]
              }
            }
          },
          "minItems": 1
        },
        "hit_count": {
          "description": "Count of contracts available",
          "type": "number"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "contracts_for_company"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Copy Trading: Start (request)

Start copy trader bets
Auth Required: trade
{}
{}
copy_start

string
^[\w\s-]{15,32}$
API tokens identifying the accounts of trader which will be used to copy trades
{}
assets

one of
string
^\w{4,128}$
array
[Optional] Used to set assets to be copied. E.x ["frxUSDJPY", "R_50"]
{}
max_trade_stake

number
[Optional] Used to set maximum trade stake to be copied.
{}
min_trade_stake

number
[Optional] Used to set minimal trade stake to be copied.
{}
trade_types

one of
string
^\w{3,128}$
array
[Optional] Used to set trade types to be copied. E.x ["CALL", "PUT"]
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Copy Trading: Start (response)

A message with results is received
{}
{}
copy_start

integer
Copy start confirmation. Returns 1 is success.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
copy_start
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Copy Trading: Start (request)",
  "description": "Start copy trader bets",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "trade"
  ],
  "additionalProperties": false,
  "required": [
    "copy_start"
  ],
  "properties": {
    "copy_start": {
      "description": "API tokens identifying the accounts of trader which will be used to copy trades",
      "type": "string",
      "pattern": "^[\\w\\s-]{15,32}$",
      "sensitive": 1
    },
    "assets": {
      "description": "[Optional] Used to set assets to be copied. E.x [\"frxUSDJPY\", \"R_50\"]",
      "oneOf": [
        {
          "type": "string",
          "pattern": "^\\w{4,128}$"
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^\\w{4,128}$"
          }
        }
      ]
    },
    "max_trade_stake": {
      "description": "[Optional] Used to set maximum trade stake to be copied.",
      "type": "number"
    },
    "min_trade_stake": {
      "description": "[Optional] Used to set minimal trade stake to be copied.",
      "type": "number"
    },
    "trade_types": {
      "description": "[Optional] Used to set trade types to be copied. E.x [\"CALL\", \"PUT\"]",
      "oneOf": [
        {
          "type": "string",
          "pattern": "^\\w{3,128}$"
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^\\w{3,128}$"
          }
        }
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Copy Trading: Start (response)",
  "description": "A message with results is received",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "copy_start": {
      "title": "copy_start",
      "description": "Copy start confirmation. Returns 1 is success.",
      "type": "integer"
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "copy_start"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Copy Trading: Stop (request)

Stop copy trader bets
Auth Required: trade
{}
{}
copy_stop

string
^[\w\s-]{15,32}$
API tokens identifying the accounts which needs not to be copied
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Copy Trading: Stop (response)

A message with results is received
{}
{}
copy_stop

integer
Copy stopping confirmation. Returns 1 is success.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
copy_stop
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Copy Trading: Stop (request)",
  "description": "Stop copy trader bets",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "trade"
  ],
  "additionalProperties": false,
  "required": [
    "copy_stop"
  ],
  "properties": {
    "copy_stop": {
      "description": "API tokens identifying the accounts which needs not to be copied",
      "type": "string",
      "pattern": "^[\\w\\s-]{15,32}$",
      "sensitive": 1
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Copy Trading: Stop (response)",
  "description": "A message with results is received",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "copy_stop": {
      "title": "copy_stop",
      "description": "Copy stopping confirmation. Returns 1 is success.",
      "type": "integer"
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "copy_stop"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Copy Trading: List (request)

Retrieves a list of active copiers and/or traders for Copy Trading
Auth Required: admin
{}
{}
copytrading_list

constant
integer
1
Must be 1
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Copy Trading: List (response)

Details of copiers and/or traders for Copy Trading
{}
{}
copytrading_list

copytrading_list
The trading information of copiers or traders.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
copytrading_list
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Copy Trading: List (request)",
  "description": "Retrieves a list of active copiers and/or traders for Copy Trading",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "admin"
  ],
  "additionalProperties": false,
  "required": [
    "copytrading_list"
  ],
  "properties": {
    "copytrading_list": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Copy Trading: List (response)",
  "description": "Details of copiers and/or traders for Copy Trading",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "copytrading_list": {
      "title": "copytrading_list",
      "description": "The trading information of copiers or traders.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "copiers",
        "traders"
      ],
      "properties": {
        "copiers": {
          "description": "List of users who are currently copy trading the authenticated user",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "loginid"
            ],
            "properties": {
              "loginid": {
                "description": "The loginid of the copier's account.",
                "type": "string"
              }
            }
          }
        },
        "traders": {
          "description": "List of traders being followed by the authenticated user",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "assets": {
                "description": "The list of assets to copy the trades of.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "loginid": {
                "description": "The loginid of the trader's account.",
                "type": "string"
              },
              "max_trade_stake": {
                "description": "Maximum trading stake set for the trader.",
                "type": [
                  "null",
                  "number"
                ]
              },
              "min_trade_stake": {
                "description": "Minimum trading stake set for the trader.",
                "type": [
                  "null",
                  "number"
                ]
              },
              "token": {
                "description": "The token provided for the trader.",
                "type": "string",
                "sensitive": 1
              },
              "trade_types": {
                "description": "The type of trades set.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "copytrading_list"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Copy Trading: Statistics (request)

Retrieve performance, trading, risk and copiers statistics of trader.
{}
{}
copytrading_statistics

constant
integer
1
Must be 1
{}
trader_id

string
^[A-Za-z]+[0-9]+$
The ID of the target trader.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Copy Trading: Statistics (response)

The statistics of the trader.
{}
{}
copytrading_statistics

copytrading_statistics
Statistics of the trader
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
copytrading_statistics
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Copy Trading: Statistics (request)",
  "description": "Retrieve performance, trading, risk and copiers statistics of trader.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "copytrading_statistics",
    "trader_id"
  ],
  "properties": {
    "copytrading_statistics": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "trader_id": {
      "description": "The ID of the target trader.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Copy Trading: Statistics (response)",
  "description": "The statistics of the trader.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "copytrading_statistics": {
      "title": "copytrading_statistics",
      "description": "Statistics of the trader",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "active_since",
        "avg_duration",
        "avg_loss",
        "avg_profit",
        "copiers",
        "last_12months_profitable_trades",
        "monthly_profitable_trades",
        "performance_probability",
        "total_trades",
        "trades_breakdown",
        "trades_profitable"
      ],
      "properties": {
        "active_since": {
          "description": "This is the epoch the investor started trading.",
          "type": "integer"
        },
        "avg_duration": {
          "description": "Average seconds of keeping positions open.",
          "type": "integer"
        },
        "avg_loss": {
          "description": "Average loss of trades in percentage.",
          "type": "number"
        },
        "avg_profit": {
          "description": "Average profitable trades in percentage.",
          "type": "number"
        },
        "copiers": {
          "description": "Number of copiers for this trader.",
          "type": "number"
        },
        "last_12months_profitable_trades": {
          "description": "Represents the net change in equity for a 12-month period.",
          "type": "number"
        },
        "monthly_profitable_trades": {
          "description": "Represents the net change in equity per month.",
          "type": "object",
          "minProperties": 0,
          "patternProperties": {
            "^[0-9]{4}\\-[0-9]{2}$": {
              "description": "Monthly profitable trades in percentage.",
              "type": "number"
            }
          }
        },
        "performance_probability": {
          "description": "Trader performance probability.",
          "type": "number"
        },
        "total_trades": {
          "description": "Total number of trades for all time.",
          "type": "integer"
        },
        "trades_breakdown": {
          "description": "Represents the portfolio distribution by markets.",
          "type": "object",
          "minProperties": 0,
          "patternProperties": {
            "^\\w+$": {
              "description": "Number of trades in percentage.",
              "type": "number"
            }
          }
        },
        "trades_profitable": {
          "description": "Number of profit trades in percentage.",
          "type": "number"
        },
        "yearly_profitable_trades": {
          "description": "Represents the net change in equity per year.",
          "type": "object",
          "minProperties": 0,
          "patternProperties": {
            "^[0-9]{4}$": {
              "description": "Yearly profitable trades in percentage.",
              "type": "number"
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "copytrading_statistics"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}




Cryptocurrency configurations (request)

The request for cryptocurrencies configuration.
{}
{}
crypto_config

constant
integer
1
Must be 1
{}
currency_code

string
^[a-zA-Z0-9]{2,20}$
[Optional] Cryptocurrency code. Sending request with currency_code provides crypto config for the sent cryptocurrency code only.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Cryptocurrency configurations (response)

The response will display the configuration details related to cryptocurrencies
{}
{}
crypto_config

crypto_config
Provides cryptocurrencies configuration.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
crypto_config
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Cryptocurrency configurations (request)",
  "description": "The request for cryptocurrencies configuration.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "crypto_config"
  ],
  "properties": {
    "crypto_config": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "currency_code": {
      "description": "[Optional] Cryptocurrency code. Sending request with currency_code provides crypto config for the sent cryptocurrency code only.",
      "type": "string",
      "pattern": "^[a-zA-Z0-9]{2,20}$"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}




{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Cryptocurrency configurations (response)",
  "description": "The response will display the configuration details related to cryptocurrencies",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "crypto_config": {
      "title": "crypto_config",
      "description": "Provides cryptocurrencies configuration.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "currencies_config"
      ],
      "properties": {
        "currencies_config": {
          "description": "Currency configuration including limitiations for each crypto currency.",
          "type": "object",
          "minProperties": 0,
          "patternProperties": {
            "^[a-zA-Z0-9]{2,20}$": {
              "description": "Cryptocurrency code",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "is_priority_withdrawal_enabled": {
                  "description": "Indicates whether Priority Withdrawal is enabled for the cryptocurrency.",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "minimum_deposit": {
                  "description": "Minimum deposit amount in corresponding cryptocurrency value.",
                  "type": "number"
                },
                "minimum_withdrawal": {
                  "description": "Minimum withdrawal for the cryptocurrency in USD.",
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "crypto_config"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Cryptocurrency Estimations (request)

Get the current estimations for cryptocurrencies. E.g. Withdrawal fee.
{}
{}
crypto_estimations

constant
integer
1
Must be 1
{}
currency_code

string
^[a-zA-Z0-9]{2,20}$
Cryptocurrency code for which fee estimation is provided.
{}
subscribe

constant
integer
1
[Optional] If set to 1, will send updates whenever there is an update to crypto estimations.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Cryptocurrency Estimations (response)

Latest cryptocurrency estimations.
{}
{}
crypto_estimations

crypto_estimations
Cryptocurrency estimations. E.g. Withdrawal fee estimations.
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
crypto_estimations
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Cryptocurrency Estimations (request)",
  "description": "Get the current estimations for cryptocurrencies. E.g. Withdrawal fee.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "crypto_estimations",
    "currency_code"
  ],
  "properties": {
    "crypto_estimations": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "currency_code": {
      "description": "Cryptocurrency code for which fee estimation is provided.",
      "type": "string",
      "pattern": "^[a-zA-Z0-9]{2,20}$"
    },
    "subscribe": {
      "description": "[Optional] If set to 1, will send updates whenever there is an update to crypto estimations.",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Cryptocurrency Estimations (response)",
  "description": "Latest cryptocurrency estimations.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "crypto_estimations": {
      "title": "crypto_estimations",
      "description": "Cryptocurrency estimations. E.g. Withdrawal fee estimations.",
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^[a-zA-Z0-9]{2,20}$": {
          "description": "Cryptocurrency code",
          "type": "object",
          "additionalProperties": false,
          "minProperties": 0,
          "properties": {
            "withdrawal_fee": {
              "description": "Estimated fee for crypto withdrawal calculated based on the current network conditions.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "expiry_time": {
                  "description": "Expiry time for the estimated fee in epoch.",
                  "type": "integer",
                  "examples": [
                    1589380800
                  ]
                },
                "unique_id": {
                  "description": "Unique identifier for the estimated fee which allows locking the fee for a client.",
                  "type": "string",
                  "examples": [
                    "c84a793b-8a87-7999-ce10-9b22f7ceead3"
                  ]
                },
                "value": {
                  "description": "Value of current estimated fee.",
                  "type": "number",
                  "examples": 0.0005
                }
              }
            }
          }
        }
      }
    },
    "subscription": {
      "title": "Subscription information",
      "description": "For subscription requests only.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "crypto_estimations"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Document Upload (request)

Request KYC information from client
Auth Required: admin
{}
{}
document_upload

constant
integer
1
Must be 1
{}
document_format

enum
string
PNG
JPG
JPEG
GIF
PDF
Document file format
{}
document_id

string
^[\w\s-]{0,30}$
[Optional] Document ID (required for Passport, Proof of ID and Driver's License)
{}
document_issuing_country

string
^[a-z]{2}$
2-letter country code, mandatory for POI only
{}
document_type

enum
string
passport
national_identity_card
identification_number_document
service_id_card
driving_licence
utility_bill
bankstatement
bank_statement
power_of_attorney
amlglobalcheck
docverification
proofid
driverslicense
proofaddress
other
voter_card
student_card
nimc_slip
birth_certificate
pan_card
tax_photo_id
selfie_with_id
poi_others
insurance_bill
tax_receipt
phone_bill
poa_others
proof_of_ownership
tax_return
employment_contract
brokerage statement
payslip
edd_others
coi
business_poa
article_of_association
memorandum
authorisation_letter
declarations
affidavit
official_letter
rental_agreement
business_documents_others
Document type
{}
expected_checksum

string
^[[:xdigit:]]{32}
The checksum of the file to be uploaded
{}
expiration_date

string
^[0-9]{4}-[0-9]{2}-[0-9]{2}$
[Optional] Document expiration date (required for Passport, Proof of ID and Driver's License)
{}
file_size

integer
Document size (should be less than 10MB)
{}
lifetime_valid

enum
integer
0
1
[Optional] Boolean value that indicates whether this document is lifetime valid (only applies to POI document types, cancels out the expiration_date given if any)
{}
page_type

enum
string
front
back
photo
[Optional] To determine document side
{}
proof_of_ownership

object
[Optional] It contains info about the proof of ownership being uploaded (mandatory for proof_of_ownership document type)
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Document Upload (response)

Receive details of uploaded authentication documents
{}
{}
document_upload

document_upload
Details of the uploaded documents.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
document_upload
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



Document Upload (request)

Request KYC information from client
Auth Required: admin
{}
{}
document_upload

constant
integer
1
Must be 1
"root":{
"description":"Must be `1`"
"type":"integer"
"enum":[
0:1
]
}
{}
document_format

enum
string
PNG
JPG
JPEG
GIF
PDF
Document file format
"root":{
"description":"Document file format"
"type":"string"
"enum":[
0:"PNG"
1:"JPG"
2:"JPEG"
3:"GIF"
4:"PDF"
]
}
{}
document_id

string
^[\w\s-]{0,30}$
[Optional] Document ID (required for Passport, Proof of ID and Driver's License)
"root":{
"description":"[Optional] Document ID (required for Passport, Pro…"
"type":"string"
"pattern":"^[\w\s-]{0,30}$"
}
{}
document_issuing_country

string
^[a-z]{2}$
2-letter country code, mandatory for POI only
"root":{
"description":"2-letter country code, mandatory for POI only"
"type":"string"
"pattern":"^[a-z]{2}$"
}
{}
document_type

enum
string
passport
national_identity_card
identification_number_document
service_id_card
driving_licence
utility_bill
bankstatement
bank_statement
power_of_attorney
amlglobalcheck
docverification
proofid
driverslicense
proofaddress
other
voter_card
student_card
nimc_slip
birth_certificate
pan_card
tax_photo_id
selfie_with_id
poi_others
insurance_bill
tax_receipt
phone_bill
poa_others
proof_of_ownership
tax_return
employment_contract
brokerage statement
payslip
edd_others
coi
business_poa
article_of_association
memorandum
authorisation_letter
declarations
affidavit
official_letter
rental_agreement
business_documents_others
Document type
{}
expected_checksum

string
^[[:xdigit:]]{32}
The checksum of the file to be uploaded
{}
expiration_date

string
^[0-9]{4}-[0-9]{2}-[0-9]{2}$
[Optional] Document expiration date (required for Passport, Proof of ID and Driver's License)
{}
file_size

integer
Document size (should be less than 10MB)
{}
lifetime_valid

enum
integer
0
1
[Optional] Boolean value that indicates whether this document is lifetime valid (only applies to POI document types, cancels out the expiration_date given if any)
{}
page_type

enum
string
front
back
photo
[Optional] To determine document side
{}
proof_of_ownership

object
[Optional] It contains info about the proof of ownership being uploaded (mandatory for proof_of_ownership document type)
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Document Upload (response)

Receive details of uploaded authentication documents
{}
"root":{
"$schema":"http://json-schema.org/draft-04/schema#"
"title":"Document Upload (response)"
"description":"Receive details of uploaded authentication documen…"
"type":"object"
"required":[
0:"echo_req"
1:"msg_type"
]
"properties":{
"document_upload":{
"title":"document_upload"
"description":"Details of the uploaded documents."
"type":"object"
"additionalProperties":false
"required":[
0:"call_type"
1:"upload_id"
]
"properties":{
"call_type":{
"description":"Current call type, add this to your binary payload…"
"type":"number"
}
"checksum":{
"description":"Hex encoded SHA-1 checksum of the file"
"type":"string"
}
"document_issuing_country":{
"description":"2-letter country code"
"type":"string"
"pattern":"^[a-z]{2}$"
}
"size":{
"description":"File size"
"type":"number"
}
"status":{
"description":"Upload status (`success` or `failure`)"
"type":"string"
}
"upload_id":{
"description":"Current upload ID, add this to your binary payload…"
"type":"number"
}
}
}
"echo_req":{
"description":"Echo of the request made."
"type":"object"
}
"msg_type":{
"description":"Action name of the request made."
"type":"string"
"enum":[
0:"document_upload"
]
}
"req_id":{
"description":"Optional field sent in request to map to response,…"
"type":"integer"
}
}
}


Economic Calendar (request)

Specify a currency to receive a list of events related to that specific currency. For example, specifying USD will return a list of USD-related events. If the currency is omitted, you will receive a list for all currencies.
{}
{}
economic_calendar

constant
integer
1
Must be 1
{}
currency

string
^[a-zA-Z0-9]{2,20}$
[Optional] Currency symbol.
{}
end_date

integer
[Optional] End date.
{}
start_date

integer
[Optional] Start date.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Economic Calendar (response)

A list of economic events.
{}
{}
economic_calendar

economic_calendar
Economic calendar.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
economic_calendar
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Economic Calendar (request)",
  "description": "Specify a currency to receive a list of events related to that specific currency. For example, specifying USD will return a list of USD-related events. If the currency is omitted, you will receive a list for all currencies.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "economic_calendar"
  ],
  "properties": {
    "economic_calendar": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "currency": {
      "description": "[Optional] Currency symbol.",
      "type": "string",
      "pattern": "^[a-zA-Z0-9]{2,20}$"
    },
    "end_date": {
      "description": "[Optional] End date.",
      "type": "integer",
      "maximum": 9999999999,
      "minimum": 1
    },
    "start_date": {
      "description": "[Optional] Start date.",
      "type": "integer",
      "maximum": 9999999999,
      "minimum": 1
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Economic Calendar (response)",
  "description": "A list of economic events.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "economic_calendar": {
      "title": "economic_calendar",
      "description": "Economic calendar.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "events": {
          "description": "Array of economic events",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "actual": {
                "description": "Actual value.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "display_value": {
                    "description": "Actual value.",
                    "type": "string"
                  }
                }
              },
              "currency": {
                "description": "Currency symbol.",
                "type": "string"
              },
              "event_name": {
                "description": "Event name.",
                "type": "string"
              },
              "forecast": {
                "description": "Forecasted value.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "display_value": {
                    "description": "Forecasted value.",
                    "type": "string"
                  }
                }
              },
              "impact": {
                "description": "Impact.",
                "type": "integer",
                "maximum": 5,
                "minimum": 1
              },
              "previous": {
                "description": "Previous value.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "display_value": {
                    "description": "Previous value.",
                    "type": "string"
                  }
                }
              },
              "release_date": {
                "description": "Release date.",
                "type": "integer",
                "examples": [
                  1441175849
                ]
              }
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "economic_calendar"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Exchange Rates (request)

Retrieves the exchange rate from a base currency to a target currency supported by the system.
{}
{}
exchange_rates

constant
integer
1
Must be 1
{}
base_currency

string
^[a-zA-Z0-9]{2,20}$
Base currency (can be obtained from payout_currencies call)
{}
include_spread

constant
integer
1
[Optional] 1 - Request for ask and bid rates along with the spot rate. Only available if target_currency is provided.
{}
subscribe

constant
integer
1
[Optional] 1 - to initiate a realtime stream of exchange rates relative to base currency.
{}
target_currency

string
^[a-zA-Z0-9]{2,20}$
[Optional] Target currency for the exchange rate. If subscribe is set, target_currency must be specified as well.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Exchange Rates (response)

The exchange rate values from the specified base currency to the specified target currency supported by the system.
{}
{}
exchange_rates

exchange_rates
Exchange rate values from base to target currency
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
exchange_rates
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Exchange Rates (request)",
  "description": "Retrieves the exchange rate from a base currency to a target currency supported by the system.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "exchange_rates",
    "base_currency"
  ],
  "properties": {
    "exchange_rates": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "base_currency": {
      "description": "Base currency (can be obtained from `payout_currencies` call)",
      "type": "string",
      "pattern": "^[a-zA-Z0-9]{2,20}$"
    },
    "include_spread": {
      "description": "[Optional] 1 - Request for ask and bid rates along with the spot rate. Only available if target_currency is provided.",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "subscribe": {
      "description": "[Optional] 1 - to initiate a realtime stream of exchange rates relative to base currency.",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "target_currency": {
      "description": "[Optional] Target currency for the exchange rate. If subscribe is set, target_currency must be specified as well.",
      "type": "string",
      "pattern": "^[a-zA-Z0-9]{2,20}$"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Exchange Rates (response)",
  "description": "The exchange rate values from the specified base currency to the specified target currency supported by the system.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "exchange_rates": {
      "title": "exchange_rates",
      "description": "Exchange rate values from base to target currency",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base_currency": {
          "description": "Base currency",
          "type": "string",
          "pattern": "^[a-zA-Z0-9]{2,20}$"
        },
        "date": {
          "description": "Date retrieval epoch time represented as an integer number",
          "type": "integer"
        },
        "rates": {
          "description": "Rate of exchanging a unit of base currency into a target currency",
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z0-9]{2,20}$": {
              "description": "The rate of exchanging a unit of the base currency into a target currency (represented by the key)",
              "type": [
                "number",
                "object"
              ],
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "spot_rate"
                  ],
                  "properties": {
                    "ask_rate": {
                      "description": "[Optional] The ask rate of exchanging a unit of the base currency into a target currency",
                      "type": "number"
                    },
                    "bid_rate": {
                      "description": "[Optional] The bid rate of exchanging a unit of the base currency into a target currency",
                      "type": "number"
                    },
                    "spot_rate": {
                      "description": "The spot rate of exchanging a unit of the base currency into a target currency",
                      "type": "number"
                    }
                  }
                },
                {
                  "description": "The rate of exchanging a unit of the base currency into a target currency (represented by the key)",
                  "type": "number"
                }
              ]
            }
          }
        }
      }
    },
    "subscription": {
      "title": "Subscription information",
      "description": "For subscription requests only.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "exchange_rates"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Forget (request)

Immediately cancel the real-time stream of messages with a specific ID.
{}
{}
forget

string
^[\w-]{32,128}$
ID of the real-time stream of messages to cancel.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Forget (response)

The result of forget request made.
{}
{}
forget

enum
integer
0
1
If set to 1, stream exited and stopped. If set to 0, stream did not exist.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
forget
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Forget (request)",
  "description": "Immediately cancel the real-time stream of messages with a specific ID.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "forget"
  ],
  "properties": {
    "forget": {
      "description": "ID of the real-time stream of messages to cancel.",
      "type": "string",
      "pattern": "^[\\w-]{32,128}$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Forget (response)",
  "description": "The result of forget request made.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "forget": {
      "title": "forget",
      "description": "If set to 1, stream exited and stopped. If set to 0, stream did not exist.",
      "type": "integer",
      "enum": [
        0,
        1
      ]
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "forget"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Forget All (request)

Immediately cancel the real-time streams of messages of given type.
{}
{}
forget_all

one of
stream_types
array
Cancel all streams by type. The value can be either a single type e.g. "ticks", or an array of multiple types e.g. ["candles", "ticks"].
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Forget All (response)

The result of forget all request made.
{}
{}
forget_all

array
forget_all
IDs of the cancelled streams
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
forget_all
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Forget All (request)",
  "description": "Immediately cancel the real-time streams of messages of given type.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "forget_all"
  ],
  "properties": {
    "forget_all": {
      "description": "Cancel all streams by type. The value can be either a single type e.g. `\"ticks\"`, or an array of multiple types e.g. `[\"candles\", \"ticks\"]`.",
      "oneOf": [
        {
          "$ref": "#/definitions/stream_types"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stream_types"
          }
        }
      ]
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  },
  "definitions": {
    "stream_types": {
      "description": "Valid stream types that can be used to unsubscribe from.",
      "type": "string",
      "enum": [
        "balance",
        "candles",
        "cashier_payments",
        "p2p_advert",
        "p2p_advertiser",
        "p2p_order",
        "proposal",
        "proposal_open_contract",
        "ticks",
        "transaction",
        "trading_platform_asset_listing",
        "website_status",
        "p2p_settings",
        "crypto_estimations"
      ]
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Forget All (response)",
  "description": "The result of forget all request made.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "forget_all": {
      "title": "forget_all",
      "description": "IDs of the cancelled streams",
      "type": "array"
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "forget_all"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Account Status (request)

Get Account Status
Auth Required: read
{}
{}
get_account_status

constant
integer
1
Must be 1
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Account Status (response)

A message with Account Status
{}
{}
get_account_status

get_account_status
Account status details
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
get_account_status
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Account Status (request)",
  "description": "Get Account Status",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "get_account_status"
  ],
  "properties": {
    "get_account_status": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Account Status (response)",
  "description": "A message with Account Status",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "get_account_status": {
      "title": "get_account_status",
      "description": "Account status details",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "currency_config",
        "p2p_poa_required",
        "p2p_status",
        "prompt_client_to_authenticate",
        "risk_classification",
        "status"
      ],
      "properties": {
        "authentication": {
          "description": "This represents the authentication status of the user and it includes what authentication is needed.",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "needs_verification"
          ],
          "properties": {
            "attempts": {
              "description": "POI attempts made by the client",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "count": {
                  "description": "A number of POI attempts made by the client",
                  "type": "integer"
                },
                "history": {
                  "description": "A list of POI attempts made by the client in chronological descending order",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "country_code": {
                        "description": "2-letter country code used to request the attempt.",
                        "type": "string"
                      },
                      "document_type": {
                        "description": "The document type of the attempt.",
                        "type": "string"
                      },
                      "id": {
                        "description": "The id of the attempt.",
                        "type": "string"
                      },
                      "service": {
                        "description": "The service used to make the verification.",
                        "type": "string"
                      },
                      "status": {
                        "description": "Status of the attempt.",
                        "type": "string",
                        "enum": [
                          "verified",
                          "rejected",
                          "pending",
                          "expired",
                          "none"
                        ]
                      },
                      "timestamp": {
                        "description": "The epoch of the attempt.",
                        "type": "integer"
                      }
                    }
                  }
                },
                "latest": {
                  "description": "The latest POI attempt made by the client",
                  "type": [
                    "null",
                    "object"
                  ]
                }
              }
            },
            "document": {
              "description": "The authentication status for document.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "expiry_date": {
                  "description": "This is the epoch of the document expiry date.",
                  "type": "integer"
                },
                "last_rejected": {
                  "description": "Show the last reported reasons for the rejected poa cases",
                  "type": [
                    "null",
                    "string"
                  ]
                },
                "status": {
                  "description": "This represents the current status of the proof of address document submitted for authentication.",
                  "type": "string",
                  "enum": [
                    "none",
                    "pending",
                    "rejected",
                    "verified",
                    "expired",
                    "suspected"
                  ]
                },
                "verified_jurisdiction": {
                  "description": "This represents the current status of authentication for each mt5 jurisdiction.",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "bvi": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "dml": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "dsl": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "iom": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "labuan": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "malta": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "maltainvest": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "samoa": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "samoa-virtual": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "svg": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "vanuatu": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "virtual": {
                      "description": "This represents whether the client is allowed or not to create an account under this jurisdiction",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    }
                  }
                }
              }
            },
            "identity": {
              "description": "The authentication status for identity.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "expiry_date": {
                  "description": "This is the epoch of the document expiry date.",
                  "type": "integer"
                },
                "services": {
                  "description": "This shows the information about the authentication services implemented",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "idv": {
                      "description": "This shows the information related to IDV supported services",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "expiry_date": {
                          "description": "This is the epoch of the document expiry date.",
                          "type": "integer"
                        },
                        "last_rejected": {
                          "description": "Show the last IDV reported reasons for the rejected cases",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "report_available": {
                          "description": "Indicate if the verification report was returned by the provider",
                          "type": "integer",
                          "enum": [
                            0,
                            1
                          ]
                        },
                        "reported_properties": {
                          "description": "Shows the latest document properties detected and reported by IDVS",
                          "type": "object"
                        },
                        "status": {
                          "description": "This represents the status of the latest IDV check.",
                          "type": "string",
                          "enum": [
                            "none",
                            "pending",
                            "rejected",
                            "verified",
                            "expired"
                          ]
                        },
                        "submissions_left": {
                          "description": "This shows the number of IDV submissions left for the client",
                          "type": "integer"
                        }
                      }
                    },
                    "manual": {
                      "description": "This shows the information related to the manual POI checks",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "status": {
                          "description": "This represents the status of the current manual POI check.",
                          "type": "string",
                          "enum": [
                            "none",
                            "pending",
                            "rejected",
                            "verified",
                            "expired",
                            "suspected"
                          ]
                        }
                      }
                    },
                    "onfido": {
                      "description": "This shows the information related to Onfido supported services",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "country_code": {
                          "description": "3 letter country code for Onfide SDK",
                          "type": "string",
                          "pattern": "^[A-Z]{3}$"
                        },
                        "documents": {
                          "description": "This shows the list of documents types supported by Onfido",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "Driving Licence",
                              "National Identity Card",
                              "Passport"
                            ]
                          }
                        },
                        "documents_supported": {
                          "description": "This shows the list of documents types supported.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "is_country_supported": {
                          "description": "This shows the information if the country is supported by Onfido",
                          "type": "integer",
                          "enum": [
                            1,
                            0
                          ]
                        },
                        "last_rejected": {
                          "description": "Show the last Onfido reported reasons for the rejected cases",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "reported_properties": {
                          "description": "Shows the latest document properties detected and reported by Onfido",
                          "type": "object"
                        },
                        "status": {
                          "description": "This represents the status of the latest Onfido check.",
                          "type": "string",
                          "enum": [
                            "none",
                            "pending",
                            "rejected",
                            "verified",
                            "expired",
                            "suspected"
                          ]
                        },
                        "submissions_left": {
                          "description": "This shows the number of Onfido submissions left for the client",
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "status": {
                  "description": "This represent the current status for proof of identity document submitted for authentication.",
                  "type": "string",
                  "enum": [
                    "none",
                    "pending",
                    "rejected",
                    "verified",
                    "expired",
                    "suspected"
                  ]
                }
              }
            },
            "income": {
              "description": "The authentication status for source of income document.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "expiry_date": {
                  "description": "Epoch of the source of income document expiry date.",
                  "type": "integer"
                },
                "status": {
                  "description": "Current status of the proof of income document submitted for authentication.",
                  "type": "string",
                  "enum": [
                    "none",
                    "pending",
                    "rejected",
                    "verified",
                    "locked"
                  ]
                }
              }
            },
            "needs_verification": {
              "description": "An array containing the list of required authentication.",
              "type": "array",
              "items": {
                "description": "This represents the current type of authentication required, possible values are identity, document, income, and ownership.",
                "type": "string"
              }
            },
            "ownership": {
              "description": "The current state of the proof of ownership.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "requests": {
                  "description": "The list of proof of ownership requests to fullfil",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "creation_time": {
                        "description": "The request timestamp of creation",
                        "type": "string"
                      },
                      "documents_required": {
                        "description": "Number of documents required to be uploaded for proof of ownership",
                        "type": "number"
                      },
                      "id": {
                        "description": "The identifier of the proof of ownership request",
                        "type": "number"
                      },
                      "payment_method": {
                        "description": "The display name of the payment method being requested",
                        "type": "string"
                      }
                    }
                  }
                },
                "status": {
                  "description": "This represents the current status of the proof of ownership",
                  "type": "string",
                  "enum": [
                    "none",
                    "pending",
                    "rejected",
                    "verified"
                  ]
                }
              }
            }
          }
        },
        "cashier_missing_fields": {
          "description": "Contains missing profile fields required for cashier access.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cashier_validation": {
          "description": "If the cashier is unavailble, this array contains one or more error codes for each reason.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "currency_config": {
          "description": "Provides cashier details for client currency.",
          "type": "object",
          "minProperties": 0,
          "patternProperties": {
            "^[a-zA-Z0-9]{2,20}$": {
              "description": "Client currency",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "is_deposit_suspended": {
                  "description": "Deposit is allowed for currency or not",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "is_withdrawal_suspended": {
                  "description": "Withdrawal is allowed for currency or not",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                }
              }
            }
          }
        },
        "p2p_poa_required": {
          "description": "P2P requires proof of address.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "p2p_status": {
          "description": "Current P2P status of client.",
          "type": "string",
          "enum": [
            "none",
            "active",
            "temp_ban",
            "perm_ban"
          ]
        },
        "prompt_client_to_authenticate": {
          "description": "Indicates whether the client should be prompted to authenticate their account.",
          "type": "integer",
          "enum": [
            1,
            0
          ]
        },
        "risk_classification": {
          "description": "Client risk classification: `low`, `standard`, `high`.",
          "type": "string"
        },
        "social_identity_provider": {
          "description": "Social identity provider a user signed up with.",
          "type": "string",
          "enum": [
            "google",
            "facebook",
            "apple"
          ]
        },
        "status": {
          "description": "Account status. Possible status: \n- `address_verified`: client's address is verified by third party services. \n- `allow_document_upload`: client is allowed to upload documents. \n- `age_verification`: client is age-verified. \n- `authenticated`: client is fully authenticated. \n- `cashier_locked`: cashier is locked. \n- `crs_tin_information`: client has updated tax related information. \n- `deposit_locked`: deposit is not allowed. \n- `disabled`: account is disabled. \n- `document_expired`: client's submitted proof-of-identity documents have expired. \n- `document_expiring_soon`: client's submitted proof-of-identity documents are expiring within a month. \n- `dxtrade_password_not_set`: Deriv X password is not set. \n- `financial_assessment_not_complete`: client should complete their financial assessment. \n- `financial_information_not_complete`: client has not completed financial assessment. \n- `financial_risk_approval`: client has accepted financial risk disclosure. \n- `max_turnover_limit_not_set`: client has not set financial limits on their account. Applies to UK and Malta clients. \n- `mt5_password_not_set`: MT5 password is not set. \n- `mt5_withdrawal_locked`: MT5 deposits allowed, but withdrawal is not allowed. \n- `needs_affiliate_coc_approval`: user must approve the Affiliate's Code of Conduct Agreement. \n- `no_trading`: trading is disabled. \n- `no_withdrawal_or_trading`: client cannot trade or withdraw but can deposit. \n- `p2p_blocked_for_pa`: p2p is blocked for the current payment agent client. \n- `pa_withdrawal_explicitly_allowed`: withdrawal through payment agent is allowed. \n- `password_reset_required`: this client must reset their password.  \n- `professional`: this client has opted for a professional account. \n- `professional_requested`: this client has requested for a professional account. \n- `professional_rejected`: this client's request for a professional account has been rejected. \n- `social_signup`: this client is using social signup. \n- `trading_experience_not_complete`: client has not completed the trading experience questionnaire. \n- `ukgc_funds_protection`: client has acknowledged UKGC funds protection notice. \n- `unwelcome`: client cannot deposit or buy contracts, but can withdraw or sell contracts. \n- `withdrawal_locked`: deposits allowed but withdrawals are not allowed. \n- `deposit_attempt`: this prevent a client from changing the account currency after deposit attempt. \n- `poi_name_mismatch`: client POI documents name mismatch. \n- `allow_poa_resubmission`: the client can resubmit POA documents. \n- `allow_poi_resubmission`: the client can resubmit POI documents. \n- `shared_payment_method`: the client has been sharing payment methods. \n- `personal_details_locked`: client is not allowed to edit personal profile details. \n- `transfers_blocked`: it block any transfer between two accounts. \n- `df_deposit_requires_poi`: the DF deposit will be blocked until the client gets age verified. \n- `authenticated_with_idv_photoid`: the client has been fully authenticated by IDV. \n- `idv_revoked`: the client used to be fully authenticated by IDV but it was taken away due to compliance criteria. \n- `mt5_additional_kyc_required`: client tax information, place of birth and account opening reason is missing. \n- `poi_expiring_soon`: the POI documents of the client will get expired soon, allow them to reupload POI documents. \n- `poa_authenticated_with_idv`: the POA is authenticated via IDV. \n- `poa_expiring_soon`: the POA documents of the client will get outdated soon, allow them to reupload POA documents. \n- `tin_manually_approved`: the client's tax_identification_number has been manually approved as client is not applicable for tax_identification_number",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "get_account_status"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Get Financial Assessment (request)

This call gets the financial assessment details. The 'financial assessment' is a questionnaire that clients of certain Landing Companies need to complete, due to regulatory and KYC (know your client) requirements.
Auth Required: read
{}
{}
get_financial_assessment

constant
integer
1
Must be 1
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Get Financial Assessment (response)

This call gets the financial assessment details of client's account.
{}
{}
get_financial_assessment

get_financial_assessment
Client's financial assessment details
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
get_financial_assessment
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Get Financial Assessment (request)",
  "description": "This call gets the financial assessment details. The 'financial assessment' is a questionnaire that clients of certain Landing Companies need to complete, due to regulatory and KYC (know your client) requirements.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "get_financial_assessment"
  ],
  "properties": {
    "get_financial_assessment": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Get Financial Assessment (response)",
  "description": "This call gets the financial assessment details of client's account.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "get_financial_assessment": {
      "title": "get_financial_assessment",
      "description": "Client's financial assessment details",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "account_turnover": {
          "description": "The anticipated account turnover",
          "type": "string"
        },
        "binary_options_trading_experience": {
          "description": "Binary options trading experience",
          "type": "string"
        },
        "binary_options_trading_frequency": {
          "description": "Binary options trading frequency",
          "type": "string"
        },
        "cfd_experience": {
          "description": "How much experience do you have in CFD trading?",
          "type": "string"
        },
        "cfd_frequency": {
          "description": "How many CFD trades have you placed in the past 12 months?",
          "type": "string"
        },
        "cfd_score": {
          "description": "CFD Score",
          "type": "integer"
        },
        "cfd_trading_definition": {
          "description": "In your understanding, CFD trading allows you to:",
          "type": "string"
        },
        "cfd_trading_experience": {
          "description": "CFDs trading experience",
          "type": "string"
        },
        "cfd_trading_frequency": {
          "description": "CFDs trading frequency",
          "type": "string"
        },
        "commodities_trading_experience": {
          "description": "Commodities trading experience",
          "type": "string"
        },
        "commodities_trading_frequency": {
          "description": "Commodities trading frequency",
          "type": "string"
        },
        "education_level": {
          "description": "Level of Education",
          "type": "string"
        },
        "employment_industry": {
          "description": "Industry of Employment",
          "type": "string"
        },
        "employment_status": {
          "description": "Employment Status",
          "type": "string"
        },
        "estimated_worth": {
          "description": "Estimated Net Worth",
          "type": "string"
        },
        "financial_information_score": {
          "description": "Financial Information Score",
          "type": "integer"
        },
        "forex_trading_experience": {
          "description": "Forex trading experience",
          "type": "string"
        },
        "forex_trading_frequency": {
          "description": "Forex trading frequency",
          "type": "string"
        },
        "income_source": {
          "description": "Income Source",
          "type": "string"
        },
        "indices_trading_experience": {
          "description": "Indices trading experience",
          "type": "string"
        },
        "indices_trading_frequency": {
          "description": "Indices trading frequency",
          "type": "string"
        },
        "leverage_impact_trading": {
          "description": "How does leverage affect CFD trading?",
          "type": "string"
        },
        "leverage_trading_high_risk_stop_loss": {
          "description": "Leverage trading is high-risk, so it's a good idea to use risk management features such as stop loss. Stop loss allows you to",
          "type": "string"
        },
        "net_income": {
          "description": "Net Annual Income",
          "type": "string"
        },
        "occupation": {
          "description": "Occupation",
          "type": "string"
        },
        "other_derivatives_trading_experience": {
          "description": "Trading experience in other financial derivatives",
          "type": "string"
        },
        "other_derivatives_trading_frequency": {
          "description": "Trading frequency in other financial derivatives",
          "type": "string"
        },
        "other_instruments_trading_experience": {
          "description": "Trading experience in other financial instruments",
          "type": "string"
        },
        "other_instruments_trading_frequency": {
          "description": "Trading frequency in other financial instruments",
          "type": "string"
        },
        "required_initial_margin": {
          "description": "When would you be required to pay an initial margin?",
          "type": "string"
        },
        "risk_tolerance": {
          "description": "Do you understand that you could potentially lose 100% of the money you use to trade?",
          "type": "string"
        },
        "source_of_experience": {
          "description": "How much knowledge and experience do you have in relation to online trading?",
          "type": "string"
        },
        "source_of_wealth": {
          "description": "Source of wealth",
          "type": "string"
        },
        "stocks_trading_experience": {
          "description": "Stocks trading experience",
          "type": "string"
        },
        "stocks_trading_frequency": {
          "description": "Stocks trading frequency",
          "type": "string"
        },
        "total_score": {
          "description": "Total Score",
          "type": "integer"
        },
        "trading_experience_financial_instruments": {
          "description": "How much experience do you have with other financial instruments?",
          "type": "string"
        },
        "trading_frequency_financial_instruments": {
          "description": "How many trades have you placed with other financial instruments in the past 12 months?",
          "type": "string"
        },
        "trading_score": {
          "description": "Trading Experience Score",
          "type": "integer"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "get_financial_assessment"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Account Limits (request)

Trading and Withdrawal Limits for a given user
Auth Required: read
{}
{}
get_limits

constant
integer
1
Must be 1
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Account Limits (response)

Trading and Withdrawal Limits
{}
{}
get_limits

get_limits
Trading limits of real account user
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
get_limits
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Account Limits (request)",
  "description": "Trading and Withdrawal Limits for a given user",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "get_limits"
  ],
  "properties": {
    "get_limits": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Account Limits (response)",
  "description": "Trading and Withdrawal Limits",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "get_limits": {
      "title": "get_limits",
      "description": "Trading limits of real account user",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "account_balance": {
          "description": "Maximum account cash balance",
          "type": [
            "null",
            "number"
          ]
        },
        "daily_cumulative_amount_transfers": {
          "description": "Cumulative daily transfer limits",
          "type": "object"
        },
        "daily_transfers": {
          "description": "Daily transfers",
          "type": "object"
        },
        "daily_turnover": {
          "description": "Maximum daily turnover",
          "type": "number"
        },
        "lifetime_limit": {
          "description": "Lifetime withdrawal limit",
          "type": "number"
        },
        "lifetime_transfers": {
          "description": "Lifetime transfer limits. Only present when applicable to the current accout.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "crypto_to_crypto": {
              "description": "Lifetime transfer limit for crypto to crypto currencies.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "allowed": {
                  "description": "Total limit in client's currency.",
                  "type": "number"
                },
                "available": {
                  "description": "Remaining limit in client's currency.",
                  "type": "number"
                }
              }
            },
            "crypto_to_fiat": {
              "description": "Lifetime transfer limit for crypto to fiat currencies.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "allowed": {
                  "description": "Total limit in client's currency.",
                  "type": "number"
                },
                "available": {
                  "description": "Remaining limit in client's currency.",
                  "type": "number"
                }
              }
            },
            "fiat_to_crypto": {
              "description": "Lifetime transfer limit for fiat to crypto currencies.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "allowed": {
                  "description": "Total limit in client's currency.",
                  "type": "number"
                },
                "available": {
                  "description": "Remaining limit in client's currency.",
                  "type": "number"
                }
              }
            }
          }
        },
        "market_specific": {
          "description": "Contains limitation information for each market.",
          "type": "object",
          "patternProperties": {
            "^(commodities|forex|indices|synthetic_index)$": {
              "description": "List of limitation profiles for each market",
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "level": {
                    "description": "The group the profile belong to.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The market or submarket display name.",
                    "type": "string"
                  },
                  "payout_limit": {
                    "description": "The limit of payout for the submarket",
                    "type": "number"
                  },
                  "profile_name": {
                    "description": "The limitation profile name.",
                    "type": "string"
                  },
                  "turnover_limit": {
                    "description": "The limit of turnover for the submarket",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "num_of_days": {
          "description": "Number of days for num_of_days_limit withdrawal limit",
          "type": "integer"
        },
        "num_of_days_limit": {
          "description": "Withdrawal limit for num_of_days days",
          "type": "number"
        },
        "open_positions": {
          "description": "Maximum number of open positions",
          "type": "integer"
        },
        "payout": {
          "description": "Maximum aggregate payouts on open positions",
          "type": "number"
        },
        "payout_per_symbol": {
          "description": "Maximum payout for each symbol based on different barrier types.",
          "type": [
            "null",
            "object"
          ],
          "additionalProperties": false,
          "properties": {
            "atm": {
              "description": "Maximum aggregate payouts on open positions per symbol for contracts where barrier is same as entry spot.",
              "type": [
                "null",
                "number"
              ]
            },
            "non_atm": {
              "description": "Maximum aggregate payouts on open positions per symbol for contract where barrier is different from entry spot.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "less_than_seven_days": {
                  "description": "Maximum aggregate payouts on open positions per symbol for contract where barrier is different from entry spot and duration is less than and equal to seven days",
                  "type": "number"
                },
                "more_than_seven_days": {
                  "description": "Maximum aggregate payouts on open positions per symbol for contract where barrier is different from entry spot and duration is more to seven days",
                  "type": "number"
                }
              }
            }
          }
        },
        "payout_per_symbol_and_contract_type": {
          "description": "Maximum aggregate payouts on open positions per symbol and contract type. This limit can be exceeded up to the overall payout limit if there is no prior open position.",
          "type": "number"
        },
        "remainder": {
          "description": "Amount left to reach withdrawal limit",
          "type": "number"
        },
        "withdrawal_for_x_days_monetary": {
          "description": "Total withdrawal for num_of_days days",
          "type": "number"
        },
        "withdrawal_since_inception_monetary": {
          "description": "Total withdrawal since inception",
          "type": "number"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "get_limits"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Get Self-Exclusion (request)

Allows users to exclude themselves from the website for certain periods of time, or to set limits on their trading activities. This facility is a regulatory requirement for certain Landing Companies.
Auth Required: read
{}
{}
get_self_exclusion

constant
integer
1
Must be 1
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Get Self-Exclusion (response)

A message with User Self-Exclusion
{}
{}
get_self_exclusion

get_self_exclusion
List of values set for self exclusion.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
get_self_exclusion
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Get Self-Exclusion (request)",
  "description": "Allows users to exclude themselves from the website for certain periods of time, or to set limits on their trading activities. This facility is a regulatory requirement for certain Landing Companies.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "get_self_exclusion"
  ],
  "properties": {
    "get_self_exclusion": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Get Self-Exclusion (response)",
  "description": "A message with User Self-Exclusion",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "get_self_exclusion": {
      "title": "get_self_exclusion",
      "description": "List of values set for self exclusion.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "exclude_until": {
          "description": "Exclude me from the website (for a minimum of 6 months, up to a maximum of 5 years). Note: uplifting this self-exclusion may require contacting the company.",
          "type": "string"
        },
        "max_30day_deposit": {
          "description": "30-day limit on deposits",
          "type": "number"
        },
        "max_30day_losses": {
          "description": "30-day limit on losses",
          "type": "number"
        },
        "max_30day_turnover": {
          "description": "30-day turnover limit",
          "type": "number"
        },
        "max_7day_deposit": {
          "description": "7-day limit on deposits",
          "type": "number"
        },
        "max_7day_losses": {
          "description": "7-day limit on losses",
          "type": "number"
        },
        "max_7day_turnover": {
          "description": "7-day turnover limit",
          "type": "number"
        },
        "max_balance": {
          "description": "Maximum account cash balance",
          "type": "number"
        },
        "max_deposit": {
          "description": "Daily limit on deposits",
          "type": "number"
        },
        "max_losses": {
          "description": "Daily limit on losses",
          "type": "number"
        },
        "max_open_bets": {
          "description": "Maximum number of open positions",
          "type": "integer"
        },
        "max_turnover": {
          "description": "Daily turnover limit",
          "type": "number"
        },
        "session_duration_limit": {
          "description": "Session duration limit, in minutes",
          "type": "integer"
        },
        "timeout_until": {
          "description": "Exclude me from the website (for up to 6 weeks). The time is in epoch format. Note: unlike `exclude_until`, this self-exclusion will be lifted automatically at the expiry of the timeout period.",
          "type": "integer"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "get_self_exclusion"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Get Account Settings (request)

Get User Settings (email, date of birth, address etc)
Auth Required: read
{}
{}
get_settings

constant
integer
1
Must be 1
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Get Account Settings (response)

A message with User Settings
{}
{}
get_settings

get_settings
User information and settings.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
get_settings
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Get Account Settings (request)",
  "description": "Get User Settings (email, date of birth, address etc)",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "get_settings"
  ],
  "properties": {
    "get_settings": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Get Account Settings (response)",
  "description": "A message with User Settings",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "get_settings": {
      "title": "get_settings",
      "description": "User information and settings.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "account_opening_reason": {
          "description": "Purpose and reason for requesting the account opening. Only applicable for real money account.",
          "type": [
            "null",
            "string"
          ]
        },
        "address_city": {
          "description": "City (note: Only available for users who have at least one real account)",
          "type": "string"
        },
        "address_line_1": {
          "description": "Address line 1 (note: Only available for users who have at least one real account)",
          "type": "string"
        },
        "address_line_2": {
          "description": "Address line 2 (note: Only available for users who have at least one real account)",
          "type": "string"
        },
        "address_postcode": {
          "description": "Post Code (note: Only available for users who have at least one real account)",
          "type": "string"
        },
        "address_state": {
          "description": "State (note: Only available for users who have at least one real account)",
          "type": "string"
        },
        "allow_copiers": {
          "description": "Boolean value 1 or 0, indicating permission to allow others to follow your trades. Note: not applicable for Virtual account. Only allow for real money account.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "citizen": {
          "description": "Country of legal citizenship, 2-letter country code.",
          "type": "string"
        },
        "client_tnc_status": {
          "description": "Latest terms and conditions version accepted by client",
          "type": [
            "null",
            "string"
          ]
        },
        "cooling_off_expiration_date": {
          "description": "Cooldown expiration epoch date when a client fails appropriateness tests",
          "type": [
            "integer",
            "null"
          ]
        },
        "country": {
          "description": "User Country (same as residence field) - deprecated",
          "type": [
            "null",
            "string"
          ]
        },
        "country_code": {
          "description": "2-letter country code ISO standard",
          "type": [
            "null",
            "string"
          ],
          "pattern": "^[a-z]{0,2}$"
        },
        "date_of_birth": {
          "description": "Epoch of user's birthday (note: Only available for users who have at least one real account)",
          "type": [
            "integer",
            "null"
          ]
        },
        "dxtrade_user_exception": {
          "description": "Boolean value 1 or 0, indicating if user email belong to dxtrade exception list.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "email": {
          "description": "User Email",
          "type": "string",
          "sensitive": 1
        },
        "email_consent": {
          "description": "Boolean value 1 or 0, indicating permission to use email address for any contact which may include marketing",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "employment_status": {
          "description": "Employment Status.",
          "type": "string",
          "enum": [
            "Employed",
            "Pensioner",
            "Self-Employed",
            "Student",
            "Unemployed"
          ]
        },
        "fatca_declaration": {
          "description": "Indicates client's self-declaration for FATCA.",
          "type": [
            "integer",
            "null"
          ]
        },
        "feature_flag": {
          "description": "Contains features that are enabled or disabled for this user",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "wallet": {
              "description": "Boolean value 1 or 0 indicating whether his feature this enabled or not",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            }
          }
        },
        "first_name": {
          "description": "First name (note: Only available for users who have at least one real account)",
          "type": "string",
          "sensitive": 1
        },
        "has_secret_answer": {
          "description": "Returns 1 if the client has a secret answer, 0 otherwise.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "immutable_fields": {
          "description": "A list of profile fields which are immutable (read-only unless they are not set yet) due to landing company regulations and the current status of the account.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_authenticated_payment_agent": {
          "description": "Boolean value 1 or 0, indicating whether is payment agent (note: not applicable for virtual money accounts)",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "last_name": {
          "description": "Last name (note: Only available for users who have at least one real account)",
          "type": "string",
          "sensitive": 1
        },
        "non_pep_declaration": {
          "description": "Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates). Note: returned for real accounts only.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "phone": {
          "description": "Telephone (note: Only available for users who have at least one real account)",
          "type": [
            "null",
            "string"
          ],
          "sensitive": 1
        },
        "phone_number_verification": {
          "description": "The status of the Phone Number Verification.",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "verified"
          ],
          "properties": {
            "challenge_attempts_remaining": {
              "description": "Indicates the attempts remaining for /phone_number_challenge",
              "type": "integer"
            },
            "next_attempt": {
              "description": "(Optional) Indicates the timestamp for the next verification attempt",
              "type": "integer"
            },
            "next_email_attempt": {
              "description": "(Optional) Indicates the timestamp for the next email verification attempt",
              "type": "integer"
            },
            "next_verify_attempt": {
              "description": "(Optional) Indicates the timestamp for the next verify attempt",
              "type": "integer"
            },
            "session_timestamp": {
              "description": "(Optional) Indicates the timestamp for the current's session email code expiry",
              "type": "integer"
            },
            "verified": {
              "description": "Indicates the verification status of the client's phone number.",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "verify_attempts_remaining": {
              "description": "Indicates the attempts remaining for /phone_number_verification",
              "type": "integer"
            }
          }
        },
        "place_of_birth": {
          "description": "Place of birth, 2-letter country code.",
          "type": [
            "null",
            "string"
          ]
        },
        "preferred_language": {
          "description": "User's preferred language, ISO standard code of language",
          "type": [
            "null",
            "string"
          ],
          "pattern": "^[A-Z]{0,2}$|^[A-Z]{2}_[A-Z]{2}$"
        },
        "request_professional_status": {
          "description": "Boolean value 1 or 0, indicating if client has requested professional status.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "residence": {
          "description": "User Country",
          "type": [
            "null",
            "string"
          ]
        },
        "salutation": {
          "description": "Salutation (note: Only available for users who have at least one real account)",
          "type": "string"
        },
        "tax_identification_number": {
          "description": "Tax identification number. Only applicable for real money account.",
          "type": [
            "null",
            "string"
          ]
        },
        "tax_residence": {
          "description": "Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account.",
          "type": [
            "null",
            "string"
          ]
        },
        "tin_skipped": {
          "description": "[Optional] Whether the client has skipped the TIN form. Only applicable for real money account.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "tnc_status": {
          "description": "Terms and condition status tells us whether all the accounts of this user has accepted the latest T&C version.",
          "type": "object"
        },
        "tnc_update_notification_start_date": {
          "description": "The start date to inform users within a grace period, with the notification automatically deactivating after the specified duration.",
          "type": [
            "null",
            "string"
          ]
        },
        "trading_hub": {
          "description": "Boolean value 1 or 0, indicating if client has enabled the Trading Hub dashboard",
          "type": "integer"
        },
        "user_hash": {
          "description": "Hash generated using user details to verify whether the user is legitimate for our customer support system.",
          "type": [
            "null",
            "string"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "get_settings"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Identity Verification Add Document (request)

Adds document information such as issuing country, id and type for identity verification processes.
Auth Required: admin
{}
{}
identity_verification_document_add

constant
integer
1
Must be 1
{}
document_additional

string
[Optional] Additional info required by some document types.
{}
document_number

string
The identification number of the document.
{}
document_type

string
The type of the document based on provided issuing_country (can obtained from residence_list call).
{}
issuing_country

string
^[a-z]{2}$
2-letter country code (can obtained from residence_list call).
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Identity Verification Add Document (response)

Adds document information such as issuing country, id and type for identity verification processes.
{}
{}
identity_verification_document_add

constant
integer
1
1 on success
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
identity_verification_document_add
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Identity Verification Add Document (request)",
  "description": "Adds document information such as issuing country, id and type for identity verification processes.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "admin"
  ],
  "additionalProperties": false,
  "required": [
    "identity_verification_document_add",
    "document_number",
    "document_type",
    "issuing_country"
  ],
  "properties": {
    "identity_verification_document_add": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "document_additional": {
      "description": "[Optional] Additional info required by some document types.",
      "type": "string"
    },
    "document_number": {
      "description": "The identification number of the document.",
      "type": "string"
    },
    "document_type": {
      "description": "The type of the document based on provided `issuing_country` (can obtained from `residence_list` call).",
      "type": "string"
    },
    "issuing_country": {
      "description": "2-letter country code (can obtained from `residence_list` call).",
      "type": "string",
      "pattern": "^[a-z]{2}$"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Identity Verification Add Document (response)",
  "description": "Adds document information such as issuing country, id and type for identity verification processes.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "identity_verification_document_add": {
      "title": "identity_verification_document_add",
      "description": "1 on success",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "identity_verification_document_add"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


KYC Authentication Status (request)

Get KYC Authentication Status
Auth Required: read
{}
{}
kyc_auth_status

constant
integer
1
Must be 1
{}
country

string
^[a-z]{2}$
The country for which service availability is being verified, 2-letter country code
{}
landing_companies

array
string
Indicates which landing companies to get the KYC authentication status for.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
KYC Authentication Status (response)

A message with KYC Authentication Status.
{}
{}
kyc_auth_status

one of
object
object
Proof of Identity (POI) and Proof of Address (POA) authentication status details.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
kyc_auth_status
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.




{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "KYC Authentication Status (request)",
  "description": "Get KYC Authentication Status",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "kyc_auth_status"
  ],
  "properties": {
    "kyc_auth_status": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "country": {
      "description": "The country for which service availability is being verified, 2-letter country code",
      "type": "string",
      "pattern": "^[a-z]{2}$"
    },
    "landing_companies": {
      "description": "Indicates which landing companies to get the KYC authentication status for.",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "iom",
          "malta",
          "maltainvest",
          "svg",
          "virtual",
          "vanuatu",
          "labuan",
          "samoa",
          "samoa-virtual",
          "bvi",
          "dsl"
        ]
      }
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "KYC Authentication Status (response)",
  "description": "A message with KYC Authentication Status.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "kyc_auth_status": {
      "title": "kyc_auth_status",
      "description": "Proof of Identity (POI) and Proof of Address (POA) authentication status details.",
      "type": "object",
      "oneOf": [
        {
          "description": "Proof of Identity (POI) and Proof of Address (POA) authentication status details.",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "address",
            "identity",
            "risk_classification"
          ],
          "properties": {
            "address": {
              "description": "POA authentication status details.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "last_rejected": {
                  "description": "Details on the rejected POA attempt.",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "document_type": {
                      "description": "Document type of the rejected POA attempt.",
                      "type": [
                        "null",
                        "string"
                      ]
                    },
                    "rejected_reasons": {
                      "description": "Reason(s) for the rejected POA attempt.",
                      "type": [
                        "null",
                        "string"
                      ]
                    }
                  }
                },
                "status": {
                  "description": "Current POA status.",
                  "type": "string",
                  "enum": [
                    "none",
                    "pending",
                    "rejected",
                    "verified",
                    "expired"
                  ]
                },
                "supported_documents": {
                  "description": "Supported documents per document_type.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "identity": {
              "description": "POI authentication status details.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "available_services": {
                  "description": "Available services for the next POI attempt.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "last_rejected": {
                  "description": "Details on the rejected POI attempt.",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "document_type": {
                      "description": "Document type of the rejected POI attempt (IDV only).",
                      "type": [
                        "null",
                        "string"
                      ]
                    },
                    "rejected_reasons": {
                      "description": "Reason(s) for the rejected POI attempt.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "report_available": {
                      "description": "Indicate if the verification report was returned by the provider (IDV only).",
                      "type": "integer",
                      "enum": [
                        0,
                        1
                      ]
                    }
                  }
                },
                "service": {
                  "description": "Service used for the current POI status.",
                  "type": "string",
                  "enum": [
                    "none",
                    "idv",
                    "onfido",
                    "manual"
                  ]
                },
                "status": {
                  "description": "Current POI status.",
                  "type": "string",
                  "enum": [
                    "none",
                    "pending",
                    "rejected",
                    "verified",
                    "expired",
                    "suspected"
                  ]
                },
                "supported_documents": {
                  "description": "Supported documents.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "additional": {
                        "description": "Additional information required by the document type.",
                        "type": "object",
                        "properties": {
                          "display_name": {
                            "description": "Additional display name.",
                            "type": "string"
                          },
                          "document_type": {
                            "description": "Additional document type.",
                            "type": "string"
                          },
                          "example_format": {
                            "description": "Additional example format.",
                            "type": "string"
                          },
                          "format": {
                            "description": "Additional document format.",
                            "type": "string"
                          },
                          "sides": {
                            "description": "Additional document sides.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "available_services": {
                        "description": "Services that support this document type and the specific name expected by the service.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "document_type",
                            "service"
                          ],
                          "properties": {
                            "document_type": {
                              "description": "The specific document type name expected by the service.",
                              "type": "string"
                            },
                            "service": {
                              "description": "The name of the service supporting this document type.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "display_name": {
                        "description": "Display name of the document type.",
                        "type": "string"
                      },
                      "document_type": {
                        "description": "The document type.",
                        "type": "string"
                      },
                      "example_format": {
                        "description": "Example format.",
                        "type": "string"
                      },
                      "format": {
                        "description": "Document format.",
                        "type": "string"
                      },
                      "has_visual_sample": {
                        "description": "A flag to indicate if the document has a visual sample.",
                        "type": "boolean"
                      },
                      "lifetime_valid": {
                        "description": "Flag to indicate if the document expires or not. Documents that expire have an expiration date",
                        "type": "boolean"
                      },
                      "sides": {
                        "description": "Document sides.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "risk_classification": {
              "description": "Risk classification of the client.",
              "type": "string",
              "enum": [
                "low",
                "standard",
                "high"
              ]
            }
          }
        },
        {
          "description": "Proof of Identity (POI) and Proof of Address (POA) authentication status details per Landing Company.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "address",
              "identity",
              "risk_classification"
            ],
            "properties": {
              "address": {
                "description": "POA authentication status details.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "last_rejected": {
                    "description": "Details on the rejected POA attempt.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "document_type": {
                        "description": "Document type of the rejected POA attempt.",
                        "type": [
                          "null",
                          "string"
                        ]
                      },
                      "rejected_reasons": {
                        "description": "Reason(s) for the rejected POA attempt.",
                        "type": [
                          "null",
                          "string"
                        ]
                      }
                    }
                  },
                  "status": {
                    "description": "Current POA status.",
                    "type": "string",
                    "enum": [
                      "none",
                      "pending",
                      "rejected",
                      "verified",
                      "expired"
                    ]
                  },
                  "supported_documents": {
                    "description": "Supported documents per document_type.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "identity": {
                "description": "POI authentication status details.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "available_services": {
                    "description": "Available services for the next POI attempt.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "last_rejected": {
                    "description": "Details on the rejected POI attempt.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "document_type": {
                        "description": "Document type of the rejected POI attempt (IDV only).",
                        "type": [
                          "null",
                          "string"
                        ]
                      },
                      "rejected_reasons": {
                        "description": "Reason(s) for the rejected POI attempt.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "report_available": {
                        "description": "Indicate if the verification report was returned by the provider (IDV only).",
                        "type": "integer",
                        "enum": [
                          0,
                          1
                        ]
                      }
                    }
                  },
                  "service": {
                    "description": "Service used for the current POI status.",
                    "type": "string",
                    "enum": [
                      "none",
                      "idv",
                      "onfido",
                      "manual"
                    ]
                  },
                  "status": {
                    "description": "Current POI status.",
                    "type": "string",
                    "enum": [
                      "none",
                      "pending",
                      "rejected",
                      "verified",
                      "expired",
                      "suspected"
                    ]
                  },
                  "supported_documents": {
                    "description": "Supported documents.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "additional": {
                          "description": "Additional information required by the document type.",
                          "type": "object",
                          "properties": {
                            "display_name": {
                              "description": "Additional display name.",
                              "type": "string"
                            },
                            "document_type": {
                              "description": "Additional document type.",
                              "type": "string"
                            },
                            "example_format": {
                              "description": "Additional example format.",
                              "type": "string"
                            },
                            "format": {
                              "description": "Additional document format.",
                              "type": "string"
                            },
                            "sides": {
                              "description": "Additional document sides.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "available_services": {
                          "description": "Services that support this document type and the specific name expected by the service.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "document_type",
                              "service"
                            ],
                            "properties": {
                              "document_type": {
                                "description": "The specific document type name expected by the service.",
                                "type": "string"
                              },
                              "service": {
                                "description": "The name of the service supporting this document type.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "display_name": {
                          "description": "Display name of the document type.",
                          "type": "string"
                        },
                        "document_type": {
                          "description": "The document type.",
                          "type": "string"
                        },
                        "example_format": {
                          "description": "Example format.",
                          "type": "string"
                        },
                        "format": {
                          "description": "Document format.",
                          "type": "string"
                        },
                        "has_visual_sample": {
                          "description": "A flag to indicate if the document has a visual sample.",
                          "type": "boolean"
                        },
                        "lifetime_valid": {
                          "description": "Flag to indicate if the document expires or not. Documents that expire have an expiration date",
                          "type": "boolean"
                        },
                        "sides": {
                          "description": "Document sides.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "risk_classification": {
                "description": "Risk classification of the client.",
                "type": "string",
                "enum": [
                  "low",
                  "standard",
                  "high"
                ]
              }
            }
          },
          "propertyNames": {
            "type": "string"
          }
        }
      ]
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "kyc_auth_status"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Landing Company (request)

The company has a number of licensed subsidiaries in various jurisdictions, which are called Landing Companies. This call will return the appropriate Landing Company for clients of a given country. The landing company may differ for derived contracts (Synthetic Indices) and Financial contracts (Forex, Stock Indices, Commodities).
{}
{}
landing_company

string
^\w\w$
Client's 2-letter country code (obtained from residence_list call).
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Landing Company (response)

Returns the Landing Company for clients of a given country.
{}
{}
landing_company

landing_company
Landing Company
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
landing_company
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Landing Company (request)",
  "description": "The company has a number of licensed subsidiaries in various jurisdictions, which are called Landing Companies. This call will return the appropriate Landing Company for clients of a given country. The landing company may differ for derived contracts (Synthetic Indices) and Financial contracts (Forex, Stock Indices, Commodities).",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "landing_company"
  ],
  "properties": {
    "landing_company": {
      "title": "Landing Company",
      "description": "Client's 2-letter country code (obtained from `residence_list` call).",
      "type": "string",
      "pattern": "^\\w\\w$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Landing Company (response)",
  "description": "Returns the Landing Company for clients of a given country.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "landing_company": {
      "title": "landing_company",
      "description": "Landing Company",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "address_parseable": {
          "description": "Flag to indicate if address parseable or not",
          "type": "integer",
          "enum": [
            1,
            0
          ]
        },
        "all_company": {
          "description": "Config for all account types (Synthetic Indices and Financials).",
          "type": "string",
          "enum": [
            "svg",
            "none"
          ]
        },
        "config": {
          "description": "Config structure with document types ,taxRequired ,tin format details.",
          "type": "object"
        },
        "ctrader": {
          "description": "Available CTrader accounts.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "all": {
              "description": "CTrader all account types (Synthetic Indices and Financials).",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "standard": {
                  "description": "For standard client",
                  "type": "string",
                  "enum": [
                    "svg",
                    "none"
                  ],
                  "additionalProperties": false
                }
              }
            }
          }
        },
        "dxtrade_all_company": {
          "description": "Available Deriv X all account types (Synthetic Indices and Financials).",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "standard": {
              "description": "Landing Company details.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "address": {
                  "description": "Landing Company address",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "changeable_fields": {
                  "description": "Special conditions for changing sensitive fields",
                  "type": "object"
                },
                "country": {
                  "description": "Landing Company country of incorporation",
                  "type": "string"
                },
                "currency_config": {
                  "title": "Currency Config Structure",
                  "description": "The configuration of each currency.",
                  "type": "object"
                },
                "has_reality_check": {
                  "description": "Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "legal_allowed_contract_categories": {
                  "description": "Allowed contract types",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_allowed_currencies": {
                  "description": "Allowable currencies",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_allowed_markets": {
                  "description": "Allowable markets",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_default_currency": {
                  "description": "Default account currency",
                  "type": "string"
                },
                "name": {
                  "description": "Landing Company legal name",
                  "type": "string"
                },
                "requirements": {
                  "description": "Legal requirements for the Landing Company",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "after_first_deposit": {
                      "description": "After first deposit requirements",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "financial_assessment": {
                          "description": "Financial assessment requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "financial_information",
                              "trading_experience"
                            ]
                          }
                        }
                      }
                    },
                    "compliance": {
                      "description": "Compliance requirements",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "mt5": {
                          "description": "Compliance MT5 requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "expiration_check",
                              "fully_authenticated"
                            ]
                          }
                        },
                        "tax_information": {
                          "description": "Compliance tax information requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "tax_identification_number",
                              "tax_residence"
                            ]
                          }
                        }
                      }
                    },
                    "signup": {
                      "description": "Sign up requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "first_name",
                          "residence",
                          "salutation"
                        ]
                      }
                    },
                    "withdrawal": {
                      "description": "Withdrawal requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "address_city",
                          "address_line_1"
                        ]
                      }
                    }
                  }
                },
                "shortcode": {
                  "description": "Landing Company short code",
                  "type": "string"
                },
                "support_professional_client": {
                  "description": "Flag that indicates whether the landing company supports professional accounts or not",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "tin_not_mandatory": {
                  "description": "Flag that indicates whether tax identifier number is not mandatory for the current country and landing company.",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                }
              }
            }
          }
        },
        "dxtrade_financial_company": {
          "description": "Available Deriv X financial account types (all except Synthetic Indices).",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "standard": {
              "description": "Landing Company details.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "address": {
                  "description": "Landing Company address",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "changeable_fields": {
                  "description": "Special conditions for changing sensitive fields",
                  "type": "object"
                },
                "country": {
                  "description": "Landing Company country of incorporation",
                  "type": "string"
                },
                "currency_config": {
                  "title": "Currency Config Structure",
                  "description": "The configuration of each currency.",
                  "type": "object"
                },
                "has_reality_check": {
                  "description": "Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "legal_allowed_contract_categories": {
                  "description": "Allowed contract types",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_allowed_currencies": {
                  "description": "Allowable currencies",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_allowed_markets": {
                  "description": "Allowable markets",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_default_currency": {
                  "description": "Default account currency",
                  "type": "string"
                },
                "name": {
                  "description": "Landing Company legal name",
                  "type": "string"
                },
                "requirements": {
                  "description": "Legal requirements for the Landing Company",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "after_first_deposit": {
                      "description": "After first deposit requirements",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "financial_assessment": {
                          "description": "Financial assessment requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "financial_information",
                              "trading_experience"
                            ]
                          }
                        }
                      }
                    },
                    "compliance": {
                      "description": "Compliance requirements",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "mt5": {
                          "description": "Compliance MT5 requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "expiration_check",
                              "fully_authenticated"
                            ]
                          }
                        },
                        "tax_information": {
                          "description": "Compliance tax information requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "tax_identification_number",
                              "tax_residence"
                            ]
                          }
                        }
                      }
                    },
                    "signup": {
                      "description": "Sign up requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "first_name",
                          "residence",
                          "salutation"
                        ]
                      }
                    },
                    "withdrawal": {
                      "description": "Withdrawal requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "address_city",
                          "address_line_1"
                        ]
                      }
                    }
                  }
                },
                "shortcode": {
                  "description": "Landing Company short code",
                  "type": "string"
                },
                "support_professional_client": {
                  "description": "Flag that indicates whether the landing company supports professional accounts or not",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "tin_not_mandatory": {
                  "description": "Flag that indicates whether tax identifier number is not mandatory for the current country and landing company.",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                }
              }
            }
          }
        },
        "dxtrade_gaming_company": {
          "description": "Available Deriv X derived account types (Synthetic Indices).",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "standard": {
              "description": "Landing Company details.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "address": {
                  "description": "Landing Company address",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "changeable_fields": {
                  "description": "Special conditions for changing sensitive fields",
                  "type": "object"
                },
                "country": {
                  "description": "Landing Company country of incorporation",
                  "type": "string"
                },
                "currency_config": {
                  "title": "Currency Config Structure",
                  "description": "The configuration of each currency.",
                  "type": "object"
                },
                "has_reality_check": {
                  "description": "Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "legal_allowed_contract_categories": {
                  "description": "Allowed contract types",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_allowed_currencies": {
                  "description": "Allowable currencies",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_allowed_markets": {
                  "description": "Allowable markets",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_default_currency": {
                  "description": "Default account currency",
                  "type": "string"
                },
                "name": {
                  "description": "Landing Company legal name",
                  "type": "string"
                },
                "requirements": {
                  "description": "Legal requirements for the Landing Company",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "after_first_deposit": {
                      "description": "After first deposit requirements",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "financial_assessment": {
                          "description": "Financial assessment requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "financial_information",
                              "trading_experience"
                            ]
                          }
                        }
                      }
                    },
                    "compliance": {
                      "description": "Compliance requirements",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "mt5": {
                          "description": "Compliance MT5 requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "expiration_check",
                              "fully_authenticated"
                            ]
                          }
                        },
                        "tax_information": {
                          "description": "Compliance tax information requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "tax_identification_number",
                              "tax_residence"
                            ]
                          }
                        }
                      }
                    },
                    "signup": {
                      "description": "Sign up requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "first_name",
                          "residence",
                          "salutation"
                        ]
                      }
                    },
                    "withdrawal": {
                      "description": "Withdrawal requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "address_city",
                          "address_line_1"
                        ]
                      }
                    }
                  }
                },
                "shortcode": {
                  "description": "Landing Company short code",
                  "type": "string"
                },
                "support_professional_client": {
                  "description": "Flag that indicates whether the landing company supports professional accounts or not",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "tin_not_mandatory": {
                  "description": "Flag that indicates whether tax identifier number is not mandatory for the current country and landing company.",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                }
              }
            }
          }
        },
        "financial_company": {
          "description": "Landing Company for financial contracts (all except Synthetic Indices)",
          "type": [
            "null",
            "object"
          ],
          "additionalProperties": false,
          "properties": {
            "address": {
              "description": "Landing Company address",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            },
            "changeable_fields": {
              "description": "Special conditions for changing sensitive fields",
              "type": "object"
            },
            "country": {
              "description": "Landing Company country of incorporation",
              "type": "string"
            },
            "currency_config": {
              "title": "Currency Config Structure",
              "description": "The configuration of each currency.",
              "type": "object"
            },
            "has_reality_check": {
              "description": "Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.",
              "type": "integer",
              "enum": [
                1,
                0
              ]
            },
            "legal_allowed_contract_categories": {
              "description": "Allowed contract types for this Landing Company",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "legal_allowed_currencies": {
              "description": "Allowed account currencies for this Landing Company",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9]{2,20}$"
              }
            },
            "legal_allowed_markets": {
              "description": "Allowed markets for this Landing Company",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "legal_default_currency": {
              "description": "Default account currency",
              "type": "string",
              "pattern": "^[a-zA-Z0-9]{2,20}$"
            },
            "name": {
              "description": "Landing Company legal name",
              "type": "string"
            },
            "requirements": {
              "description": "Legal requirements for the Landing Company",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "after_first_deposit": {
                  "description": "After first deposit requirements",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "financial_assessment": {
                      "description": "Financial assessment requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "financial_information",
                          "trading_experience"
                        ]
                      }
                    }
                  }
                },
                "compliance": {
                  "description": "Compliance requirements",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "mt5": {
                      "description": "Compliance MT5 requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "expiration_check",
                          "fully_authenticated"
                        ]
                      }
                    },
                    "tax_information": {
                      "description": "Compliance tax information requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "tax_identification_number",
                          "tax_residence"
                        ]
                      }
                    }
                  }
                },
                "signup": {
                  "description": "Sign up requirements",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "examples": [
                      "first_name",
                      "residence",
                      "salutation"
                    ]
                  }
                },
                "withdrawal": {
                  "description": "Withdrawal requirements",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "examples": [
                      "address_city",
                      "address_line_1"
                    ]
                  }
                }
              }
            },
            "shortcode": {
              "description": "Landing Company short code",
              "type": "string"
            },
            "support_professional_client": {
              "description": "Flag that indicates whether the landing company supports professional accounts or not",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "tin_not_mandatory": {
              "description": "Flag that indicates whether tax identifier number is not mandatory for the current country and landing company.",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            }
          }
        },
        "forbidden_postcode_pattern": {
          "description": "Forbidden postcode pattern",
          "type": "string"
        },
        "gaming_company": {
          "description": "Landing Company for derived contracts (Synthetic Indices)",
          "type": [
            "null",
            "object"
          ],
          "additionalProperties": false,
          "properties": {
            "address": {
              "description": "Landing Company address",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            },
            "changeable_fields": {
              "description": "Special conditions for changing sensitive fields",
              "type": "object"
            },
            "country": {
              "description": "Landing Company country of incorporation",
              "type": "string"
            },
            "currency_config": {
              "title": "Currency Config Structure",
              "description": "The configuration of each currency.",
              "type": "object"
            },
            "has_reality_check": {
              "description": "Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "legal_allowed_contract_categories": {
              "description": "Allowed contract types",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "legal_allowed_currencies": {
              "description": "Allowable currencies",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "legal_allowed_markets": {
              "description": "Allowable markets",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "legal_default_currency": {
              "description": "Default account currency",
              "type": "string"
            },
            "name": {
              "description": "Landing Company legal name",
              "type": "string"
            },
            "requirements": {
              "description": "Legal requirements for the Landing Company",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "after_first_deposit": {
                  "description": "After first deposit requirements",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "financial_assessment": {
                      "description": "Financial assessment requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "financial_information",
                          "trading_experience"
                        ]
                      }
                    }
                  }
                },
                "compliance": {
                  "description": "Compliance requirements",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "mt5": {
                      "description": "Compliance MT5 requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "expiration_check",
                          "fully_authenticated"
                        ]
                      }
                    },
                    "tax_information": {
                      "description": "Compliance tax information requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "tax_identification_number",
                          "tax_residence"
                        ]
                      }
                    }
                  }
                },
                "signup": {
                  "description": "Sign up requirements",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "examples": [
                      "first_name",
                      "residence",
                      "salutation"
                    ]
                  }
                },
                "withdrawal": {
                  "description": "Withdrawal requirements",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "examples": [
                      "address_city",
                      "address_line_1"
                    ]
                  }
                }
              }
            },
            "shortcode": {
              "description": "Landing Company short code",
              "type": "string"
            },
            "support_professional_client": {
              "description": "Flag that indicates whether the landing company supports professional accounts or not",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "tin_not_mandatory": {
              "description": "Flag that indicates whether tax identifier number is not mandatory for the current country and landing company.",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            }
          }
        },
        "id": {
          "description": "Country code",
          "type": "string"
        },
        "is_idv_supported": {
          "description": "Flag to indicate if idv is supported or not",
          "type": "integer",
          "enum": [
            1,
            0
          ]
        },
        "lc_to_open_mf_account": {
          "description": "Open mf account lc details.",
          "type": "string"
        },
        "minimum_age": {
          "description": "Minimum age",
          "type": "integer"
        },
        "mt5_age_verification": {
          "description": "Flag to indicate if mt5 age verification detail.",
          "type": "integer",
          "enum": [
            1,
            0
          ]
        },
        "mt_all_company": {
          "description": "Landing Company for MT5 standard combined all Synthetic and financial, currently has Financial as subtype.",
          "type": [
            "null",
            "object"
          ],
          "additionalProperties": false,
          "properties": {
            "swap_free": {
              "$ref": "#/$defs/landingCompanyDetails",
              "description": "Landing Company for MT5 combined all Synthetic and financial"
            },
            "zero_spread": {
              "$ref": "#/$defs/landingCompanyDetails",
              "description": "Contain details for landing company for zero_spread sub account type."
            }
          }
        },
        "mt_financial_company": {
          "description": "Landing Company for MT5 financial contracts (all except Synthetic Indices), currently divided into Financial STP, Financial (standard) as subtypes.",
          "type": [
            "null",
            "object"
          ],
          "additionalProperties": false,
          "properties": {
            "financial": {
              "$ref": "#/$defs/landingCompanyDetails",
              "description": "Contain details for landing company for financial subtype. The Financial account is suitable for a wide range of traders, both new and experienced. It gives you mid-range leverage and variable spreads that give you a great deal of flexibility for whatever position you wish to take in the market."
            },
            "financial_stp": {
              "$ref": "#/$defs/landingCompanyDetails",
              "description": "Contain details for landing company for Financial STP subtype. The Financial STP account provides you with tight spreads, higher ticket size and offers a variety of FX pairs from majors to exotics. It is a straight through processing (STP) account with direct access to FX liquidity from various providers."
            },
            "gold": {
              "$ref": "#/$defs/landingCompanyDetails",
              "description": "Contain details for landing company for gold sub account type."
            }
          }
        },
        "mt_gaming_company": {
          "description": "Landing Company for MT5 standard derived contracts (Synthetic Indices), currently has Financial as subtype.",
          "type": [
            "null",
            "object"
          ],
          "additionalProperties": false,
          "properties": {
            "financial": {
              "description": "Landing Company for MT5 derived contracts (Synthetic Indices)",
              "type": [
                "null",
                "object"
              ],
              "additionalProperties": false,
              "properties": {
                "address": {
                  "description": "Landing Company address",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "changeable_fields": {
                  "description": "Special conditions for changing sensitive fields",
                  "type": "object"
                },
                "country": {
                  "description": "Landing Company country of incorporation",
                  "type": "string"
                },
                "currency_config": {
                  "title": "Currency Config Structure",
                  "description": "The configuration of each currency.",
                  "type": "object"
                },
                "has_reality_check": {
                  "description": "Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "legal_allowed_contract_categories": {
                  "description": "Allowed contract types",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_allowed_currencies": {
                  "description": "Allowable currencies",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_allowed_markets": {
                  "description": "Allowable markets",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "legal_default_currency": {
                  "description": "Default account currency",
                  "type": "string"
                },
                "name": {
                  "description": "Landing Company legal name",
                  "type": "string"
                },
                "requirements": {
                  "description": "Legal requirements for the Landing Company",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "after_first_deposit": {
                      "description": "After first deposit requirements",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "financial_assessment": {
                          "description": "Financial assessment requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "financial_information",
                              "trading_experience"
                            ]
                          }
                        }
                      }
                    },
                    "compliance": {
                      "description": "Compliance requirements",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "mt5": {
                          "description": "Compliance MT5 requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "expiration_check",
                              "fully_authenticated"
                            ]
                          }
                        },
                        "tax_information": {
                          "description": "Compliance tax information requirements",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "examples": [
                              "tax_identification_number",
                              "tax_residence"
                            ]
                          }
                        }
                      }
                    },
                    "signup": {
                      "description": "Sign up requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "first_name",
                          "residence",
                          "salutation"
                        ]
                      }
                    },
                    "withdrawal": {
                      "description": "Withdrawal requirements",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "examples": [
                          "address_city",
                          "address_line_1"
                        ]
                      }
                    }
                  }
                },
                "shortcode": {
                  "description": "Landing Company short code",
                  "type": "string"
                },
                "support_professional_client": {
                  "description": "Flag that indicates whether the landing company supports professional accounts or not",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "tin_not_mandatory": {
                  "description": "Flag that indicates whether tax identifier number is not mandatory for the current country and landing company.",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                }
              }
            }
          }
        },
        "name": {
          "description": "Country name",
          "type": "string"
        },
        "need_set_max_turnover_limit": {
          "description": "Flag to indicate whether max turnover limit settings.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "no_province": {
          "description": "Flag to indicate province settings.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "require_address_postcode": {
          "description": "Flag to indicate whether address postcode is required or not.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "require_age_verified_for_synthetic": {
          "description": "Flag to indicate whether age verification required ofr synthetic or not.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "require_poi": {
          "description": "Flag to indicate whether poi is required.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "require_verification_when_not_age_verified": {
          "description": "Flag to indicate whether verification required if age not verified.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "skip_deposit_verification": {
          "description": "Flag to indicate whether to skip deposit verifcation or not.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "virtual_company": {
          "description": "Virtual Company",
          "type": "string"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "landing_company"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  },
  "$defs": {
    "afterFirstDepositRequirements": {
      "description": "After first deposit requirements",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "financial_assessment": {
          "description": "Financial assessment requirements",
          "type": "array",
          "items": {
            "type": "string",
            "examples": [
              "financial_information",
              "trading_experience"
            ]
          }
        }
      }
    },
    "clientKycStatusRequirements": {
      "description": "[Optional] Pertains to client KYC. Returned only if the client fails to meet the requirements, including proof of identity (POI), validity of the tax identification number (TIN), and proof of address (POA).",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "poa_status",
        "poi_status",
        "valid_tin"
      ],
      "properties": {
        "poa_status": {
          "description": "Status of proof of address (POA).",
          "type": "string",
          "enum": [
            "none",
            "pending",
            "expired",
            "verified",
            "rejected"
          ]
        },
        "poi_status": {
          "description": "Status of proof of identity (POI).",
          "type": "string",
          "enum": [
            "none",
            "pending",
            "verified",
            "suspected",
            "rejected",
            "expired"
          ]
        },
        "valid_tin": {
          "description": "Indicates whether the tax identification number (TIN) is valid (1) or not (0).",
          "type": "integer",
          "enum": [
            1,
            0
          ]
        }
      }
    },
    "complianceRequirements": {
      "description": "Compliance requirements",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "mt5": {
          "description": "Compliance MT5 requirements",
          "type": "array",
          "items": {
            "type": "string",
            "examples": [
              "expiration_check",
              "fully_authenticated"
            ]
          }
        },
        "tax_information": {
          "description": "Compliance tax information requirements",
          "type": "array",
          "items": {
            "type": "string",
            "examples": [
              "tax_identification_number",
              "tax_residence"
            ]
          }
        }
      }
    },
    "landingCompanyDetails": {
      "type": [
        "null",
        "object"
      ],
      "additionalProperties": false,
      "properties": {
        "address": {
          "description": "Landing Company address",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "changeable_fields": {
          "description": "Special conditions for changing sensitive fields",
          "type": "object"
        },
        "client_kyc_status": {
          "$ref": "#/$defs/clientKycStatusRequirements",
          "description": "Client kyc statusequirements"
        },
        "country": {
          "description": "Landing Company country of incorporation",
          "type": "string"
        },
        "currency_config": {
          "title": "Currency Config Structure",
          "description": "The configuration of each currency.",
          "type": "object"
        },
        "has_reality_check": {
          "description": "Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "legal_allowed_contract_categories": {
          "description": "Allowed contract types",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "legal_allowed_currencies": {
          "description": "Allowable currencies",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "legal_allowed_markets": {
          "description": "Allowable markets",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "legal_default_currency": {
          "description": "Default account currency",
          "type": "string"
        },
        "name": {
          "description": "Landing Company legal name",
          "type": "string"
        },
        "requirements": {
          "$ref": "#/$defs/legalRequirements",
          "description": "Legal requirements for the Landing Company"
        },
        "shortcode": {
          "description": "Landing Company short code",
          "type": "string"
        },
        "support_professional_client": {
          "description": "Flag that indicates whether the landing company supports professional accounts or not",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "tin_not_mandatory": {
          "description": "Flag that indicates whether tax identifier number is not mandatory for the current country and landing company.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        }
      }
    },
    "legalRequirements": {
      "description": "Legal requirements for the Landing Company",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "after_first_deposit": {
          "$ref": "#/$defs/afterFirstDepositRequirements",
          "description": "After first deposit requirements"
        },
        "compliance": {
          "$ref": "#/$defs/complianceRequirements",
          "description": "Compliance requirements"
        },
        "signup": {
          "$ref": "#/$defs/signUpRequirements",
          "description": "Sign up requirements"
        },
        "withdrawal": {
          "$ref": "#/$defs/withdrawalRequirements",
          "description": "Withdrawal requirements"
        }
      }
    },
    "signUpRequirements": {
      "description": "Sign up requirements",
      "type": "array",
      "items": {
        "type": "string",
        "examples": [
          "first_name",
          "residence",
          "salutation"
        ]
      }
    },
    "withdrawalRequirements": {
      "description": "Withdrawal requirements",
      "type": "array",
      "items": {
        "type": "string",
        "examples": [
          "address_city",
          "address_line_1"
        ]
      }
    }
  }
}


anding Company Details (request)

The company has a number of licensed subsidiaries in various jurisdictions, which are called Landing Companies (and which are wholly owned subsidiaries of the Deriv Group). This call provides information about each Landing Company.
{}
{}
landing_company_details

enum
string
iom
malta
maltainvest
svg
virtual
vanuatu
samoa
samoa-virtual
dsl
bvi
labuan
dml
Landing company shortcode.
{}
country

string
[Optional] Will return an extra field tin_not_mandatory indicating if the landing company does not require tax identification number for the provided country.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Landing Company Details (response)

A message with Landing Company.
{}
{}
landing_company_details

landing_company_details
The detailed information of the requested landing company.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
landing_company_details
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Landing Company Details (request)",
  "description": "The company has a number of licensed subsidiaries in various jurisdictions, which are called Landing Companies (and which are wholly owned subsidiaries of the Deriv Group). This call provides information about each Landing Company.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "landing_company_details"
  ],
  "properties": {
    "landing_company_details": {
      "description": "Landing company shortcode.",
      "type": "string",
      "enum": [
        "iom",
        "malta",
        "maltainvest",
        "svg",
        "virtual",
        "vanuatu",
        "samoa",
        "samoa-virtual",
        "dsl",
        "bvi",
        "labuan",
        "dml"
      ]
    },
    "country": {
      "description": "[Optional] Will return an extra field `tin_not_mandatory` indicating if the landing company does not require tax identification number for the provided country.",
      "type": "string"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Landing Company Details (response)",
  "description": "A message with Landing Company.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "landing_company_details": {
      "title": "landing_company_details",
      "description": "The detailed information of the requested landing company.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "address": {
          "description": "Landing Company address.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "changeable_fields": {
          "description": "Special conditions for changing sensitive fields",
          "type": "object"
        },
        "country": {
          "description": "Landing Company country.",
          "type": "string"
        },
        "currency_config": {
          "title": "Currency Config Structure",
          "description": "The configuration of each currency.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "commodities": {
              "title": "Commodities",
              "description": "Name of commodities.",
              "type": "object"
            },
            "cryptocurrency": {
              "title": "Cryptocurrency",
              "description": "Name of cryptocurrency.",
              "type": "object"
            },
            "forex": {
              "title": "Forex",
              "description": "Name of forex.",
              "type": "object"
            },
            "indices": {
              "title": "Indices",
              "description": "Name of indices.",
              "type": "object"
            },
            "market": {
              "title": "Market",
              "description": "Name of market.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "currency": {
                  "title": "Currency",
                  "description": "Currency Symbol.",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "max_payout": {
                      "description": "Maximum payout for this currency in this market.",
                      "type": "integer"
                    },
                    "min_stake": {
                      "description": "Minimum stake for this currency in this market.",
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "synthetic_index": {
              "title": "Synthetic index",
              "description": "Name of synthetic index.",
              "type": "object"
            }
          }
        },
        "has_reality_check": {
          "description": "Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "legal_allowed_contract_categories": {
          "description": "Allowed contract types for this Landing Company",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "legal_allowed_currencies": {
          "description": "Allowable currencies for accounts with this Landing Company.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{2,20}$"
          }
        },
        "legal_allowed_markets": {
          "description": "Allowed markets for this Landing Company",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "legal_default_currency": {
          "description": "Default currency of client accounts with this Landing Company.",
          "type": "string",
          "pattern": "^[a-zA-Z0-9]{2,20}$"
        },
        "name": {
          "description": "Landing Company name.",
          "type": "string"
        },
        "requirements": {
          "description": "Legal requirements for the given Landing Company.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "after_first_deposit": {
              "description": "After first deposit requirements",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "financial_assessment": {
                  "description": "Financial assessment requirements",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "examples": [
                      "financial_information",
                      "trading_experience"
                    ]
                  }
                }
              }
            },
            "compliance": {
              "description": "Compliance requirements",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "mt5": {
                  "description": "Compliance MT5 requirements",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "examples": [
                      "expiration_check",
                      "fully_authenticated"
                    ]
                  }
                },
                "tax_information": {
                  "description": "Compliance tax information requirements",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "examples": [
                      "tax_identification_number",
                      "tax_residence"
                    ]
                  }
                }
              }
            },
            "signup": {
              "description": "Sign up requirements",
              "type": "array",
              "items": {
                "type": "string",
                "examples": [
                  "first_name",
                  "residence",
                  "salutation"
                ]
              }
            },
            "withdrawal": {
              "description": "Withdrawal requirements",
              "type": "array",
              "items": {
                "type": "string",
                "examples": [
                  "address_city",
                  "address_line_1"
                ]
              }
            }
          }
        },
        "shortcode": {
          "description": "Landing Company shortcode.",
          "type": "string"
        },
        "support_professional_client": {
          "description": "Flag that indicates whether the landing company supports professional accounts or not",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "tin_not_mandatory": {
          "description": "Flag that indicates whether tax identifier number is not mandatory for the current country and landing company.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "landing_company_details"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Login History (request)

Retrieve a summary of login history for user.
Auth Required: read
{}
{}
login_history

constant
integer
1
Must be 1
{}
limit

integer
default:
10
[Optional] Apply limit to count of login history records.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Login History (response)

Recent login/logout history records
{}
{}
login_history

array
login_history
Array of records of client login/logout activities
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
login_history
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Login History (request)",
  "description": "Retrieve a summary of login history for user.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "login_history"
  ],
  "properties": {
    "login_history": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "limit": {
      "description": "[Optional] Apply limit to count of login history records.",
      "type": "integer",
      "default": 10,
      "maximum": 50,
      "minimum": 0
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Login History (response)",
  "description": "Recent login/logout history records",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "login_history": {
      "title": "login_history",
      "description": "Array of records of client login/logout activities",
      "type": "array",
      "items": {
        "description": "User login history",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "action",
          "browser",
          "country",
          "datetime",
          "device",
          "environment",
          "ip",
          "language",
          "os",
          "status",
          "time",
          "version"
        ],
        "properties": {
          "action": {
            "description": "Type of action.",
            "type": "string",
            "examples": [
              "login",
              "logout"
            ]
          },
          "browser": {
            "description": "Browser used",
            "type": "string"
          },
          "country": {
            "description": "Country the login originated (IP Based))",
            "type": "string"
          },
          "datetime": {
            "description": "ISO6801 timestame of the activity",
            "type": "string"
          },
          "device": {
            "description": "Client device",
            "type": "string"
          },
          "environment": {
            "description": "Provides details about browser, device used during login or logout",
            "type": "string"
          },
          "ip": {
            "description": "IP Address the login was from",
            "type": "string"
          },
          "language": {
            "description": "Browser language",
            "type": "string"
          },
          "os": {
            "description": "Operating system",
            "type": "string"
          },
          "status": {
            "description": "Status of activity: 1 - success, 0 - failure",
            "type": "integer",
            "enum": [
              0,
              1
            ]
          },
          "time": {
            "description": "Epoch time of the activity",
            "type": "integer"
          },
          "version": {
            "description": "Version of the browser",
            "type": "string"
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "login_history"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Log Out (request)

Logout the session
{}
{}
logout

constant
integer
1
Must be 1
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Log Out (response)

The response of logout request made.
{}
{}
logout

constant
integer
1
The result of logout request which is 1
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
logout
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Log Out (request)",
  "description": "Logout the session",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "logout"
  ],
  "properties": {
    "logout": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Log Out (response)",
  "description": "The response of logout request made.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "logout": {
      "title": "logout",
      "description": "The result of logout request which is 1",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "logout"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


ayout Currencies (request)

Retrieve a list of available option payout currencies. If a user is logged in, only the currencies available for the account will be returned.
{}
{}
payout_currencies

constant
integer
1
Must be 1
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Payout Currencies (response)

List of available payout currencies.
{}
{}
payout_currencies

array
payout_currencies
Available payout currencies. Note: if a user is logged in, only the currency available for the account will be returned.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
payout_currencies
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Payout Currencies (request)",
  "description": "Retrieve a list of available option payout currencies. If a user is logged in, only the currencies available for the account will be returned.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "payout_currencies"
  ],
  "properties": {
    "payout_currencies": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Payout Currencies (response)",
  "description": "List of available payout currencies.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "payout_currencies": {
      "title": "payout_currencies",
      "description": "Available payout currencies. Note: if a user is logged in, only the currency available for the account will be returned.",
      "type": "array",
      "items": {
        "description": "Available payout currency.",
        "type": "string",
        "examples": [
          "USD"
        ]
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "payout_currencies"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Ping (request)

To send the ping request to the server. Mostly used to test the connection or to keep it alive.
{}
{}
ping

constant
integer
1
Must be 1
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Ping (response)

The response of ping request.
{}
{}
ping

constant
string
pong
Will return 'pong'
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
ping
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Ping (request)",
  "description": "To send the ping request to the server. Mostly used to test the connection or to keep it alive.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "ping"
  ],
  "properties": {
    "ping": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Ping (response)",
  "description": "The response of ping request.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "ping": {
      "title": "ping",
      "description": "Will return 'pong'",
      "type": "string",
      "enum": [
        "pong"
      ]
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "ping"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Portfolio (request)

Receive information about my current portfolio of outstanding options
Auth Required: readtrading_information
{}
{}
portfolio

constant
integer
1
Must be 1
{}
contract_type

array
string
Return only contracts of the specified types
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Portfolio (response)

Receive a list of outstanding options in the user's portfolio
{}
{}
portfolio

portfolio
Current account's open positions.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
portfolio
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Portfolio (request)",
  "description": "Receive information about my current portfolio of outstanding options",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read",
    "trading_information"
  ],
  "additionalProperties": false,
  "required": [
    "portfolio"
  ],
  "properties": {
    "portfolio": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "contract_type": {
      "description": "Return only contracts of the specified types",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "ACCU",
          "ASIAND",
          "ASIANU",
          "CALL",
          "CALLE",
          "CALLSPREAD",
          "DIGITDIFF",
          "DIGITEVEN",
          "DIGITMATCH",
          "DIGITODD",
          "DIGITOVER",
          "DIGITUNDER",
          "EXPIRYMISSE",
          "EXPIRYMISS",
          "EXPIRYRANGE",
          "EXPIRYRANGEE",
          "LBFLOATCALL",
          "LBFLOATPUT",
          "LBHIGHLOW",
          "MULTDOWN",
          "MULTUP",
          "NOTOUCH",
          "ONETOUCH",
          "PUT",
          "PUTE",
          "PUTSPREAD",
          "RANGE",
          "RESETCALL",
          "RESETPUT",
          "RUNHIGH",
          "RUNLOW",
          "TICKHIGH",
          "TICKLOW",
          "UPORDOWN",
          "VANILLALONGCALL",
          "VANILLALONGPUT",
          "TURBOSLONG",
          "TURBOSSHORT"
        ],
        "uniqueItems": true
      }
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Portfolio (response)",
  "description": "Receive a list of outstanding options in the user's portfolio",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "portfolio": {
      "title": "portfolio",
      "description": "Current account's open positions.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "contracts"
      ],
      "properties": {
        "contracts": {
          "title": "Contracts",
          "description": "List of open positions.",
          "type": "array",
          "items": {
            "title": "Portfolio",
            "description": "The details of each open position.",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "app_id": {
                "description": "ID of the application where this contract was purchased.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "buy_price": {
                "description": "Buy price",
                "type": "number"
              },
              "contract_id": {
                "description": "Internal contract identifier number (to be used in a `proposal_open_contract` API call).",
                "type": "integer"
              },
              "contract_type": {
                "description": "Contract type",
                "type": "string"
              },
              "currency": {
                "description": "Contract currency",
                "type": "string"
              },
              "date_start": {
                "description": "Epoch of start date",
                "type": "integer"
              },
              "expiry_time": {
                "description": "Epoch of expiry time",
                "type": "integer"
              },
              "longcode": {
                "description": "Contract description",
                "type": "string"
              },
              "payout": {
                "description": "Payout price",
                "type": "number"
              },
              "purchase_time": {
                "description": "Epoch of purchase time",
                "type": "integer"
              },
              "shortcode": {
                "description": "Contract short code description",
                "type": "string"
              },
              "symbol": {
                "description": "Symbol code",
                "type": "string"
              },
              "transaction_id": {
                "description": "It is the transaction ID. Every contract (buy or sell) and every payment has a unique ID.",
                "type": "integer",
                "examples": [
                  "10867502908"
                ]
              }
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "portfolio"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



Profit Table (request)

Retrieve a summary of account Profit Table, according to given search criteria
Auth Required: readtrading_information
{}
{}
profit_table

constant
integer
1
Must be 1
{}
contract_type

array
string
Return only contracts of the specified types
{}
date_from

string
^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])|[0-9]{1,10})$
[Optional] Start date (epoch or YYYY-MM-DD)
{}
date_to

string
^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])|[0-9]{1,10})$
[Optional] End date (epoch or YYYY-MM-DD)
{}
description

enum
integer
0
1
[Optional] If set to 1, will return full contracts description.
{}
limit

number
default:
50
[Optional] Apply upper limit to count of transactions received.
{}
offset

integer
[Optional] Number of transactions to skip.
{}
sort

enum
string
ASC
DESC
default:
DESC
[Optional] Sort direction.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Profit Table (response)

A summary of account profit table is received
{}
{}
profit_table

profit_table
Account Profit Table.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
profit_table
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Profit Table (request)",
  "description": "Retrieve a summary of account Profit Table, according to given search criteria",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read",
    "trading_information"
  ],
  "additionalProperties": false,
  "required": [
    "profit_table"
  ],
  "properties": {
    "profit_table": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "contract_type": {
      "description": "Return only contracts of the specified types",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "ACCU",
          "ASIAND",
          "ASIANU",
          "CALL",
          "CALLE",
          "CALLSPREAD",
          "DIGITDIFF",
          "DIGITEVEN",
          "DIGITMATCH",
          "DIGITODD",
          "DIGITOVER",
          "DIGITUNDER",
          "EXPIRYMISSE",
          "EXPIRYMISS",
          "EXPIRYRANGE",
          "EXPIRYRANGEE",
          "LBFLOATCALL",
          "LBFLOATPUT",
          "LBHIGHLOW",
          "MULTDOWN",
          "MULTUP",
          "NOTOUCH",
          "ONETOUCH",
          "PUT",
          "PUTE",
          "PUTSPREAD",
          "RANGE",
          "RESETCALL",
          "RESETPUT",
          "RUNHIGH",
          "RUNLOW",
          "TICKHIGH",
          "TICKLOW",
          "UPORDOWN",
          "VANILLALONGCALL",
          "VANILLALONGPUT",
          "TURBOSLONG",
          "TURBOSSHORT"
        ],
        "uniqueItems": true
      }
    },
    "date_from": {
      "description": "[Optional] Start date (epoch or YYYY-MM-DD)",
      "type": "string",
      "pattern": "^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])|[0-9]{1,10})$"
    },
    "date_to": {
      "description": "[Optional] End date (epoch or YYYY-MM-DD)",
      "type": "string",
      "pattern": "^([0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])|[0-9]{1,10})$"
    },
    "description": {
      "description": "[Optional] If set to 1, will return full contracts description.",
      "type": "integer",
      "enum": [
        0,
        1
      ]
    },
    "limit": {
      "description": "[Optional] Apply upper limit to count of transactions received.",
      "type": "number",
      "default": 50,
      "maximum": 500,
      "minimum": 0
    },
    "offset": {
      "description": "[Optional] Number of transactions to skip.",
      "type": "integer",
      "minimum": 0
    },
    "sort": {
      "description": "[Optional] Sort direction.",
      "type": "string",
      "default": "DESC",
      "enum": [
        "ASC",
        "DESC"
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Profit Table (response)",
  "description": "A summary of account profit table is received",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "profit_table": {
      "title": "profit_table",
      "description": "Account Profit Table.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "count": {
          "description": "Number of transactions returned in this call",
          "type": "number"
        },
        "transactions": {
          "description": "Array of returned transactions",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "app_id": {
                "description": "ID of the application where this contract was purchased.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "buy_price": {
                "description": "The buy price",
                "type": "number"
              },
              "contract_id": {
                "description": "The unique contract identifier.",
                "type": [
                  "integer",
                  "null"
                ],
                "examples": [
                  4867502908
                ]
              },
              "contract_type": {
                "description": "[Optional] The contract type for the transaction if description is set to 1.",
                "type": "string",
                "examples": [
                  "ASIANU",
                  "CALL"
                ]
              },
              "deal_cancellation_duration": {
                "description": "[Optional] Duration set for deal cancellation for Multiplier contracts in synthetic indices if description is set to 1.",
                "type": "string"
              },
              "duration_type": {
                "description": "[Optional] The duration type of the contract if description is set to 1.",
                "type": [
                  "null",
                  "string"
                ]
              },
              "growth_rate": {
                "description": "[Optional] The growth rate for Accumulators contract if description is set to 1.",
                "type": "string"
              },
              "longcode": {
                "description": "[Optional] The description of contract purchased if description is set to 1",
                "type": "string"
              },
              "multiplier": {
                "description": "[Optional] The multiplier for Multiplier contracts if description is set to 1.",
                "type": "string"
              },
              "payout": {
                "description": "Payout price",
                "type": "number"
              },
              "purchase_time": {
                "description": "Epoch purchase time of the transaction",
                "type": "integer"
              },
              "sell_price": {
                "description": "The price the contract sold for.",
                "type": "number"
              },
              "sell_time": {
                "description": "Epoch sell time of the transaction",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "shortcode": {
                "description": "[Optional] Compact description of the contract purchased if description is set to 1",
                "type": "string"
              },
              "transaction_id": {
                "description": "The transaction Identifier. Every contract (buy or sell) and every payment has a unique transaction identifier.",
                "type": "integer",
                "examples": [
                  10867502908
                ]
              },
              "underlying_symbol": {
                "description": "[Optional] Symbol code if description is set to 1",
                "type": "string",
                "examples": [
                  "R_50",
                  "frxEURUSD"
                ]
              }
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "profit_table"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Price Proposal (request)

Gets latest price for a specific contract.
{}
{}
proposal

constant
integer
1
Must be 1
{}
amount

number
[Optional] Proposed contract payout or stake, or multiplier (for lookbacks).
{}
barrier

string
^(?=.{1,20}$)[+-]?[0-9]+\.?[0-9]*$
[Optional] Barrier for the contract (or last digit prediction for digit contracts). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers. Not needed for lookbacks.
{}
barrier2

string
^(?=.{1,20}$)[+-]?[0-9]+\.?[0-9]*$
[Optional] Low barrier for the contract (for contracts with two barriers). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers. Not needed for lookbacks.
{}
barrier_range

enum
string
tight
middle
wide
[Optional] Barrier range for callputspread.
{}
basis

enum
string
payout
stake
[Optional] Indicates type of the amount.
{}
cancellation

string
^\w+$
Cancellation duration option (only for MULTUP and MULTDOWN contracts).
{}
contract_type

enum
string
MULTUP
MULTDOWN
UPORDOWN
EXPIRYRANGE
ONETOUCH
CALLE
LBHIGHLOW
ASIAND
EXPIRYRANGEE
DIGITDIFF
DIGITMATCH
DIGITOVER
PUTE
DIGITUNDER
NOTOUCH
CALL
RANGE
LBFLOATPUT
DIGITODD
PUT
ASIANU
LBFLOATCALL
EXPIRYMISSE
EXPIRYMISS
DIGITEVEN
TICKHIGH
TICKLOW
RESETCALL
RESETPUT
SNOWDOWN
SNOWUP
CALLSPREAD
PUTSPREAD
RUNHIGH
RUNLOW
ACCU
VANILLALONGCALL
VANILLALONGPUT
TURBOSLONG
TURBOSSHORT
The proposed contract type
{}
currency

string
^[a-zA-Z0-9]{2,20}$
This can only be the account-holder's currency (obtained from payout_currencies call).
{}
date_expiry

integer
[Optional] Epoch value of the expiry time of the contract. Either date_expiry or duration is required.
{}
date_start

integer
[Optional] Indicates epoch value of the starting time of the contract. If left empty, the start time of the contract is now.
{}
duration

integer
[Optional] Duration quantity. Either date_expiry or duration is required.
{}
duration_unit

enum
string
d
m
s
h
t
default:
s
[Optional] Duration unit - s: seconds, m: minutes, h: hours, d: days, t: ticks.
{}
growth_rate

number
[Optional] Growth rate of an accumulator contract.
{}
limit_order

object
Add an order to close the contract once the order condition is met (only for MULTUP and MULTDOWN and 'ACCU' contracts). Supported orders: take_profit, stop_loss.
{}
multiplier

number
[Optional] The multiplier for non-binary options. E.g. lookbacks.
{}
payout_per_point

number
[Optional] Clients can provide payout_per_point directly, and the barrier will be calculated based on this payout_per_point value.
{}
product_type

constant
string
basic
default:
basic
[Optional] The product type.
{}
selected_tick

integer
[Optional] The tick that is predicted to have the highest/lowest value - for TICKHIGH and TICKLOW contracts.
{}
subscribe

constant
integer
1
[Optional] 1 - to initiate a realtime stream of prices. Note that tick trades (without a user-defined barrier), digit trades and less than 24 hours at-the-money contracts for the following underlying symbols are not streamed: R_10, R_25, R_50, R_75, R_100, RDBULL, RDBEAR (this is because their price is constant).
{}
symbol

string
^\w{2,30}$
The short symbol name (obtained from active_symbols call).
{}
trade_risk_profile

enum
string
low
medium
high
[Only for Snowball] The trade risk profile for the Snowball contract. Higher risk profile offers higher coupon rate at the expense of higher probability of breaching caution price
{}
trading_period_start

integer
[Optional] Required only for multi-barrier trading. Defines the epoch value of the trading period start time.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Price Proposal (response)

Latest price and other details for a given contract
{}
{}
proposal

proposal
Latest price and other details for a given contract
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
proposal
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Price Proposal (request)",
  "description": "Gets latest price for a specific contract.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "proposal",
    "contract_type",
    "currency",
    "symbol"
  ],
  "properties": {
    "proposal": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "amount": {
      "description": "[Optional] Proposed contract payout or stake, or multiplier (for lookbacks).",
      "type": "number",
      "minimum": 0
    },
    "barrier": {
      "description": "[Optional] Barrier for the contract (or last digit prediction for digit contracts). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers. Not needed for lookbacks.",
      "type": "string",
      "pattern": "^(?=.{1,20}$)[+-]?[0-9]+\\.?[0-9]*$"
    },
    "barrier2": {
      "description": "[Optional] Low barrier for the contract (for contracts with two barriers). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Synthetic Indices as they support both relative and absolute barriers. Not needed for lookbacks.",
      "type": "string",
      "pattern": "^(?=.{1,20}$)[+-]?[0-9]+\\.?[0-9]*$"
    },
    "barrier_range": {
      "description": "[Optional] Barrier range for callputspread.",
      "type": "string",
      "enum": [
        "tight",
        "middle",
        "wide"
      ]
    },
    "basis": {
      "description": "[Optional] Indicates type of the `amount`.",
      "type": "string",
      "enum": [
        "payout",
        "stake"
      ]
    },
    "cancellation": {
      "description": "Cancellation duration option (only for `MULTUP` and `MULTDOWN` contracts).",
      "type": "string",
      "pattern": "^\\w+$"
    },
    "contract_type": {
      "description": "The proposed contract type",
      "type": "string",
      "enum": [
        "MULTUP",
        "MULTDOWN",
        "UPORDOWN",
        "EXPIRYRANGE",
        "ONETOUCH",
        "CALLE",
        "LBHIGHLOW",
        "ASIAND",
        "EXPIRYRANGEE",
        "DIGITDIFF",
        "DIGITMATCH",
        "DIGITOVER",
        "PUTE",
        "DIGITUNDER",
        "NOTOUCH",
        "CALL",
        "RANGE",
        "LBFLOATPUT",
        "DIGITODD",
        "PUT",
        "ASIANU",
        "LBFLOATCALL",
        "EXPIRYMISSE",
        "EXPIRYMISS",
        "DIGITEVEN",
        "TICKHIGH",
        "TICKLOW",
        "RESETCALL",
        "RESETPUT",
        "SNOWDOWN",
        "SNOWUP",
        "CALLSPREAD",
        "PUTSPREAD",
        "RUNHIGH",
        "RUNLOW",
        "ACCU",
        "VANILLALONGCALL",
        "VANILLALONGPUT",
        "TURBOSLONG",
        "TURBOSSHORT"
      ]
    },
    "currency": {
      "description": "This can only be the account-holder's currency (obtained from `payout_currencies` call).",
      "type": "string",
      "pattern": "^[a-zA-Z0-9]{2,20}$"
    },
    "date_expiry": {
      "description": "[Optional] Epoch value of the expiry time of the contract. Either date_expiry or duration is required.",
      "type": "integer",
      "maximum": 9999999999,
      "minimum": 0
    },
    "date_start": {
      "description": "[Optional] Indicates epoch value of the starting time of the contract. If left empty, the start time of the contract is now.",
      "type": "integer",
      "maximum": 9999999999,
      "minimum": 0
    },
    "duration": {
      "description": "[Optional] Duration quantity. Either date_expiry or duration is required.",
      "type": "integer",
      "maximum": 99999999,
      "minimum": 0
    },
    "duration_unit": {
      "description": "[Optional] Duration unit - `s`: seconds, `m`: minutes, `h`: hours, `d`: days, `t`: ticks.",
      "type": "string",
      "default": "s",
      "enum": [
        "d",
        "m",
        "s",
        "h",
        "t"
      ]
    },
    "growth_rate": {
      "description": "[Optional] Growth rate of an accumulator contract.",
      "type": "number"
    },
    "limit_order": {
      "description": "Add an order to close the contract once the order condition is met (only for `MULTUP` and `MULTDOWN` and 'ACCU' contracts). Supported orders: `take_profit`, `stop_loss`.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "stop_loss": {
          "description": "Contract will be automatically closed when the value of the contract reaches a specific loss.",
          "type": "number"
        },
        "take_profit": {
          "description": "Contract will be automatically closed when the value of the contract reaches a specific profit.",
          "type": "number"
        }
      }
    },
    "multiplier": {
      "description": "[Optional] The multiplier for non-binary options. E.g. lookbacks.",
      "type": "number",
      "minimum": 0
    },
    "payout_per_point": {
      "description": "[Optional] Clients can provide payout_per_point directly, and the barrier will be calculated based on this payout_per_point value.",
      "type": "number"
    },
    "product_type": {
      "description": "[Optional] The product type.",
      "type": "string",
      "default": "basic",
      "enum": [
        "basic"
      ]
    },
    "selected_tick": {
      "description": "[Optional] The tick that is predicted to have the highest/lowest value - for `TICKHIGH` and `TICKLOW` contracts.",
      "type": "integer"
    },
    "subscribe": {
      "description": "[Optional] 1 - to initiate a realtime stream of prices. Note that tick trades (without a user-defined barrier), digit trades and less than 24 hours at-the-money contracts for the following underlying symbols are not streamed: `R_10`, `R_25`, `R_50`, `R_75`, `R_100`, `RDBULL`, `RDBEAR` (this is because their price is constant).",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "symbol": {
      "description": "The short symbol name (obtained from `active_symbols` call).",
      "type": "string",
      "pattern": "^\\w{2,30}$"
    },
    "trade_risk_profile": {
      "description": "[Only for Snowball] The trade risk profile for the Snowball contract. Higher risk profile offers higher coupon rate at the expense of higher probability of breaching caution price",
      "type": "string",
      "enum": [
        "low",
        "medium",
        "high"
      ]
    },
    "trading_period_start": {
      "description": "[Optional] Required only for multi-barrier trading. Defines the epoch value of the trading period start time.",
      "type": "integer"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Price Proposal (response)",
  "description": "Latest price and other details for a given contract",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "proposal": {
      "title": "proposal",
      "description": "Latest price and other details for a given contract",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ask_price",
        "date_start",
        "display_value",
        "id",
        "longcode",
        "payout",
        "spot",
        "spot_time"
      ],
      "properties": {
        "ask_price": {
          "description": "The ask price.",
          "type": "number",
          "examples": [
            5.14
          ]
        },
        "barrier_choices": {
          "description": "[Only for vanilla options] The choices of predefined strike price for client to choose",
          "type": "array"
        },
        "barrier_spot_distance": {
          "description": "[Only for Turbos] The relative distance between current spot and the barrier.",
          "type": "string"
        },
        "cancellation": {
          "description": "Contains information about contract cancellation option.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "ask_price": {
              "description": "Ask price of contract cancellation option.",
              "type": "number"
            },
            "date_expiry": {
              "description": "Expiry time in epoch for contract cancellation option.",
              "type": "integer"
            }
          }
        },
        "commission": {
          "description": "Commission changed in percentage (%).",
          "type": [
            "null",
            "number"
          ]
        },
        "contract_details": {
          "description": "Contains contract information.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "app_markup_amount": {
              "description": "The markup amount charged on a client's stake amount",
              "type": "string"
            },
            "barrier": {
              "description": "Barrier of the contract.",
              "type": "string",
              "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
              "examples": [
                "42.123"
              ]
            },
            "barrier_spot_distance": {
              "description": "Absolute difference between high/low barrier and spot",
              "type": "string",
              "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
              "examples": [
                2.123
              ]
            },
            "caution_price": {
              "description": "The caution price for the Snowball contract. Breaching this price will reset the coupons accrued to 0.",
              "type": "string",
              "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
              "examples": [
                "10001.2"
              ]
            },
            "coupon_rate": {
              "description": "The coupon rate for the Snowball contract at which the stake will grow for each coupon accrued.",
              "type": "string",
              "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
              "examples": [
                "0.0132"
              ]
            },
            "high_barrier": {
              "description": "High barrier calculated based on current spot",
              "type": "string",
              "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
              "examples": [
                42.123
              ]
            },
            "last_tick_epoch": {
              "description": "Epoch of last tick considered for stat chart",
              "type": "integer"
            },
            "low_barrier": {
              "description": "Low barrier calculated based on current spot",
              "type": "string",
              "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
              "examples": [
                42.123
              ]
            },
            "maximum_payout": {
              "description": "Maximum payout that user can get out of a contract, contract will close automatically if payout reaches this number",
              "type": "number",
              "examples": [
                1000.59
              ]
            },
            "maximum_stake": {
              "description": "Maximum stake that user can set to buy a contract",
              "type": "string",
              "examples": [
                "1000.00"
              ]
            },
            "maximum_ticks": {
              "description": "Maximum duration that a contract can last, contract will close automatically after this number of ticks",
              "type": "integer",
              "examples": [
                500
              ]
            },
            "minimum_stake": {
              "description": "Minimum stake that user can set to buy a contract",
              "type": "string",
              "examples": [
                "1.00"
              ]
            },
            "num_of_coupons": {
              "description": "The maximum number of coupons available for the Snowball contract.",
              "type": "integer",
              "examples": [
                5
              ]
            },
            "profit_price": {
              "description": "The profit price for the Snowball contract. Breaching this price will close the contract immediately.",
              "type": "string",
              "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
              "examples": [
                "10005.2"
              ]
            },
            "tick_size_barrier": {
              "description": "Tick size barrier for Accumulator contracts",
              "type": "number",
              "examples": [
                0.000049358253
              ]
            },
            "tick_size_barrier_percentage": {
              "description": "[Accumulator] Tick size barrier in percentage, rounded off to 5 decimal places",
              "type": "string",
              "examples": [
                "0.00546%"
              ]
            },
            "ticks_stayed_in": {
              "description": "An array of numbers  to build a stat chart - each number represents the duration that spot stayed between barries",
              "type": "array",
              "items": {
                "type": "integer",
                "examples": [
                  50
                ]
              }
            },
            "trade_risk_profile": {
              "description": "The trade risk profile for the Snowball contract.",
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high"
              ]
            }
          }
        },
        "date_expiry": {
          "description": "The end date of the contract.",
          "type": "integer",
          "examples": [
            1439999053
          ]
        },
        "date_start": {
          "description": "The start date of the contract.",
          "type": "integer",
          "examples": [
            1439999053
          ]
        },
        "display_number_of_contracts": {
          "description": "[Only for vanilla or turbos options] The implied number of contracts",
          "type": "string"
        },
        "display_value": {
          "description": "Same as `ask_price`.",
          "type": "string",
          "examples": [
            "5.14"
          ]
        },
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        },
        "limit_order": {
          "description": "Contains limit order information. (Only applicable for contract with limit order).",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "stop_loss": {
              "description": "Contains information where the contract will be closed automatically at the loss specified by the user.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "display_name": {
                  "description": "Localized display name",
                  "type": "string"
                },
                "display_order_amount": {
                  "description": "Stop loss amount for display purpose.",
                  "type": [
                    "null",
                    "string"
                  ]
                },
                "order_amount": {
                  "description": "Stop loss amount. Will be deprecated soon. Please use [display_order_amount].",
                  "type": [
                    "null",
                    "number"
                  ]
                },
                "order_date": {
                  "description": "Stop loss order epoch",
                  "type": "integer"
                },
                "value": {
                  "description": "Pip-sized barrier value",
                  "type": [
                    "null",
                    "string"
                  ]
                }
              }
            },
            "stop_out": {
              "description": "Contains information where the contract will be closed automatically when the value of the contract is close to zero. This is set by the us.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "display_name": {
                  "description": "Localized display name",
                  "type": "string"
                },
                "display_order_amount": {
                  "description": "Stop out amount for display purpose.",
                  "type": [
                    "null",
                    "string"
                  ]
                },
                "order_amount": {
                  "description": "Stop out amount. Will be deprecated soon. Please use [display_order_amount].",
                  "type": [
                    "null",
                    "number"
                  ]
                },
                "order_date": {
                  "description": "Stop out order epoch",
                  "type": "integer"
                },
                "value": {
                  "description": "Pip-sized barrier value",
                  "type": "string"
                }
              }
            },
            "take_profit": {
              "description": "Contains information where the contract will be closed automatically at the profit specified by the user.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "display_name": {
                  "description": "Localized display name",
                  "type": "string"
                },
                "display_order_amount": {
                  "description": "Take profit amount for display purpose.",
                  "type": [
                    "null",
                    "string"
                  ]
                },
                "order_amount": {
                  "description": "Take profit amount. Will be deprecated soon. Please use [display_order_amount].",
                  "type": [
                    "null",
                    "number"
                  ]
                },
                "order_date": {
                  "description": "Take profit order epoch",
                  "type": "integer"
                },
                "value": {
                  "description": "Pip-sized barrier value",
                  "type": [
                    "null",
                    "string"
                  ]
                }
              }
            }
          }
        },
        "longcode": {
          "description": "Example: Win payout if Random 100 Index is strictly higher than entry spot at 15 minutes after contract start time.",
          "type": "string"
        },
        "max_stake": {
          "description": "[Only for vanilla or turbos options] Maximum stakes allowed",
          "type": "number"
        },
        "min_stake": {
          "description": "[Only for vanilla or turbos options] Minimum stakes allowed",
          "type": "number"
        },
        "multiplier": {
          "description": "[Only for lookback trades] Multiplier applies when calculating the final payoff for each type of lookback. e.g. (Exit spot - Lowest historical price) * multiplier = Payout",
          "type": "number"
        },
        "payout": {
          "description": "The payout amount of the contract.",
          "type": "number",
          "examples": [
            10
          ]
        },
        "payout_choices": {
          "description": "[Only for Turbos] The choices of predefined payout per point for client to choose",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spot": {
          "description": "Spot value (if there are no Exchange data-feed licensing restrictions for the underlying symbol).",
          "type": "number",
          "examples": [
            9874.52
          ]
        },
        "spot_time": {
          "description": "The corresponding time of the spot value.",
          "type": "integer",
          "examples": [
            1439999052
          ]
        },
        "validation_params": {
          "description": "Contains contract validation information.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "max_payout": {
              "description": "[Only for Accumulators] Maximum payout for the contract.",
              "type": "string",
              "examples": "4000.00"
            },
            "max_ticks": {
              "description": "[Only for Accumulators] Maximum ticks for the contract.",
              "type": "integer",
              "examples": 75
            },
            "payout": {
              "description": "Contains information for minimum and maximum payout amount for the contract.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "max": {
                  "description": "Maximum payout allowed",
                  "type": "string",
                  "examples": "1000.00"
                }
              }
            },
            "stake": {
              "description": "Contains information for minimum and maximum stake amount for the contract.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "max": {
                  "description": "Maximum stake allowed",
                  "type": "string",
                  "examples": "1000.00"
                },
                "min": {
                  "description": "Minimum stake allowed",
                  "type": "string",
                  "examples": "0.01"
                }
              }
            },
            "stop_loss": {
              "description": "[Only for Multipliers] Contains information for minimum and maximum stop loss amount for the contract.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "max": {
                  "description": "Maximum stop loss amount",
                  "type": "string",
                  "examples": "1000.00"
                },
                "min": {
                  "description": "Minimum stop loss amount",
                  "type": "string",
                  "examples": "0.51"
                }
              }
            },
            "take_profit": {
              "description": "Contains information for minimum and maximum take profit amount for the contract.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "max": {
                  "description": "Maximum take profit amount",
                  "type": "string",
                  "examples": "1000.00"
                },
                "min": {
                  "description": "Minimum take profit amount",
                  "type": "string",
                  "examples": "0.10"
                }
              }
            }
          }
        }
      }
    },
    "subscription": {
      "title": "Subscription information",
      "description": "For subscription requests only.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "proposal"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Price Proposal: Open Contracts (request)

Get latest price (and other information) for a contract in the user's portfolio
Auth Required: readtrading_information
{}
{}
proposal_open_contract

constant
integer
1
Must be 1
{}
contract_id

integer
[Optional] Contract ID received from a portfolio request. If not set, you will receive stream of all open contracts.
{}
subscribe

constant
integer
1
[Optional] 1 to stream.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Price Proposal: Open Contracts (response)

Latest price and other details for an open contract in the user's portfolio
{}
{}
proposal_open_contract

proposal_open_contract
Latest price and other details for an open contract
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
proposal_open_contract
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Price Proposal: Open Contracts (request)",
  "description": "Get latest price (and other information) for a contract in the user's portfolio",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read",
    "trading_information"
  ],
  "additionalProperties": false,
  "required": [
    "proposal_open_contract"
  ],
  "properties": {
    "proposal_open_contract": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "contract_id": {
      "description": "[Optional] Contract ID received from a `portfolio` request. If not set, you will receive stream of all open contracts.",
      "type": "integer"
    },
    "subscribe": {
      "description": "[Optional] `1` to stream.",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Price Proposal: Open Contracts (response)",
  "description": "Latest price and other details for an open contract in the user's portfolio",
  "type": "object",
  "required": [
    "echo_req"
  ],
  "properties": {
    "proposal_open_contract": {
      "title": "proposal_open_contract",
      "description": "Latest price and other details for an open contract",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "account_id": {
          "description": "Account Id",
          "type": "number"
        },
        "app_markup_amount": {
          "description": "The markup amount charged on a client's stake amount",
          "type": "string"
        },
        "audit_details": {
          "title": "Audit details for expired contract.",
          "description": "Tick details around contract start and end time.",
          "type": [
            "null",
            "object"
          ],
          "additionalProperties": false,
          "properties": {
            "all_ticks": {
              "description": "Ticks for tick expiry contract from start time till expiry.",
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "epoch": {
                    "description": "Epoch time of a tick or the contract start or end time.",
                    "type": "integer"
                  },
                  "flag": {
                    "description": "A flag used to highlight the record in front-end applications.",
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "name": {
                    "description": "A short description of the data. It could be a tick or a time associated with the contract.",
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "tick": {
                    "description": "The spot value at the given epoch.",
                    "type": [
                      "null",
                      "number"
                    ]
                  },
                  "tick_display_value": {
                    "description": "The spot value with the correct precision at the given epoch.",
                    "type": [
                      "null",
                      "string"
                    ]
                  }
                }
              }
            },
            "contract_end": {
              "description": "Ticks around contract end time.",
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "epoch": {
                    "description": "Epoch time of a tick or the contract start or end time.",
                    "type": "integer"
                  },
                  "flag": {
                    "description": "A flag used to highlight the record in front-end applications.",
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "name": {
                    "description": "A short description of the data. It could be a tick or a time associated with the contract.",
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "tick": {
                    "description": "The spot value at the given epoch.",
                    "type": [
                      "null",
                      "number"
                    ]
                  },
                  "tick_display_value": {
                    "description": "The spot value with the correct precision at the given epoch.",
                    "type": [
                      "null",
                      "string"
                    ]
                  }
                }
              }
            },
            "contract_start": {
              "description": "Ticks around contract start time.",
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "epoch": {
                    "description": "Epoch time of a tick or the contract start or end time.",
                    "type": "integer"
                  },
                  "flag": {
                    "description": "A flag used to highlight the record in front-end applications.",
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "name": {
                    "description": "A short description of the data. It could be a tick or a time associated with the contract.",
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "tick": {
                    "description": "The spot value at the given epoch.",
                    "type": [
                      "null",
                      "number"
                    ]
                  },
                  "tick_display_value": {
                    "description": "The spot value with the correct precision at the given epoch.",
                    "type": [
                      "null",
                      "string"
                    ]
                  }
                }
              }
            }
          }
        },
        "barrier": {
          "description": "Barrier of the contract (if any).",
          "type": [
            "null",
            "string"
          ],
          "examples": [
            "42.123"
          ]
        },
        "barrier_count": {
          "description": "The number of barriers a contract has.",
          "type": "number",
          "examples": [
            0,
            1,
            2
          ]
        },
        "barrier_spot_distance": {
          "description": "[Only for accumulator] Absolute difference between high/low barrier and spot",
          "type": "string",
          "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
          "examples": [
            2.123
          ]
        },
        "bid_price": {
          "description": "Price at which the contract could be sold back to the company.",
          "type": "number",
          "examples": [
            5.14
          ]
        },
        "buy_price": {
          "description": "Price at which contract was purchased",
          "type": "number"
        },
        "cancellation": {
          "description": "Contains information about contract cancellation option.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "ask_price": {
              "description": "Ask price of contract cancellation option.",
              "type": "number"
            },
            "date_expiry": {
              "description": "Expiry time in epoch for contract cancellation option.",
              "type": "integer"
            }
          }
        },
        "caution_price": {
          "description": "The caution price for the Snowball contract. Breaching this price will reset the coupons accrued to 0.",
          "type": "string",
          "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
          "examples": [
            "10001.2"
          ]
        },
        "commision": {
          "description": "Commission in payout currency amount.",
          "type": [
            "null",
            "number"
          ]
        },
        "commission": {
          "description": "Commission in payout currency amount.",
          "type": [
            "null",
            "number"
          ]
        },
        "contract_id": {
          "description": "The internal contract identifier",
          "type": "integer"
        },
        "contract_type": {
          "description": "Contract type.",
          "type": "string",
          "examples": [
            "CALL",
            "PUT"
          ]
        },
        "coupon_collection_epochs": {
          "description": "The epoch times at which the coupons will be accrued for the Snowball contract.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "coupon_rate": {
          "description": "The coupon rate for the Snowball contract at which the stake will grow for each coupon accrued.",
          "type": "string",
          "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
          "examples": [
            "0.0132"
          ]
        },
        "currency": {
          "description": "The currency code of the contract.",
          "type": "string",
          "examples": [
            "USD"
          ]
        },
        "current_spot": {
          "description": "Spot value if we have license to stream this symbol.",
          "type": "number",
          "examples": [
            9874.52
          ]
        },
        "current_spot_display_value": {
          "description": "Spot value with the correct precision if we have license to stream this symbol.",
          "type": "string",
          "examples": [
            "9874.520"
          ]
        },
        "current_spot_high_barrier": {
          "description": "[Applicable for accumulator] High barrier based on current spot.",
          "type": "string",
          "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
          "examples": [
            "42.123"
          ]
        },
        "current_spot_low_barrier": {
          "description": "[Applicable for accumulator] Low barrier based on current spot.",
          "type": "string",
          "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
          "examples": [
            "42.123"
          ]
        },
        "current_spot_time": {
          "description": "The corresponding time of the current spot.",
          "type": "integer",
          "examples": [
            1439999052
          ]
        },
        "date_expiry": {
          "description": "Expiry date (epoch) of the Contract. Please note that it is not applicable for tick trade contracts.",
          "type": "integer",
          "examples": [
            1446629000
          ]
        },
        "date_settlement": {
          "description": "Settlement date (epoch) of the contract.",
          "type": "integer",
          "examples": [
            1446629000
          ]
        },
        "date_start": {
          "description": "Start date (epoch) of the contract.",
          "type": "integer",
          "examples": [
            1446629000
          ]
        },
        "display_name": {
          "description": "Display name of underlying",
          "type": "string"
        },
        "display_number_of_contracts": {
          "description": "[Only for vanilla or turbos options] The implied number of contracts",
          "type": "string"
        },
        "display_value": {
          "description": "The `bid_price` with the correct precision",
          "type": "string"
        },
        "entry_spot": {
          "description": "Same as `entry_tick`. For backwards compatibility.",
          "type": [
            "null",
            "number"
          ]
        },
        "entry_spot_display_value": {
          "description": "Same as `entry_tick_display_value`. For backwards compatibility.",
          "type": [
            "null",
            "string"
          ]
        },
        "entry_tick": {
          "description": "This is the entry spot of the contract. For contracts starting immediately it is the next tick after the start time. For forward-starting contracts it is the spot at the start time.",
          "type": "number",
          "examples": [
            86.63
          ]
        },
        "entry_tick_display_value": {
          "description": "This is the entry spot with the correct precision of the contract. For contracts starting immediately it is the next tick after the start time. For forward-starting contracts it is the spot at the start time.",
          "type": "string",
          "examples": [
            "86.630"
          ]
        },
        "entry_tick_time": {
          "description": "This is the epoch time of the entry tick.",
          "type": "integer",
          "examples": [
            1446629000
          ]
        },
        "exit_tick": {
          "description": "Exit tick can refer to the latest tick at the end time, the tick that fulfils the contract's winning or losing condition for path dependent contracts (Touch/No Touch and Stays Between/Goes Outside) or the tick at which the contract is sold before expiry.",
          "type": "number",
          "examples": [
            86.81
          ]
        },
        "exit_tick_display_value": {
          "description": "Exit tick can refer to the latest tick at the end time, the tick that fulfils the contract's winning or losing condition for path dependent contracts (Touch/No Touch and Stays Between/Goes Outside) or the tick at which the contract is sold before expiry.",
          "type": "string",
          "examples": [
            "86.810"
          ]
        },
        "exit_tick_time": {
          "description": "This is the epoch time of the exit tick. Note that since certain instruments don't tick every second, the exit tick time may be a few seconds before the end time.",
          "type": "integer",
          "examples": [
            1446629000
          ]
        },
        "expiry_time": {
          "description": "This is the expiry time.",
          "type": "integer",
          "examples": [
            1446629000
          ]
        },
        "growth_rate": {
          "description": "[Only for accumulator] Growth rate of an accumulator contract.",
          "type": "number"
        },
        "high_barrier": {
          "description": "High barrier of the contract (if any).",
          "type": "string",
          "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
          "examples": [
            "42.123"
          ]
        },
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        },
        "is_expired": {
          "description": "Whether the contract is expired or not.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "is_forward_starting": {
          "description": "Whether the contract is forward-starting or not.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "is_intraday": {
          "description": "Whether the contract is an intraday contract.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "is_path_dependent": {
          "description": "Whether the contract expiry price will depend on the path of the market (e.g. One Touch contract).",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "is_settleable": {
          "description": "Whether the contract is settleable or not.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "is_sold": {
          "description": "Whether the contract is sold or not.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "is_valid_to_cancel": {
          "description": "Whether the contract can be cancelled.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "is_valid_to_sell": {
          "description": "Whether the contract can be sold back to the company.",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "is_valid_to_update": {
          "description": "[Optional] Indicator whether take profit, stop loss, and/or stop out is allowed to be updated.",
          "type": [
            "null",
            "object"
          ],
          "additionalProperties": false,
          "properties": {
            "stop_loss": {
              "description": "[Optional] 1 if stop loss is allowed to be updated and 0 if otherwise. This field is undefined if stop loss functionality is not supported by the contract.",
              "type": [
                "integer",
                "null"
              ],
              "enum": [
                0,
                1
              ]
            },
            "stop_out": {
              "description": "[Optional] 1 if stop out is allowed to be updated and 0 if otherwise. This field is undefined if stop out functionality is not supported by the contract.",
              "type": [
                "integer",
                "null"
              ],
              "enum": [
                0,
                1
              ]
            },
            "take_profit": {
              "description": "[Optional] 1 if take profit is allowed to be updated and 0 if otherwise. This field is undefined if take profit functionality is not supported by the contract.",
              "type": [
                "integer",
                "null"
              ],
              "enum": [
                0,
                1
              ]
            }
          }
        },
        "limit_order": {
          "description": "Orders are applicable to `MULTUP` and `MULTDOWN` contracts only.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "stop_loss": {
              "description": "Contains information where the contract will be closed automatically at the loss specified by the user.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "display_name": {
                  "description": "Localized display name",
                  "type": "string"
                },
                "display_order_amount": {
                  "description": "Stop loss amount for display purpose.",
                  "type": [
                    "null",
                    "string"
                  ]
                },
                "order_amount": {
                  "description": "Stop loss amount. Will be deprecated soon. Please use [display_order_amount].",
                  "type": [
                    "null",
                    "number"
                  ]
                },
                "order_date": {
                  "description": "Stop loss order epoch",
                  "type": "integer"
                },
                "value": {
                  "description": "Pip-sized barrier value",
                  "type": [
                    "null",
                    "string"
                  ]
                }
              }
            },
            "stop_out": {
              "description": "Contains information where the contract will be closed automatically when the value of the contract is close to zero. This is set by the us.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "display_name": {
                  "description": "Localized display name",
                  "type": "string"
                },
                "display_order_amount": {
                  "description": "Stop out amount for display purpose.",
                  "type": [
                    "null",
                    "string"
                  ]
                },
                "order_amount": {
                  "description": "Stop out amount. Will be deprecated soon. Please use [display_order_amount].",
                  "type": [
                    "null",
                    "number"
                  ]
                },
                "order_date": {
                  "description": "Stop out order epoch",
                  "type": "integer"
                },
                "value": {
                  "description": "Pip-sized barrier value",
                  "type": "string"
                }
              }
            },
            "take_profit": {
              "description": "Contain information where the contract will be closed automatically at the profit specified by the user.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "display_name": {
                  "description": "Localized display name",
                  "type": "string"
                },
                "display_order_amount": {
                  "description": "Take profit amount for display purpose.",
                  "type": [
                    "null",
                    "string"
                  ]
                },
                "order_amount": {
                  "description": "Take profit amount. Will be deprecated soon. Please use [display_order_amount].",
                  "type": [
                    "null",
                    "number"
                  ]
                },
                "order_date": {
                  "description": "Take profit order epoch",
                  "type": "integer"
                },
                "value": {
                  "description": "Pip-sized barrier value",
                  "type": [
                    "null",
                    "string"
                  ]
                }
              }
            }
          }
        },
        "longcode": {
          "description": "Text description of the contract purchased, Example: Win payout if Volatility 100 Index is strictly higher than entry spot at 10 minutes after contract start time.",
          "type": "string"
        },
        "low_barrier": {
          "description": "Low barrier of the contract (if any).",
          "type": "string",
          "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
          "examples": [
            "40.132"
          ]
        },
        "multiplier": {
          "description": "[Only for lookback trades] Multiplier applies when calculating the final payoff for each type of lookback. e.g. (Exit spot - Lowest historical price) * multiplier = Payout",
          "type": "number"
        },
        "num_of_coupons": {
          "description": "The maximum number of coupons available for the Snowball contract.",
          "type": "integer",
          "examples": [
            5
          ]
        },
        "payout": {
          "description": "Payout value of the contract.",
          "type": "number",
          "examples": [
            10.5
          ]
        },
        "profit": {
          "description": "The latest bid price minus buy price.",
          "type": "number"
        },
        "profit_percentage": {
          "description": "Profit in percentage.",
          "type": "number"
        },
        "profit_price": {
          "description": "The profit price for the Snowball contract. Breaching this price will close the contract immediately.",
          "type": "string",
          "pattern": "^[+-]?[0-9]+\\.?[0-9]*$",
          "examples": [
            "10005.2"
          ]
        },
        "purchase_time": {
          "description": "Epoch of purchase time, will be same as `date_start` for all contracts except forward starting contracts.",
          "type": "integer"
        },
        "reset_barrier": {
          "description": "[Only for reset trades i.e. RESETCALL and RESETPUT] Reset barrier of the contract.",
          "type": [
            "null",
            "string"
          ],
          "examples": [
            "42.123"
          ]
        },
        "reset_time": {
          "description": "[Only for reset trades i.e. RESETCALL and RESETPUT] The epoch time of a barrier reset.",
          "type": "integer",
          "examples": [
            1446629000
          ]
        },
        "selected_spot": {
          "description": "Spot value at the selected tick for the contract.",
          "type": "number",
          "examples": [
            86.63
          ]
        },
        "selected_tick": {
          "description": "[Only for highlowticks trades i.e. TICKHIGH and TICKLOW] Selected tick for the contract.",
          "type": "integer",
          "examples": [
            3
          ]
        },
        "sell_price": {
          "description": "Price at which contract was sold, only available when contract has been sold.",
          "type": "number"
        },
        "sell_spot": {
          "description": "Latest spot value at the sell time. (only present for contracts already sold). Will no longer be supported in the next API release.",
          "type": "number",
          "examples": [
            86.63
          ]
        },
        "sell_spot_display_value": {
          "description": "Latest spot value with the correct precision at the sell time. (only present for contracts already sold). Will no longer be supported in the next API release.",
          "type": "string",
          "examples": [
            "86.630"
          ]
        },
        "sell_spot_time": {
          "description": "Epoch time of the sell spot. Note that since certain underlyings don't tick every second, the sell spot time may be a few seconds before the sell time. (only present for contracts already sold). Will no longer be supported in the next API release.",
          "type": "integer",
          "examples": [
            1446629000
          ]
        },
        "sell_time": {
          "description": "Epoch time of when the contract was sold (only present for contracts already sold)",
          "type": [
            "integer",
            "null"
          ]
        },
        "shortcode": {
          "description": "Coded description of the contract purchased.",
          "type": "string",
          "examples": [
            "CALL_R_100_90_1446704187_1446704787_S0P_0"
          ]
        },
        "status": {
          "title": "Contract status",
          "description": "Contract status. Will be `sold` if the contract was sold back before expiry, `won` if won and `lost` if lost at expiry. Otherwise will be `open`",
          "type": [
            "null",
            "string"
          ],
          "enum": [
            "open",
            "sold",
            "won",
            "lost",
            "cancelled",
            null
          ]
        },
        "tick_count": {
          "description": "Only for tick trades, number of ticks",
          "type": "integer"
        },
        "tick_passed": {
          "description": "[Only for accumulator] Number of ticks passed since entry_tick",
          "type": "integer",
          "examples": [
            500
          ]
        },
        "tick_stream": {
          "description": "Tick stream from entry to end time.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "epoch": {
                "description": "Epoch time of a tick or the contract start or end time.",
                "type": "integer"
              },
              "tick": {
                "description": "The spot value at the given epoch.",
                "type": [
                  "null",
                  "number"
                ]
              },
              "tick_display_value": {
                "description": "The spot value with the correct precision at the given epoch.",
                "type": [
                  "null",
                  "string"
                ]
              }
            }
          }
        },
        "trade_risk_profile": {
          "description": "The trade risk profile for the Snowball contract.",
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "transaction_ids": {
          "title": "Transaction ids for contract",
          "description": "Every contract has buy and sell transaction ids, i.e. when you purchase a contract we associate it with buy transaction id, and if contract is already sold we associate that with sell transaction id.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "buy": {
              "description": "Buy transaction ID for that contract",
              "type": "integer"
            },
            "sell": {
              "description": "Sell transaction ID for that contract, only present when contract is already sold.",
              "type": "integer"
            }
          }
        },
        "underlying": {
          "description": "The underlying symbol code.",
          "type": "string",
          "examples": [
            "R_50"
          ]
        },
        "validation_error": {
          "description": "Error message if validation fails",
          "type": "string"
        },
        "validation_error_code": {
          "description": "Error code if validation fails",
          "type": "string"
        },
        "validation_params": {
          "description": "Contains contract validation information.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "max_payout": {
              "description": "[Only for Accumulators] Maximum payout for the contract.",
              "type": "string",
              "examples": "4000.00"
            },
            "max_ticks": {
              "description": "[Only for Accumulators] Maximum ticks for the contract.",
              "type": "integer",
              "examples": 75
            },
            "stake": {
              "description": "Contains information for minimum and maximum stake amount for the contract.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "max": {
                  "description": "Maximum stakes allowed",
                  "type": "string",
                  "examples": "1000.00"
                },
                "min": {
                  "description": "Minimum stakes allowed",
                  "type": "string",
                  "examples": "0.01"
                }
              }
            },
            "stop_loss": {
              "description": "[Only for Multipliers] Contains information for minimum and maximum stop loss amount for the contract.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "max": {
                  "description": "Maximum stop loss amount",
                  "type": "string",
                  "examples": "1000.00"
                },
                "min": {
                  "description": "Minimum stop loss amount",
                  "type": "string",
                  "examples": "0.51"
                }
              }
            },
            "take_profit": {
              "description": "Contains information for minimum and maximum take profit amount for the contract.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "max": {
                  "description": "Maximum take profit amount",
                  "type": "string",
                  "examples": "1000.00"
                },
                "min": {
                  "description": "Minimum take profit amount",
                  "type": "string",
                  "examples": "0.10"
                }
              }
            }
          }
        }
      }
    },
    "subscription": {
      "title": "Subscription information",
      "description": "For subscription requests only.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "proposal_open_contract"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Reality Check (request)

Retrieve summary of client's trades and account for the Reality Check facility. A 'reality check' means a display of time elapsed since the session began, and associated client profit/loss. The Reality Check facility is a regulatory requirement for certain landing companies.
Auth Required: readtrading_information
{}
{}
reality_check

constant
integer
1
Must be 1
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Reality Check (response)

This gives summary of client's trades and account for reality check
{}
{}
reality_check

reality_check
Reality check summary of trades.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
reality_check
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Reality Check (request)",
  "description": "Retrieve summary of client's trades and account for the Reality Check facility. A 'reality check' means a display of time elapsed since the session began, and associated client profit/loss. The Reality Check facility is a regulatory requirement for certain landing companies.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read",
    "trading_information"
  ],
  "additionalProperties": false,
  "required": [
    "reality_check"
  ],
  "properties": {
    "reality_check": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Reality Check (response)",
  "description": "This gives summary of client's trades and account for reality check",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "reality_check": {
      "title": "reality_check",
      "description": "Reality check summary of trades.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "buy_amount": {
          "description": "Total amount of contract purchased.",
          "type": "number"
        },
        "buy_count": {
          "description": "Total count of contract purchased.",
          "type": "integer"
        },
        "currency": {
          "description": "Currency of client account i.e currency for trading",
          "type": "string"
        },
        "loginid": {
          "description": "Client loginid.",
          "type": "string",
          "examples": [
            "CR000000"
          ]
        },
        "open_contract_count": {
          "description": "Total count of contracts that are not yet expired.",
          "type": "integer"
        },
        "potential_profit": {
          "description": "Indicative profit of contract as per current market price.",
          "type": "number"
        },
        "sell_amount": {
          "description": "Total amount of contracts sold.",
          "type": "number"
        },
        "sell_count": {
          "description": "Total count of contract sold.",
          "type": "integer"
        },
        "start_time": {
          "description": "Reality check summary start time epoch",
          "type": "integer"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "reality_check"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Countries List (request)

This call returns a list of countries and 2-letter country codes, suitable for populating the account opening form.
{}
{}
residence_list

constant
integer
1
Must be 1
{}
query

array
string
[Optional] Specific keys from the response that you want. If not passed, it will return all the keys.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Countries List (response)

A message with Residence List
{}
{}
residence_list

array
residence_list
List of countries for account opening
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
residence_list
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Countries List (request)",
  "description": "This call returns a list of countries and 2-letter country codes, suitable for populating the account opening form.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "residence_list"
  ],
  "properties": {
    "residence_list": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "query": {
      "description": "[Optional] Specific keys from the response that you want. If not passed, it will return all the keys.",
      "type": "array",
      "items": {
        "description": "Keys that you need back in response.",
        "type": "string",
        "enum": [
          "account_opening_self_declaration_required",
          "common_reporting_standard",
          "disabled",
          "identity",
          "jurisdiction_risk_assessment",
          "phone_idd",
          "selected",
          "text",
          "tin_format",
          "value",
          "wallet_signup"
        ]
      }
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Countries List (response)",
  "description": "A message with Residence List",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "residence_list": {
      "title": "residence_list",
      "description": "List of countries for account opening",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "account_opening_self_declaration_required": {
            "description": "Flag which indicates whether self declaration is required for account opening",
            "type": "integer",
            "enum": [
              0,
              1
            ]
          },
          "common_reporting_standard": {
            "description": "Common Reporting Standard",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "non_participating_jurisdictions": {
                "description": "NPJ configuration",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "default": {
                    "description": "Default NPJ flag",
                    "type": "boolean"
                  },
                  "landing_company": {
                    "description": "Flags for specific landing companies",
                    "type": "object",
                    "patternProperties": {
                      "^[a-z]{1,10}$": {
                        "description": "Landing company NPJ flag",
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "postcode": {
                "description": "Postcode configuration",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "invalid_pattern": {
                    "description": "Invalid regex patterns for postcode validation",
                    "type": [
                      "null",
                      "string"
                    ]
                  }
                }
              },
              "tax": {
                "description": "Tax configuration",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "mandatory": {
                    "description": "Mandatory TIN flag",
                    "type": "boolean"
                  },
                  "poi_equivalent": {
                    "description": "POI equivalent flag",
                    "type": "boolean"
                  },
                  "tin_cleaner": {
                    "description": "Cleanup regex",
                    "type": "string"
                  },
                  "tin_format": {
                    "description": "Country tax identifier format",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tin_format_description": {
                    "description": "Description of the TIN format",
                    "type": [
                      "null",
                      "string"
                    ]
                  }
                }
              }
            }
          },
          "disabled": {
            "description": "Disabled.",
            "type": "string"
          },
          "identity": {
            "description": "Information about identity options available",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "services": {
                "description": "Identity services configuration",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "idv": {
                    "description": "IDV configuration",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "documents_supported": {
                        "description": "Documents supported by the IDV service in this country",
                        "type": "object",
                        "patternProperties": {
                          "^\\w+$": {
                            "description": "Document type",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "additional": {
                                "description": "[Optional] Additional input required from the user",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "display_name": {
                                    "description": "The localized display name",
                                    "type": "string"
                                  },
                                  "format": {
                                    "description": "[Optional] Regex pattern to validate documents",
                                    "type": "string"
                                  }
                                }
                              },
                              "display_name": {
                                "description": "The localized display name",
                                "type": "string"
                              },
                              "format": {
                                "description": "[Optional] Regex pattern to validate documents",
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "has_visual_sample": {
                        "description": "Flag which indicates whether this country has IDV visual samples",
                        "type": "integer",
                        "enum": [
                          0,
                          1
                        ]
                      },
                      "is_country_supported": {
                        "description": "Flag which indicates whether IDV is available in this country",
                        "type": "integer",
                        "enum": [
                          0,
                          1
                        ]
                      }
                    }
                  },
                  "onfido": {
                    "description": "Onfido configuration",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "documents_supported": {
                        "description": "Documents supported by the IDV service in this country",
                        "type": "object",
                        "patternProperties": {
                          "^\\w+$": {
                            "description": "Document type",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "display_name": {
                                "description": "The localized display name",
                                "type": "string"
                              },
                              "format": {
                                "description": "[Optional] Regex pattern to validate documents",
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "is_country_supported": {
                        "description": "Flag which indicates whether Onfido is available in this country",
                        "type": "integer",
                        "enum": [
                          0,
                          1
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "jurisdiction_risk_assessment": {
            "description": "Jurisdiction Risk Assessment",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "disclaimer": {
                "description": "Disclaimer configuration",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "accept": {
                    "description": "Disclaimer flag",
                    "type": "boolean"
                  },
                  "message": {
                    "description": "Disclaimer message",
                    "type": "string"
                  }
                }
              },
              "risk_level": {
                "description": "Risk level configuration",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "default": {
                    "description": "Default risk level flag",
                    "type": "string"
                  },
                  "landing_company": {
                    "description": "Flags for specific landing companies",
                    "type": "object",
                    "patternProperties": {
                      "^[a-z]{1,10}$": {
                        "description": "Landing company risk level flag",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "turnover": {
                "description": "Turnover configuration",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "max_limit": {
                    "description": "Max limit",
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "partner_signup": {
            "description": "Flag which indicates whether partner signup is available in this country",
            "type": "integer",
            "enum": [
              0,
              1
            ]
          },
          "phone_idd": {
            "description": "IDD code of country",
            "type": [
              "null",
              "string"
            ]
          },
          "selected": {
            "description": "Selected.",
            "type": "string"
          },
          "text": {
            "description": "Country full name",
            "type": "string"
          },
          "tin_format": {
            "description": "Country tax identifier format",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "value": {
            "description": "2-letter country code",
            "type": "string",
            "pattern": "^\\w\\w$"
          },
          "wallet_signup": {
            "description": "Flag which indicates whether wallet signup is available in this country",
            "type": "integer",
            "enum": [
              1
            ]
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "residence_list"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Revoke Oauth Application (request)

Used for revoking access of particular app.
Auth Required: admin
{}
{}
revoke_oauth_app

integer
The application ID to revoke.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Revoke Oauth Application (response)

A message with revoking a used application
{}
{}
revoke_oauth_app

integer
1 on success
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
revoke_oauth_app
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Revoke Oauth Application (request)",
  "description": "Used for revoking access of particular app.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "admin"
  ],
  "additionalProperties": false,
  "required": [
    "revoke_oauth_app"
  ],
  "properties": {
    "revoke_oauth_app": {
      "description": "The application ID to revoke.",
      "type": "integer"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Revoke Oauth Application (response)",
  "description": "A message with revoking a used application",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "revoke_oauth_app": {
      "title": "revoke_oauth_app",
      "description": "`1` on success",
      "type": "integer"
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "revoke_oauth_app"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Sell Contract (request)

Sell a Contract as identified from a previous `portfolio` call.
Auth Required: trade
{}
{}
sell

integer
Pass contract_id received from the portfolio call.
{}
price

number
Minimum price at which to sell the contract, or 0 for 'sell at market'.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Sell Contract (response)

A message with transaction results is received
{}
{}
sell

sell
Receipt for the transaction
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
sell
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Sell Contract (request)",
  "description": "Sell a Contract as identified from a previous `portfolio` call.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "trade"
  ],
  "additionalProperties": false,
  "required": [
    "sell",
    "price"
  ],
  "properties": {
    "sell": {
      "description": "Pass contract_id received from the `portfolio` call.",
      "type": "integer"
    },
    "price": {
      "description": "Minimum price at which to sell the contract, or `0` for 'sell at market'.",
      "type": "number"
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Sell Contract (response)",
  "description": "A message with transaction results is received",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "sell": {
      "title": "sell",
      "description": "Receipt for the transaction",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "balance_after": {
          "description": "New account balance after completion of the sale",
          "type": "number"
        },
        "contract_id": {
          "description": "Internal contract identifier for the sold contract",
          "type": "integer"
        },
        "reference_id": {
          "description": "Internal transaction identifier for the corresponding buy transaction",
          "type": "integer"
        },
        "sold_for": {
          "description": "Actual effected sale price",
          "type": "number"
        },
        "transaction_id": {
          "description": "Internal transaction identifier for the sale transaction",
          "type": "integer"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "sell"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Set Self-Exclusion (request)

Set Self-Exclusion (this call should be used in conjunction with `get_self_exclusion`)
Auth Required: admin
{}
{}
set_self_exclusion

constant
integer
1
Must be 1
{}
exclude_until

null, string
^[0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$
[Optional] Exclude me from the website (for a minimum of 6 months, up to a maximum of 5 years). Note: uplifting this self-exclusion may require contacting the company.
{}
max_30day_deposit

null, number
[Optional] 7-day limit on deposits.
{}
max_30day_losses

null, number
[Optional] 30-day limit on losses.
{}
max_30day_turnover

null, number
[Optional] 30-day turnover limit.
{}
max_7day_deposit

null, number
[Optional] 7-day limit on deposits.
{}
max_7day_losses

null, number
[Optional] 7-day limit on losses.
{}
max_7day_turnover

null, number
[Optional] 7-day turnover limit.
{}
max_balance

null, number
[Optional] Maximum account cash balance.
{}
max_deposit

null, number
[Optional] Daily deposit limit.
{}
max_losses

null, number
[Optional] Daily limit on losses.
{}
max_open_bets

integer, null
[Optional] Maximum number of open positions.
{}
max_turnover

null, number
[Optional] Daily turnover limit.
{}
session_duration_limit

integer, null
[Optional] Session duration limit, in minutes.
{}
timeout_until

integer, null
[Optional] Exclude me from the website (for up to 6 weeks). Requires time in epoch format. Note: unlike exclude_until, this self-exclusion will be lifted automatically at the expiry of the timeout period.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Set Self-Exclusion (response)

A message with User Self-Exclusion
{}
{}
set_self_exclusion

integer
1 on success
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
set_self_exclusion
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Set Self-Exclusion (request)",
  "description": "Set Self-Exclusion (this call should be used in conjunction with `get_self_exclusion`)",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "admin"
  ],
  "additionalProperties": false,
  "required": [
    "set_self_exclusion"
  ],
  "properties": {
    "set_self_exclusion": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "exclude_until": {
      "description": "[Optional] Exclude me from the website (for a minimum of 6 months, up to a maximum of 5 years). Note: uplifting this self-exclusion may require contacting the company.",
      "type": [
        "null",
        "string"
      ],
      "pattern": "^[0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$"
    },
    "max_30day_deposit": {
      "description": "[Optional] 7-day limit on deposits.",
      "type": [
        "null",
        "number"
      ]
    },
    "max_30day_losses": {
      "description": "[Optional] 30-day limit on losses.",
      "type": [
        "null",
        "number"
      ]
    },
    "max_30day_turnover": {
      "description": "[Optional] 30-day turnover limit.",
      "type": [
        "null",
        "number"
      ]
    },
    "max_7day_deposit": {
      "description": "[Optional] 7-day limit on deposits.",
      "type": [
        "null",
        "number"
      ]
    },
    "max_7day_losses": {
      "description": "[Optional] 7-day limit on losses.",
      "type": [
        "null",
        "number"
      ]
    },
    "max_7day_turnover": {
      "description": "[Optional] 7-day turnover limit.",
      "type": [
        "null",
        "number"
      ]
    },
    "max_balance": {
      "description": "[Optional] Maximum account cash balance.",
      "type": [
        "null",
        "number"
      ]
    },
    "max_deposit": {
      "description": "[Optional] Daily deposit limit.",
      "type": [
        "null",
        "number"
      ]
    },
    "max_losses": {
      "description": "[Optional] Daily limit on losses.",
      "type": [
        "null",
        "number"
      ]
    },
    "max_open_bets": {
      "description": "[Optional] Maximum number of open positions.",
      "type": [
        "integer",
        "null"
      ],
      "minimum": 0
    },
    "max_turnover": {
      "description": "[Optional] Daily turnover limit.",
      "type": [
        "null",
        "number"
      ]
    },
    "session_duration_limit": {
      "description": "[Optional] Session duration limit, in minutes.",
      "type": [
        "integer",
        "null"
      ],
      "maximum": 99999,
      "minimum": 0
    },
    "timeout_until": {
      "description": "[Optional] Exclude me from the website (for up to 6 weeks). Requires time in epoch format. Note: unlike `exclude_until`, this self-exclusion will be lifted automatically at the expiry of the timeout period.",
      "type": [
        "integer",
        "null"
      ],
      "maximum": 9999999999,
      "minimum": 0
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Set Self-Exclusion (response)",
  "description": "A message with User Self-Exclusion",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "set_self_exclusion": {
      "title": "set_self_exclusion",
      "description": "`1` on success",
      "type": "integer"
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "set_self_exclusion"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Statement (request)

Retrieve a summary of account transactions, according to given search criteria
Auth Required: readtrading_information
{}
{}
statement

constant
integer
1
Must be 1
{}
action_type

enum
string
buy
sell
deposit
withdrawal
escrow
adjustment
virtual_credit
transfer
[Optional] To filter the statement according to the type of transaction.
{}
date_from

integer
[Optional] Start date (epoch)
{}
date_to

integer
[Optional] End date (epoch)
{}
description

enum
integer
0
1
[Optional] If set to 1, will return full contracts description.
{}
limit

number
default:
100
[Optional] Maximum number of transactions to receive.
{}
offset

integer
[Optional] Number of transactions to skip.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Statement (response)

A summary of account statement is received
{}
{}
statement

statement
Account statement.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
statement
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Statement (request)",
  "description": "Retrieve a summary of account transactions, according to given search criteria",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read",
    "trading_information"
  ],
  "additionalProperties": false,
  "required": [
    "statement"
  ],
  "properties": {
    "statement": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "action_type": {
      "description": "[Optional] To filter the statement according to the type of transaction.",
      "type": "string",
      "enum": [
        "buy",
        "sell",
        "deposit",
        "withdrawal",
        "escrow",
        "adjustment",
        "virtual_credit",
        "transfer"
      ]
    },
    "date_from": {
      "description": "[Optional] Start date (epoch)",
      "type": "integer",
      "maximum": 9999999999,
      "minimum": 0
    },
    "date_to": {
      "description": "[Optional] End date (epoch)",
      "type": "integer",
      "maximum": 9999999999,
      "minimum": 0
    },
    "description": {
      "description": "[Optional] If set to 1, will return full contracts description.",
      "type": "integer",
      "enum": [
        0,
        1
      ]
    },
    "limit": {
      "description": "[Optional] Maximum number of transactions to receive.",
      "type": "number",
      "default": 100,
      "maximum": 999,
      "minimum": 0
    },
    "offset": {
      "description": "[Optional] Number of transactions to skip.",
      "type": "integer",
      "minimum": 0
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Statement (response)",
  "description": "A summary of account statement is received",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "statement": {
      "title": "statement",
      "description": "Account statement.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "count": {
          "description": "Number of transactions returned in this call",
          "type": "number"
        },
        "transactions": {
          "description": "Array of returned transactions",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "action_type": {
                "description": "It is the type of action.",
                "type": "string",
                "enum": [
                  "buy",
                  "sell",
                  "deposit",
                  "withdrawal",
                  "hold",
                  "release",
                  "adjustment",
                  "virtual_credit",
                  "transfer"
                ]
              },
              "amount": {
                "description": "It is the amount of transaction.",
                "type": "number",
                "examples": [
                  -83.23
                ]
              },
              "app_id": {
                "description": "ID of the application where this contract was purchased.",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "balance_after": {
                "description": "It is the remaining balance.",
                "type": "number",
                "examples": [
                  10150.13
                ]
              },
              "contract_id": {
                "description": "It is the contract ID.",
                "type": [
                  "integer",
                  "null"
                ],
                "examples": [
                  4867502908
                ]
              },
              "fees": {
                "description": "Contains details about fees used for transfer. It is present only when action type is transfer.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "Fees amount",
                    "type": "number"
                  },
                  "currency": {
                    "description": "Fees currency",
                    "type": "string"
                  },
                  "minimum": {
                    "description": "Minimum amount of fees",
                    "type": "number"
                  },
                  "percentage": {
                    "description": "Fees percentage",
                    "type": "number"
                  }
                }
              },
              "from": {
                "description": "Contains details of account from which amount was transferred. It is present only when action type is transfer.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "loginid": {
                    "description": "Login id of the account from which money was transferred.",
                    "type": "string"
                  }
                }
              },
              "longcode": {
                "description": "The description of contract purchased if description is set to `1`.",
                "type": "string"
              },
              "payout": {
                "description": "Payout price",
                "type": [
                  "null",
                  "number"
                ]
              },
              "purchase_time": {
                "description": "Time at which contract was purchased, present only for sell transaction",
                "type": "integer"
              },
              "reference_id": {
                "description": "Internal transaction identifier for the corresponding buy transaction ( set only for contract selling )",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "shortcode": {
                "description": "Compact description of the contract purchased if description is set to `1`.",
                "type": [
                  "null",
                  "string"
                ]
              },
              "to": {
                "description": "Contains details of account to which amount was transferred. It is present only when action type is transfer.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "loginid": {
                    "description": "Login id of the account to which money was transferred.",
                    "type": "string"
                  }
                }
              },
              "transaction_id": {
                "description": "It is the transaction ID. In statement every contract (buy or sell) and every payment has a unique ID.",
                "type": "integer",
                "examples": [
                  10867502908
                ]
              },
              "transaction_time": {
                "description": "It is the time of transaction.",
                "type": "integer",
                "examples": [
                  1441175849
                ]
              },
              "withdrawal_details": {
                "description": "Additional withdrawal details such as typical processing times, if description is set to `1`.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "statement"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}



States List (request)

For a given country, returns a list of States of that country. This is useful to populate the account opening form.
{}
{}
states_list

string
^\w\w$
Client's 2-letter country code (obtained from residence_list call)
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
States List (response)

A message with States List
{}
{}
states_list

array
states_list
List of states.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
states_list
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "States List (request)",
  "description": "For a given country, returns a list of States of that country. This is useful to populate the account opening form.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "states_list"
  ],
  "properties": {
    "states_list": {
      "title": "States list",
      "description": "Client's 2-letter country code (obtained from `residence_list` call)",
      "type": "string",
      "pattern": "^\\w\\w$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "States List (response)",
  "description": "A message with States List",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "states_list": {
      "title": "states_list",
      "description": "List of states.",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "text": {
            "description": "The state name.",
            "type": "string"
          },
          "value": {
            "description": "The state code.",
            "type": "string"
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "states_list"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Ticks Stream (request)

Initiate a continuous stream of spot price updates for a given symbol.
{}
{}
ticks

one of
string
^\w{2,30}$
array
The short symbol name or array of symbols (obtained from active_symbols call).
{}
subscribe

constant
integer
1
[Optional] If set to 1, will send updates whenever a new tick is received.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Ticks Stream (response)

Latest spot price for a given symbol. Continuous responses with a frequency of up to one second.
{}
{}
tick

tick
Tick by tick list of streamed data
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
tick
Type of the response.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Ticks Stream (request)",
  "description": "Initiate a continuous stream of spot price updates for a given symbol.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "ticks"
  ],
  "properties": {
    "ticks": {
      "description": "The short symbol name or array of symbols (obtained from `active_symbols` call).",
      "oneOf": [
        {
          "type": "string",
          "pattern": "^\\w{2,30}$"
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^\\w{2,30}$"
          }
        }
      ]
    },
    "subscribe": {
      "description": "[Optional] If set to 1, will send updates whenever a new tick is received.",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Ticks Stream (response)",
  "description": "Latest spot price for a given symbol. Continuous responses with a frequency of up to one second.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "tick": {
      "title": "TickSpotData",
      "description": "Tick by tick list of streamed data",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "pip_size"
      ],
      "properties": {
        "ask": {
          "description": "Market ask at the epoch",
          "type": "number"
        },
        "bid": {
          "description": "Market bid at the epoch",
          "type": "number"
        },
        "epoch": {
          "description": "Epoch time of the tick",
          "type": "integer"
        },
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        },
        "pip_size": {
          "description": "Indicates the number of decimal points that the returned amounts must be displayed with",
          "type": "number"
        },
        "quote": {
          "description": "Market value at the epoch",
          "type": "number"
        },
        "symbol": {
          "description": "Symbol",
          "type": "string"
        }
      }
    },
    "subscription": {
      "title": "Subscription information",
      "description": "For subscription requests only.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Type of the response.",
      "type": "string",
      "enum": [
        "tick"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


icks Batch Stream (request)

Initiate a continuous stream of spot price updates for a group symbols.
{}
{}
ticks_batch

constant
integer
1
Must be 1
{}
market

enum
string
forex
indices
commodities
stocks
cryptocurrency
synthetic_index
The short market name.
{}
subscribe

constant
integer
1
[Optional] If set to 1, will send updates in batches by market.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Ticks Batch Stream (response)

Latest spot price for a group symbols. Continuous responses with a frequency of up to one second.
{}
{}
ticks_batch

array
ticks_batch
Tick by tick list of streamed data for a group of symbols
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
ticks_batch
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Ticks Batch Stream (request)",
  "description": "Initiate a continuous stream of spot price updates for a group symbols.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "ticks_batch",
    "market"
  ],
  "properties": {
    "ticks_batch": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "market": {
      "description": "The short market name.",
      "type": "string",
      "enum": [
        "forex",
        "indices",
        "commodities",
        "stocks",
        "cryptocurrency",
        "synthetic_index"
      ]
    },
    "subscribe": {
      "description": "[Optional] If set to 1, will send updates in batches by market.",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Ticks Batch Stream (response)",
  "description": "Latest spot price for a group symbols. Continuous responses with a frequency of up to one second.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "ticks_batch": {
      "title": "ticks_batch",
      "description": "Tick by tick list of streamed data for a group of symbols",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ask",
          "bid",
          "change",
          "epoch",
          "quote",
          "symbol"
        ],
        "properties": {
          "ask": {
            "description": "Market ask at the epoch",
            "type": "string"
          },
          "bid": {
            "description": "Market bid at the epoch",
            "type": "string"
          },
          "change": {
            "description": "Daily percentage change",
            "type": "string"
          },
          "epoch": {
            "description": "Epoch time of the tick",
            "type": "integer"
          },
          "quote": {
            "description": "Market value at the epoch",
            "type": "string"
          },
          "symbol": {
            "description": "Symbol",
            "type": "string"
          }
        }
      }
    },
    "subscription": {
      "title": "Subscription information",
      "description": "For subscription requests only.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "ticks_batch"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Ticks History (request)

Get historic tick data for a given symbol.
{}
{}
ticks_history

string
^\w{2,30}$
Short symbol name (obtained from the active_symbols call).
{}
adjust_start_time

constant
integer
1
[Optional] 1 - if the market is closed at the end time, or license limit is before end time, adjust interval backwards to compensate.
{}
count

integer
default:
5000
[Optional] An upper limit on ticks to receive.
{}
end

string
^(latest|[0-9]{1,10})$
Epoch value representing the latest boundary of the returned ticks. If latest is specified, this will be the latest available timestamp.
{}
granularity

enum
integer
60
120
180
300
600
900
1800
3600
7200
14400
28800
86400
[Optional] Only applicable for style: candles. Candle time-dimension width setting. (default: 60).
{}
start

integer
[Optional] Epoch value representing the earliest boundary of the returned ticks. 
- For "style": "ticks": this will default to 1 day ago.
- For "style": "candles": it will default to 1 day ago if count or granularity is undefined.
{}
style

enum
string
candles
ticks
default:
ticks
[Optional] The tick-output style.
{}
subscribe

constant
integer
1
[Optional] 1 - to send updates whenever a new tick is received.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Ticks History (response)

Historic tick data for a single symbol
{}
{}
candles

array
candles
Array of OHLC (open/high/low/close) price values for the given time (only for style=candles)
{}
history

history
Historic tick data for a given symbol. Note: this will always return the latest possible set of ticks with accordance to the parameters specified.
{}
pip_size

number
Indicates the number of decimal points that the returned amounts must be displayed with
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

enum
string
history
tick
candles
ohlc
Type of the response according to the style sent in request. Would be history or candles for the first response, and tick or ohlc for the rest when subscribed.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Ticks History (request)",
  "description": "Get historic tick data for a given symbol.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "ticks_history",
    "end"
  ],
  "properties": {
    "ticks_history": {
      "description": "Short symbol name (obtained from the `active_symbols` call).",
      "type": "string",
      "pattern": "^\\w{2,30}$"
    },
    "adjust_start_time": {
      "description": "[Optional] 1 - if the market is closed at the end time, or license limit is before end time, adjust interval backwards to compensate.",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "count": {
      "description": "[Optional] An upper limit on ticks to receive.",
      "type": "integer",
      "default": "5000"
    },
    "end": {
      "description": "Epoch value representing the latest boundary of the returned ticks. If `latest` is specified, this will be the latest available timestamp.",
      "type": "string",
      "pattern": "^(latest|[0-9]{1,10})$"
    },
    "granularity": {
      "description": "[Optional] Only applicable for style: `candles`. Candle time-dimension width setting. (default: `60`).",
      "type": "integer",
      "enum": [
        60,
        120,
        180,
        300,
        600,
        900,
        1800,
        3600,
        7200,
        14400,
        28800,
        86400
      ]
    },
    "start": {
      "description": "[Optional] Epoch value representing the earliest boundary of the returned ticks. \n- For `\"style\": \"ticks\"`: this will default to 1 day ago.\n- For `\"style\": \"candles\"`: it will default to 1 day ago if count or granularity is undefined.",
      "type": "integer",
      "maximum": 9999999999,
      "minimum": 0
    },
    "style": {
      "description": "[Optional] The tick-output style.",
      "type": "string",
      "default": "ticks",
      "enum": [
        "candles",
        "ticks"
      ]
    },
    "subscribe": {
      "description": "[Optional] 1 - to send updates whenever a new tick is received.",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Ticks History (response)",
  "description": "Historic tick data for a single symbol",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "candles": {
      "title": "candles",
      "description": "Array of OHLC (open/high/low/close) price values for the given time (only for style=`candles`)",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "close": {
            "description": "It is the close price value for the given time",
            "type": "number"
          },
          "epoch": {
            "description": "It is an epoch value",
            "type": "integer"
          },
          "high": {
            "description": "It is the high price value for the given time",
            "type": "number"
          },
          "low": {
            "description": "It is the low price value for the given time",
            "type": "number"
          },
          "open": {
            "description": "It is the open price value for the given time",
            "type": "number"
          }
        }
      }
    },
    "history": {
      "title": "history",
      "description": "Historic tick data for a given symbol. Note: this will always return the latest possible set of ticks with accordance to the parameters specified.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "prices": {
          "description": "An array containing list of tick values for the corresponding epoch values in `times` array.",
          "type": "array",
          "items": {
            "description": "Tick value.",
            "type": "number"
          }
        },
        "times": {
          "description": "An array containing list of epoch values for the corresponding tick values in `prices` array.",
          "type": "array",
          "items": {
            "description": "Epoch of the tick.",
            "type": "integer"
          }
        }
      }
    },
    "pip_size": {
      "description": "Indicates the number of decimal points that the returned amounts must be displayed with",
      "type": "number"
    },
    "subscription": {
      "title": "Subscription information",
      "description": "For subscription requests only.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Type of the response according to the `style` sent in request. Would be `history` or `candles` for the first response, and `tick` or `ohlc` for the rest when subscribed.",
      "type": "string",
      "enum": [
        "history",
        "tick",
        "candles",
        "ohlc"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Server Time (request)

Request back-end server epoch time.
{}
{}
time

constant
integer
1
Must be 1
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Server Time (response)

The result of server time request.
{}
{}
time

integer
Epoch of server time.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
time
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Server Time (request)",
  "description": "Request back-end server epoch time.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "time"
  ],
  "properties": {
    "time": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Server Time (response)",
  "description": "The result of server time request.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "time": {
      "title": "time",
      "description": "Epoch of server time.",
      "type": "integer"
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "time"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Tax Identification Number Validations (request)

Get the validations for Tax Identification Numbers (TIN)
{}
{}
tin_validations

constant
integer
1
Must be 1
{}
tax_residence

string
The tax residence selected by the client.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Tax Identification Number Validations (response)

A message with validations for Tax Identification Numbers (TIN)
{}
{}
tin_validations

tin_validations
Validations for Tax Identification Numbers (TIN)
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
tin_validations
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Tax Identification Number Validations (request)",
  "description": "Get the validations for Tax Identification Numbers (TIN)",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "tin_validations",
    "tax_residence"
  ],
  "properties": {
    "tin_validations": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "tax_residence": {
      "description": "The tax residence selected by the client.",
      "type": "string"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Tax Identification Number Validations (response)",
  "description": "A message with validations for Tax Identification Numbers (TIN)",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "tin_validations": {
      "title": "tin_validations",
      "description": "Validations for Tax Identification Numbers (TIN)",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "invalid_patterns": {
          "description": "Invalid regex patterns for tin validation",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_tin_mandatory": {
          "description": "Whether the TIN is mandatory for the selected country",
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "tin_employment_status_bypass": {
          "description": "List of employment statuses that bypass TIN requirements for the selected country",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tin_format": {
          "description": "Country tax identifier formats.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "tin_validations"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Top Up Virtual-Money Account (request)

When a virtual-money's account balance becomes low, it can be topped up using this call.
Auth Required: trade
{}
{}
topup_virtual

constant
integer
1
Must be 1
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Top Up Virtual-Money Account (response)

The result of virtual money top up
{}
{}
topup_virtual

topup_virtual
The information regarding a successful top up for a virtual money account
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
topup_virtual
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Top Up Virtual-Money Account (request)",
  "description": "When a virtual-money's account balance becomes low, it can be topped up using this call.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "trade"
  ],
  "additionalProperties": false,
  "required": [
    "topup_virtual"
  ],
  "properties": {
    "topup_virtual": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Top Up Virtual-Money Account (response)",
  "description": "The result of virtual money top up",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "topup_virtual": {
      "title": "topup_virtual",
      "description": "The information regarding a successful top up for a virtual money account",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "amount": {
          "description": "Top up amount",
          "type": "number"
        },
        "currency": {
          "description": "Top up currency string",
          "type": "string"
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "topup_virtual"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Trading Durations (request)

Retrieve a list of all available underlyings and the corresponding contract types and trading duration boundaries. If the user is logged in, only the assets available for that user's landing company will be returned.
{}
{}
trading_durations

constant
integer
1
Must be 1
{}
landing_company

enum
string
iom
malta
maltainvest
svg
virtual
vanuatu
Deprecated - Replaced by landing_company_short.
{}
landing_company_short

enum
string
iom
malta
maltainvest
svg
virtual
vanuatu
[Optional] If specified, will return only the underlyings for the specified landing company.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Trading Durations (response)

A message with trading duration information for symbol and contract combinations.
{}
{}
trading_durations

array
trading_durations
List of underlyings by their display name and symbol followed by their available contract types and trading duration boundaries.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
trading_durations
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.



{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Trading Durations (request)",
  "description": "Retrieve a list of all available underlyings and the corresponding contract types and trading duration boundaries. If the user is logged in, only the assets available for that user's landing company will be returned.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "trading_durations"
  ],
  "properties": {
    "trading_durations": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "landing_company": {
      "description": "Deprecated - Replaced by landing_company_short.",
      "type": "string",
      "enum": [
        "iom",
        "malta",
        "maltainvest",
        "svg",
        "virtual",
        "vanuatu"
      ]
    },
    "landing_company_short": {
      "description": "[Optional] If specified, will return only the underlyings for the specified landing company.",
      "type": "string",
      "enum": [
        "iom",
        "malta",
        "maltainvest",
        "svg",
        "virtual",
        "vanuatu"
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Trading Durations (response)",
  "description": "A message with trading duration information for symbol and contract combinations.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "trading_durations": {
      "title": "trading_durations",
      "description": "List of underlyings by their display name and symbol followed by their available contract types and trading duration boundaries.",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "title": "data",
            "description": "Available contract types and trading duration boundaries",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "market": {
                  "description": "The market in which the underlyings listed in `symbol` located.",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "display_name": {
                      "description": "Translated market name.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Market name.",
                      "type": "string"
                    }
                  }
                },
                "submarket": {
                  "description": "The submarket in which the underlyings listed in `symbol` located.",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "display_name": {
                      "description": "Translated submarket name.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Submarket name.",
                      "type": "string"
                    }
                  }
                },
                "symbol": {
                  "description": "List of underlying symbols.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "display_name": {
                        "description": "Translated symbol name.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Symbol name.",
                        "type": "string"
                      }
                    }
                  }
                },
                "trade_durations": {
                  "description": "List of trade durations available for symbols and contract combinations.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "durations": {
                        "description": "List of trade durations available for the symbols.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "display_name": {
                              "description": "Translated duration type name.",
                              "type": "string"
                            },
                            "max": {
                              "description": "Maximum allowed duration for this type.",
                              "type": "integer"
                            },
                            "min": {
                              "description": "Minimum allowed duration for this type.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Duration type name.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "trade_type": {
                        "description": "List of trade types available for the symbols.",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "display_name": {
                            "description": "Translated trade type name.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Trade type name.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "market": {
            "description": "The market in which the underlyings listed in `symbol` located.",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "display_name": {
                "description": "Translated market name.",
                "type": "string"
              },
              "name": {
                "description": "Market name.",
                "type": "string"
              }
            }
          },
          "submarket": {
            "description": "The submarket in which the underlyings listed in `symbol` located.",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "display_name": {
                "description": "Translated submarket name.",
                "type": "string"
              },
              "name": {
                "description": "Submarket name.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "trading_durations"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Server list (request)

Get the list of servers for a trading platform.
Auth Required: read
{}
{}
trading_servers

constant
integer
1
Must be 1
{}
account_type

enum
string
demo
real
[Optional] Trading account type.
{}
environment

enum
string
all
Deriv-Demo
Deriv-Server
Deriv-Server-02
Deriv-Server-03
default:
all
[Optional] Pass the environment (installation) instance. Currently, there are one demo and two real environments. Defaults to 'all'.
{}
market_type

enum
string
all
financial
synthetic
default:
synthetic
[Optional] Market type.
{}
platform

enum
string
mt5
dxtrade
default:
mt5
[Optional] Pass the trading platform name, default to mt5
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Server list (response)

Get list of servers for the platform provided.
{}
{}
trading_servers

array
trading_servers
Array containing platform server objects.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
trading_servers
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Server list (request)",
  "description": "Get the list of servers for a trading platform.",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read"
  ],
  "additionalProperties": false,
  "required": [
    "trading_servers"
  ],
  "properties": {
    "trading_servers": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "account_type": {
      "description": "[Optional] Trading account type.",
      "type": "string",
      "enum": [
        "demo",
        "real"
      ]
    },
    "environment": {
      "description": "[Optional] Pass the environment (installation) instance. Currently, there are one demo and two real environments. Defaults to 'all'.",
      "type": "string",
      "default": "all",
      "enum": [
        "all",
        "Deriv-Demo",
        "Deriv-Server",
        "Deriv-Server-02",
        "Deriv-Server-03"
      ]
    },
    "market_type": {
      "description": "[Optional] Market type.",
      "type": "string",
      "default": "synthetic",
      "enum": [
        "all",
        "financial",
        "synthetic"
      ]
    },
    "platform": {
      "description": "[Optional] Pass the trading platform name, default to mt5",
      "type": "string",
      "default": "mt5",
      "enum": [
        "mt5",
        "dxtrade"
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Server list (response)",
  "description": "Get list of servers for the platform provided.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "trading_servers": {
      "title": "trading_servers",
      "description": "Array containing platform server objects.",
      "type": "array",
      "items": {
        "title": "Details of each server.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "account_type": {
            "description": "Supported trading account type.",
            "type": "string",
            "enum": [
              "demo",
              "real"
            ]
          },
          "disabled": {
            "description": "Flag to represent if this server is currently disabled or not",
            "type": "integer",
            "enum": [
              0,
              1
            ]
          },
          "environment": {
            "description": "Current environment (installation instance) where servers are deployed. Currently, there are one demo and two real environments.",
            "type": "string",
            "enum": [
              "Deriv-Demo",
              "Deriv-Server",
              "Deriv-Server-02",
              "Deriv-Server-03"
            ]
          },
          "geolocation": {
            "description": "Object containing geolocation information of the server.",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "group": {
                "description": "Internal server grouping.",
                "type": "string"
              },
              "location": {
                "description": "Geolocation country or place where server is located.",
                "type": "string"
              },
              "region": {
                "description": "Geolocation region where server is located.",
                "type": "string"
              },
              "sequence": {
                "description": "Sequence number of the server in that region.",
                "type": "integer"
              }
            }
          },
          "id": {
            "description": "Server unique id.",
            "type": "string",
            "enum": [
              "p01_ts01",
              "p01_ts02",
              "p01_ts03",
              "p01_ts04",
              "p02_ts02",
              "p03_ts01",
              "p03_ts02"
            ]
          },
          "market_type": {
            "description": "Market type",
            "type": "string"
          },
          "message_to_client": {
            "description": "Error message to client when server is disabled",
            "type": "string"
          },
          "recommended": {
            "description": "Flag to represent if this is server is recommended based on client's country of residence.",
            "type": "integer",
            "enum": [
              0,
              1
            ]
          },
          "supported_accounts": {
            "description": "Account type supported by the server.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "trading_servers"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


rading Times (request)

Receive a list of market opening times for a given date.
{}
{}
trading_times

string
^([0-9]{4}-[0-9]{1,2}-[0-9]{1,2}|today)$
Date to receive market opening times for. (yyyy-mm-dd format. today can also be specified).
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Trading Times (response)

A message with Trading Times
{}
{}
trading_times

trading_times
The trading times structure is a hierarchy as follows: Market -> SubMarket -> Underlyings
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
trading_times
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Trading Times (request)",
  "description": "Receive a list of market opening times for a given date.",
  "type": "object",
  "auth_required": 0,
  "additionalProperties": false,
  "required": [
    "trading_times"
  ],
  "properties": {
    "trading_times": {
      "description": "Date to receive market opening times for. (`yyyy-mm-dd` format. `today` can also be specified).",
      "type": "string",
      "pattern": "^([0-9]{4}-[0-9]{1,2}-[0-9]{1,2}|today)$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Trading Times (response)",
  "description": "A message with Trading Times",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "trading_times": {
      "title": "trading_times",
      "description": "The trading times structure is a hierarchy as follows: Market -> SubMarket -> Underlyings",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "markets"
      ],
      "properties": {
        "markets": {
          "description": "An array of markets",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Market name",
                "type": "string"
              },
              "submarkets": {
                "description": "An array of submarkets",
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "name",
                    "symbols"
                  ],
                  "properties": {
                    "name": {
                      "description": "Submarket name",
                      "type": "string"
                    },
                    "symbols": {
                      "description": "Symbols array",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "name",
                          "symbol"
                        ],
                        "properties": {
                          "events": {
                            "description": "Events",
                            "type": "array"
                          },
                          "name": {
                            "description": "Symbol name",
                            "type": "string"
                          },
                          "symbol": {
                            "description": "Symbol shortcode",
                            "type": "string"
                          },
                          "times": {
                            "description": "Open, close and settlement times",
                            "type": "object"
                          },
                          "trading_days": {
                            "description": "Trading days",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "Sun",
                                "Mon",
                                "Tue",
                                "Wed",
                                "Thu",
                                "Fri",
                                "Sat"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "trading_times"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}


Transactions Stream (request)

Subscribe to transaction notifications
Auth Required: readtrading_information
{}
{}
transaction

constant
integer
1
Must be 1
{}
subscribe

constant
integer
1
If set to 1, will send updates whenever there is an update to transactions. If not to 1 then it will not return any records.
{}
loginid

string
^[A-Za-z]+[0-9]+$
[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Transactions Stream (response)

Return transaction updates
{}
{}
transaction

transaction
Realtime stream of user transaction updates.
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
transaction
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.

{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Transactions Stream (request)",
  "description": "Subscribe to transaction notifications",
  "type": "object",
  "auth_required": 1,
  "auth_scopes": [
    "read",
    "trading_information"
  ],
  "additionalProperties": false,
  "required": [
    "transaction",
    "subscribe"
  ],
  "properties": {
    "transaction": {
      "description": "Must be `1`",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "subscribe": {
      "description": "If set to 1, will send updates whenever there is an update to transactions. If not to 1 then it will not return any records.",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "loginid": {
      "description": "[Optional] The login id of the user. Mandatory when multiple tokens were provided during authorize.",
      "type": "string",
      "pattern": "^[A-Za-z]+[0-9]+$"
    },
    "passthrough": {
      "description": "[Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.",
      "type": "object"
    },
    "req_id": {
      "description": "[Optional] Used to map request to response.",
      "type": "integer"
    }
  }
}


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Transactions Stream (response)",
  "description": "Return transaction updates",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "transaction": {
      "title": "transaction",
      "description": "Realtime stream of user transaction updates.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "action": {
          "description": "The transaction type.",
          "type": "string",
          "enum": [
            "buy",
            "sell",
            "deposit",
            "withdrawal",
            "escrow",
            "adjustment",
            "virtual_credit",
            "transfer"
          ]
        },
        "amount": {
          "description": "It is the amount of transaction performed.",
          "type": "number",
          "examples": [
            -83.23
          ]
        },
        "balance": {
          "description": "Balance amount",
          "type": "number",
          "maximum": 10000000000000000000,
          "minimum": 0
        },
        "barrier": {
          "description": "Barrier of the contract. Only applicable to single barrier contracts. Could be undefined if a contract does not have a barrier.",
          "type": [
            "null",
            "number",
            "string"
          ]
        },
        "contract_id": {
          "description": "It is the contract ID.",
          "type": [
            "integer",
            "null"
          ],
          "examples": [
            4867502908
          ]
        },
        "currency": {
          "description": "Transaction currency",
          "type": "string"
        },
        "date_expiry": {
          "description": "Epoch value of the expiry time of the contract. Please note that in case of buy transaction this is approximate value not exact one.",
          "type": "integer"
        },
        "display_name": {
          "description": "Display name of symbol",
          "type": "string"
        },
        "high_barrier": {
          "description": "The high barrier of a contract. Only applicable to double barrier contracts.",
          "type": [
            "number",
            "string"
          ]
        },
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        },
        "longcode": {
          "description": "Description of contract purchased",
          "type": "string"
        },
        "low_barrier": {
          "description": "The low barrier of a contract. Only applicable to double barrier contracts.",
          "type": "string"
        },
        "purchase_time": {
          "description": "Time at which contract was purchased, present only for sell transaction",
          "type": "integer"
        },
        "stop_loss": {
          "description": "The pip-sized target spot price where the contract will be closed automatically at the loss specified by the user.",
          "type": [
            "null",
            "string"
          ]
        },
        "stop_out": {
          "description": "The pip-sized target spot price where the contract will be closed automatically when the value of the contract is close to zero. This is set by the us.",
          "type": [
            "null",
            "string"
          ]
        },
        "symbol": {
          "description": "Symbol code",
          "type": "string"
        },
        "take_profit": {
          "description": "The pip-sized target spot price where the contract will be closed automatically at the profit specified by the user.",
          "type": [
            "null",
            "string"
          ]
        },
        "transaction_id": {
          "description": "It is the transaction ID. Every contract (buy or sell) or payment has a unique ID.",
          "type": "integer",
          "examples": [
            10867502908
          ]
        },
        "transaction_time": {
          "description": "Time at which transaction was performed: for buy it is purchase time, for sell it is sell time.",
          "type": "integer"
        }
      }
    },
    "subscription": {
      "title": "Subscription information",
      "description": "For subscription requests only.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "transaction"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}

Server Status (request)

Request server status.
{}
{}
website_status

constant
integer
1
Must be 1
{}
subscribe

enum
integer
0
1
[Optional] 1 to stream the server/website status updates.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Server Status (response)

Server status alongside general settings like call limits, currencies information, supported languages, etc.
{}
{}
website_status

website_status
Server status and other information regarding general settings
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
website_status
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


Server Status (request)

Request server status.
{}
{}
website_status

constant
integer
1
Must be 1
{}
subscribe

enum
integer
0
1
[Optional] 1 to stream the server/website status updates.
{}
passthrough

object
[Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
{}
req_id

integer
[Optional] Used to map request to response.
Server Status (response)

Server status alongside general settings like call limits, currencies information, supported languages, etc.
{}
{}
website_status

website_status
Server status and other information regarding general settings
{}
subscription

subscription
For subscription requests only.
{}
echo_req

object
Echo of the request made.
{}
msg_type

constant
string
website_status
Action name of the request made.
{}
req_id

integer
Optional field sent in request to map to response, present only when request contains req_id.


{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Server Status (response)",
  "description": "Server status alongside general settings like call limits, currencies information, supported languages, etc.",
  "type": "object",
  "required": [
    "echo_req",
    "msg_type"
  ],
  "properties": {
    "website_status": {
      "title": "website_status",
      "description": "Server status and other information regarding general settings",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "api_call_limits",
        "currencies_config"
      ],
      "properties": {
        "api_call_limits": {
          "description": "Maximum number of API calls during specified period of time.",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "max_proposal_subscription",
            "max_requestes_general",
            "max_requests_outcome",
            "max_requests_pricing"
          ],
          "properties": {
            "max_proposal_subscription": {
              "description": "Maximum subscription to proposal calls.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "applies_to",
                "max"
              ],
              "properties": {
                "applies_to": {
                  "description": "Describes which calls this limit applies to.",
                  "type": "string"
                },
                "max": {
                  "description": "Maximum number of allowed calls.",
                  "type": "number"
                }
              }
            },
            "max_requestes_general": {
              "description": "Maximum number of general requests allowed during specified period of time.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "applies_to",
                "hourly",
                "minutely"
              ],
              "properties": {
                "applies_to": {
                  "description": "Describes which calls this limit applies to.",
                  "type": "string"
                },
                "hourly": {
                  "description": "The maximum of allowed calls per hour.",
                  "type": "number"
                },
                "minutely": {
                  "description": "The maximum of allowed calls per minute.",
                  "type": "number"
                }
              }
            },
            "max_requests_outcome": {
              "description": "Maximum number of outcome requests allowed during specified period of time.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "applies_to",
                "hourly",
                "minutely"
              ],
              "properties": {
                "applies_to": {
                  "description": "Describes which calls this limit applies to.",
                  "type": "string"
                },
                "hourly": {
                  "description": "The maximum of allowed calls per hour.",
                  "type": "number"
                },
                "minutely": {
                  "description": "The maximum of allowed calls per minute.",
                  "type": "number"
                }
              }
            },
            "max_requests_pricing": {
              "description": "Maximum number of pricing requests allowed during specified period of time.",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "applies_to",
                "hourly",
                "minutely"
              ],
              "properties": {
                "applies_to": {
                  "description": "Describes which calls this limit applies to.",
                  "type": "string"
                },
                "hourly": {
                  "description": "The maximum of allowed calls per hour.",
                  "type": "number"
                },
                "minutely": {
                  "description": "The maximum of allowed calls per minute.",
                  "type": "number"
                }
              }
            }
          }
        },
        "broker_codes": {
          "description": "List of all available broker codes.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "clients_country": {
          "description": "Country code of connected IP",
          "type": "string"
        },
        "currencies_config": {
          "description": "Available currencies and their information",
          "type": "object",
          "minProperties": 1,
          "patternProperties": {
            "^[a-zA-Z0-9]{2,20}$": {
              "description": "Currency code",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "fractional_digits",
                "is_deposit_suspended",
                "is_suspended",
                "is_withdrawal_suspended",
                "stake_default",
                "transfer_between_accounts",
                "type"
              ],
              "properties": {
                "fractional_digits": {
                  "description": "Number of fractional digits.",
                  "type": "number"
                },
                "is_deposit_suspended": {
                  "description": "Current status for payment deposit for the currency",
                  "type": "number",
                  "enum": [
                    0,
                    1
                  ]
                },
                "is_suspended": {
                  "description": "Current status for the currency",
                  "type": "number",
                  "enum": [
                    0,
                    1
                  ]
                },
                "is_withdrawal_suspended": {
                  "description": "Current status for payment withdrawal for the currency",
                  "type": "number",
                  "enum": [
                    0,
                    1
                  ]
                },
                "name": {
                  "description": "Name of the currency.",
                  "type": "string"
                },
                "platform": {
                  "description": "List of cashier platforms supported for this currency. It is categorized by cashier and ramp (on-ramp, off-ramp) platforms.",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "cashier",
                    "ramp"
                  ],
                  "properties": {
                    "cashier": {
                      "description": "Supported platforms for the cashier, this is passed to provider attribute of `cashier` call",
                      "type": "array"
                    },
                    "ramp": {
                      "description": "Supported platforms for the ramp (on-ramp, off-ramp)",
                      "type": "array"
                    }
                  }
                },
                "stake_default": {
                  "description": "Default stake value for the currency.",
                  "type": "number",
                  "minimum": 0
                },
                "transfer_between_accounts": {
                  "description": "Fees and range of allowed amount for transfer between accounts with different types of currencies.",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "fees",
                    "limits"
                  ],
                  "properties": {
                    "fees": {
                      "description": "The fee that applies for transfer between accounts with different types of currencies.",
                      "type": "object",
                      "patternProperties": {
                        "^[a-zA-Z0-9]{2,20}$": {
                          "description": "Currency code.",
                          "type": "number",
                          "maximum": 7,
                          "minimum": 0
                        }
                      }
                    },
                    "limits": {
                      "description": "Range of allowed amount for transfer between accounts.",
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "min"
                          ],
                          "properties": {
                            "max": {
                              "description": "Maximum allowed amount for transfer between accounts with different types of currencies.",
                              "type": "number",
                              "minimum": 0
                            },
                            "min": {
                              "description": "Minimum allowed amount for transfer between accounts with different types of currencies.",
                              "type": "number",
                              "minimum": 0
                            }
                          }
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "limits_ctrader": {
                      "description": "Range of allowed amount for transfer between ctrader accounts.",
                      "type": "object"
                    },
                    "limits_dxtrade": {
                      "description": "Range of allowed amount for transfer between dxtrade accounts.",
                      "type": "object"
                    },
                    "limits_mt5": {
                      "description": "Range of allowed amount for transfer between mt5 accounts.",
                      "type": "object"
                    }
                  }
                },
                "type": {
                  "description": "Type of the currency.",
                  "type": "string",
                  "enum": [
                    "fiat",
                    "crypto"
                  ]
                }
              }
            }
          }
        },
        "dxtrade_status": {
          "description": "Suspension status of Dxtrade/DerivX API calls",
          "type": "object",
          "additionalProperties": false,
          "minProperties": 3,
          "properties": {
            "all": {
              "description": "Suspension of Dxtrade/DerivX API calls on all servers.",
              "type": "integer"
            },
            "demo": {
              "description": "Suspension of Dxtrade/DerivX API calls on demo servers.",
              "type": "integer"
            },
            "real": {
              "description": "Suspension of Dxtrade/DerivX API calls on real trading servers.",
              "type": "integer"
            }
          }
        },
        "message": {
          "description": "Text for site status banner, contains problem description. shown only if set by the system.",
          "type": "string"
        },
        "mt5_status": {
          "description": "Suspension status of MT5 API calls",
          "type": "object",
          "additionalProperties": false,
          "minProperties": 2,
          "properties": {
            "demo": {
              "description": "Suspension of MT5 API calls on demo servers.",
              "type": "array"
            },
            "real": {
              "description": "Suspension of MT5 API calls on real trading servers.",
              "type": "array"
            }
          }
        },
        "p2p_config": {
          "description": "Peer-to-peer payment system settings.",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "adverts_active_limit",
            "block_trade",
            "cancellation_block_duration",
            "cancellation_count_period",
            "cancellation_grace_period",
            "cancellation_limit",
            "cross_border_ads_enabled",
            "disabled",
            "feature_level",
            "fixed_rate_adverts",
            "float_rate_adverts",
            "float_rate_offset_limit",
            "local_currencies",
            "maximum_advert_amount",
            "maximum_order_amount",
            "order_daily_limit",
            "order_payment_period",
            "payment_methods_enabled",
            "review_period",
            "supported_currencies"
          ],
          "properties": {
            "adverts_active_limit": {
              "description": "Maximum number of active ads allowed by an advertiser per currency pair and advert type (buy or sell).",
              "type": "integer"
            },
            "adverts_archive_period": {
              "description": "Adverts will be deactivated if no activity occurs within this period, in days.",
              "type": "integer"
            },
            "block_trade": {
              "description": "Block trading settings",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "disabled": {
                  "description": "When 1, Block trading is unavailable.",
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ]
                },
                "maximum_advert_amount": {
                  "description": "Maximum amount of a block trade advert, in USD.",
                  "type": "number"
                }
              }
            },
            "cancellation_block_duration": {
              "description": "A buyer will be blocked for this duration after exceeding the cancellation limit, in hours.",
              "type": "integer"
            },
            "cancellation_count_period": {
              "description": "The period within which to count buyer cancellations, in hours.",
              "type": "integer"
            },
            "cancellation_grace_period": {
              "description": "A buyer may cancel an order within this period without negative consequences, in minutes after order creation.",
              "type": "integer"
            },
            "cancellation_limit": {
              "description": "A buyer will be temporarily barred after marking this number of cancellations within cancellation_period.",
              "type": "integer"
            },
            "cross_border_ads_enabled": {
              "description": "When 0, only exchanges in local currency are allowed for P2P advertiser.",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "disabled": {
              "description": "When 1, the P2P service is unavailable.",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "feature_level": {
              "description": "Indicates the availbility of certain backend features.",
              "type": "integer"
            },
            "fixed_rate_adverts": {
              "description": "Availability of fixed rate adverts.",
              "type": "string",
              "enum": [
                "disabled",
                "enabled",
                "list_only"
              ]
            },
            "fixed_rate_adverts_end_date": {
              "description": "Date on which fixed rate adverts will be deactivated.",
              "type": "string"
            },
            "float_rate_adverts": {
              "description": "Availability of floating rate adverts.",
              "type": "string",
              "enum": [
                "disabled",
                "enabled",
                "list_only"
              ]
            },
            "float_rate_offset_limit": {
              "description": "Maximum rate offset for floating rate adverts.",
              "type": "number"
            },
            "local_currencies": {
              "description": "Available local currencies for p2p_advert_list request.",
              "type": "array",
              "items": {
                "description": "Local currency details.",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "display_name",
                  "has_adverts",
                  "symbol"
                ],
                "properties": {
                  "display_name": {
                    "description": "Local currency name",
                    "type": "string"
                  },
                  "has_adverts": {
                    "description": "Indicates that there are adverts available for this currency.",
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ]
                  },
                  "is_default": {
                    "description": "Indicates that this is local currency for the current country.",
                    "type": "integer",
                    "enum": [
                      1
                    ]
                  },
                  "symbol": {
                    "description": "Local currency symbol",
                    "type": "string"
                  }
                }
              }
            },
            "maximum_advert_amount": {
              "description": "Maximum amount of an advert, in USD.",
              "type": "number"
            },
            "maximum_order_amount": {
              "description": "Maximum amount of an order, in USD.",
              "type": "number"
            },
            "order_daily_limit": {
              "description": "Maximum number of orders a user may create per day.",
              "type": "integer"
            },
            "order_payment_period": {
              "description": "Time allowed for order payment, in minutes after order creation.",
              "type": "integer"
            },
            "override_exchange_rate": {
              "description": "Local P2P exchange rate which should be used instead of those obtained from the `exchange_rates` call.",
              "type": "string"
            },
            "payment_methods_enabled": {
              "description": "Indicates if the payment methods feature is enabled.",
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "review_period": {
              "description": "Time after successful order completion during which reviews can be created, in hours.",
              "type": "number"
            },
            "supported_currencies": {
              "description": "List of currencies for which P2P is available",
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          }
        },
        "payment_agents": {
          "description": "Payments Agents system settings.",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "initial_deposit_per_country"
          ],
          "properties": {
            "initial_deposit_per_country": {
              "description": "Initial deposit requirement per country.",
              "type": "object",
              "patternProperties": {
                "^([a-z]{2}|default)$": {
                  "description": "Country code or default setting",
                  "type": "number"
                }
              }
            }
          }
        },
        "site_status": {
          "description": "The current status of the website.",
          "type": "string",
          "enum": [
            "up",
            "down",
            "updating"
          ]
        },
        "supported_languages": {
          "description": "Provides codes for languages supported.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "terms_conditions_version": {
          "description": "Latest terms and conditions version.",
          "type": "string"
        }
      }
    },
    "subscription": {
      "title": "Subscription information",
      "description": "For subscription requests only.",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.",
          "type": "string",
          "examples": [
            "c84a793b-8a87-7999-ce10-9b22f7ceead3"
          ]
        }
      }
    },
    "echo_req": {
      "description": "Echo of the request made.",
      "type": "object"
    },
    "msg_type": {
      "description": "Action name of the request made.",
      "type": "string",
      "enum": [
        "website_status"
      ]
    },
    "req_id": {
      "description": "Optional field sent in request to map to response, present only when request contains `req_id`.",
      "type": "integer"
    }
  }
}
